{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.Chime.Types.EngineTranscribeSettings
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Amazonka.Chime.Types.EngineTranscribeSettings where

import Amazonka.Chime.Types.TranscribeContentIdentificationType
import Amazonka.Chime.Types.TranscribeContentRedactionType
import Amazonka.Chime.Types.TranscribeLanguageCode
import Amazonka.Chime.Types.TranscribePartialResultsStability
import Amazonka.Chime.Types.TranscribeRegion
import Amazonka.Chime.Types.TranscribeVocabularyFilterMethod
import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import qualified Amazonka.Prelude as Prelude

-- | Settings specific for Amazon Transcribe as the live transcription
-- engine.
--
-- If you specify an invalid combination of parameters, a
-- @TranscriptFailed@ event will be sent with the contents of the
-- @BadRequestException@ generated by Amazon Transcribe. For more
-- information on each parameter and which combinations are valid, refer to
-- the
-- <https://docs.aws.amazon.com/transcribe/latest/APIReference/API_streaming_StartStreamTranscription.html StartStreamTranscription>
-- API in the /Amazon Transcribe Developer Guide/.
--
-- /See:/ 'newEngineTranscribeSettings' smart constructor.
data EngineTranscribeSettings = EngineTranscribeSettings'
  { -- | Labels all personally identifiable information (PII) identified in your
    -- transcript. If you don\'t include @PiiEntityTypes@, all PII is
    -- identified.
    --
    -- You can’t set @ContentIdentificationType@ and @ContentRedactionType@.
    contentIdentificationType :: Prelude.Maybe TranscribeContentIdentificationType,
    -- | Content redaction is performed at the segment level. If you don\'t
    -- include @PiiEntityTypes@, all PII is redacted.
    --
    -- You can’t set @ContentIdentificationType@ and @ContentRedactionType@.
    contentRedactionType :: Prelude.Maybe TranscribeContentRedactionType,
    -- | Enables partial result stabilization for your transcription. Partial
    -- result stabilization can reduce latency in your output, but may impact
    -- accuracy.
    enablePartialResultsStabilization :: Prelude.Maybe Prelude.Bool,
    -- | Enables automatic language identification for your transcription.
    --
    -- If you include @IdentifyLanguage@, you can optionally use
    -- @LanguageOptions@ to include a list of language codes that you think may
    -- be present in your audio stream. Including language options can improve
    -- transcription accuracy.
    --
    -- You can also use @PreferredLanguage@ to include a preferred language.
    -- Doing so can help Amazon Transcribe identify the language faster.
    --
    -- You must include either @LanguageCode@ or @IdentifyLanguage@.
    --
    -- Language identification can\'t be combined with custom language models
    -- or redaction.
    identifyLanguage :: Prelude.Maybe Prelude.Bool,
    -- | Specify the language code that represents the language spoken.
    --
    -- If you\'re unsure of the language spoken in your audio, consider using
    -- @IdentifyLanguage@ to enable automatic language identification.
    languageCode :: Prelude.Maybe TranscribeLanguageCode,
    -- | Specify the name of the custom language model that you want to use when
    -- processing your transcription. Note that language model names are case
    -- sensitive.
    --
    -- The language of the specified language model must match the language
    -- code. If the languages don\'t match, the custom language model isn\'t
    -- applied. There are no errors or warnings associated with a language
    -- mismatch.
    --
    -- If you use Amazon Transcribe in multiple Regions, the custom language
    -- model must be available in Amazon Transcribe in each Region.
    languageModelName :: Prelude.Maybe Prelude.Text,
    -- | Specify two or more language codes that represent the languages you
    -- think may be present in your media; including more than five is not
    -- recommended. If you\'re unsure what languages are present, do not
    -- include this parameter.
    --
    -- Including language options can improve the accuracy of language
    -- identification.
    --
    -- If you include @LanguageOptions@, you must also include
    -- @IdentifyLanguage@.
    --
    -- You can only include one language dialect per language. For example, you
    -- cannot include @en-US@ and @en-AU@.
    languageOptions :: Prelude.Maybe Prelude.Text,
    -- | Specify the level of stability to use when you enable partial results
    -- stabilization (@EnablePartialResultsStabilization@).
    --
    -- Low stability provides the highest accuracy. High stability transcribes
    -- faster, but with slightly lower accuracy.
    partialResultsStability :: Prelude.Maybe TranscribePartialResultsStability,
    -- | Specify which types of personally identifiable information (PII) you
    -- want to redact in your transcript. You can include as many types as
    -- you\'d like, or you can select @ALL@.
    --
    -- Values must be comma-separated and can include: @ADDRESS@,
    -- @BANK_ACCOUNT_NUMBER@, @BANK_ROUTING@, @CREDIT_DEBIT_CVV@,
    -- @CREDIT_DEBIT_EXPIRY@ @CREDIT_DEBIT_NUMBER@, @EMAIL@,@NAME@, @PHONE@,
    -- @PIN@, @SSN@, or @ALL@.
    --
    -- Note that if you include @PiiEntityTypes@, you must also include
    -- @ContentIdentificationType@ or @ContentRedactionType@.
    --
    -- If you include @ContentRedactionType@ or @ContentIdentificationType@,
    -- but do not include @PiiEntityTypes@, all PII is redacted or identified.
    piiEntityTypes :: Prelude.Maybe Prelude.Text,
    -- | Specify a preferred language from the subset of languages codes you
    -- specified in @LanguageOptions@.
    --
    -- You can only use this parameter if you include @IdentifyLanguage@ and
    -- @LanguageOptions@.
    preferredLanguage :: Prelude.Maybe TranscribeLanguageCode,
    -- | The AWS Region in which to use Amazon Transcribe.
    --
    -- If you don\'t specify a Region, then the @MediaRegion@ parameter of the
    -- <https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_CreateMeeting.html CreateMeeting.html>
    -- API will be used. However, if Amazon Transcribe is not available in the
    -- @MediaRegion@, then a TranscriptFailed event is sent.
    --
    -- Use @auto@ to use Amazon Transcribe in a Region near the meeting’s
    -- @MediaRegion@. For more information, refer to
    -- <https://docs.aws.amazon.com/chime-sdk/latest/dg/transcription-options.html#choose-region Choosing a transcription Region>
    -- in the /Amazon Chime SDK Developer Guide/.
    region :: Prelude.Maybe TranscribeRegion,
    -- | Specify how you want your vocabulary filter applied to your transcript.
    --
    -- To replace words with @***@, choose @mask@.
    --
    -- To delete words, choose @remove@.
    --
    -- To flag words without changing them, choose @tag@.
    vocabularyFilterMethod :: Prelude.Maybe TranscribeVocabularyFilterMethod,
    -- | Specify the name of the custom vocabulary filter that you want to use
    -- when processing your transcription. Note that vocabulary filter names
    -- are case sensitive.
    --
    -- If you use Amazon Transcribe in multiple Regions, the vocabulary filter
    -- must be available in Amazon Transcribe in each Region.
    --
    -- If you include @IdentifyLanguage@ and want to use one or more vocabulary
    -- filters with your transcription, use the @VocabularyFilterNames@
    -- parameter instead.
    vocabularyFilterName :: Prelude.Maybe Prelude.Text,
    -- | Specify the names of the custom vocabulary filters that you want to use
    -- when processing your transcription. Note that vocabulary filter names
    -- are case sensitive.
    --
    -- If you use Amazon Transcribe in multiple Regions, the vocabulary filter
    -- must be available in Amazon Transcribe in each Region.
    --
    -- If you\'re /not/ including @IdentifyLanguage@ and want to use a custom
    -- vocabulary filter with your transcription, use the
    -- @VocabularyFilterName@ parameter instead.
    vocabularyFilterNames :: Prelude.Maybe Prelude.Text,
    -- | Specify the name of the custom vocabulary that you want to use when
    -- processing your transcription. Note that vocabulary names are case
    -- sensitive.
    --
    -- If you use Amazon Transcribe multiple Regions, the vocabulary must be
    -- available in Amazon Transcribe in each Region.
    --
    -- If you include @IdentifyLanguage@ and want to use one or more custom
    -- vocabularies with your transcription, use the @VocabularyNames@
    -- parameter instead.
    vocabularyName :: Prelude.Maybe Prelude.Text,
    -- | Specify the names of the custom vocabularies that you want to use when
    -- processing your transcription. Note that vocabulary names are case
    -- sensitive.
    --
    -- If you use Amazon Transcribe in multiple Regions, the vocabulary must be
    -- available in Amazon Transcribe in each Region.
    --
    -- If you don\'t include @IdentifyLanguage@ and want to use a custom
    -- vocabulary with your transcription, use the @VocabularyName@ parameter
    -- instead.
    vocabularyNames :: Prelude.Maybe Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'EngineTranscribeSettings' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'contentIdentificationType', 'engineTranscribeSettings_contentIdentificationType' - Labels all personally identifiable information (PII) identified in your
-- transcript. If you don\'t include @PiiEntityTypes@, all PII is
-- identified.
--
-- You can’t set @ContentIdentificationType@ and @ContentRedactionType@.
--
-- 'contentRedactionType', 'engineTranscribeSettings_contentRedactionType' - Content redaction is performed at the segment level. If you don\'t
-- include @PiiEntityTypes@, all PII is redacted.
--
-- You can’t set @ContentIdentificationType@ and @ContentRedactionType@.
--
-- 'enablePartialResultsStabilization', 'engineTranscribeSettings_enablePartialResultsStabilization' - Enables partial result stabilization for your transcription. Partial
-- result stabilization can reduce latency in your output, but may impact
-- accuracy.
--
-- 'identifyLanguage', 'engineTranscribeSettings_identifyLanguage' - Enables automatic language identification for your transcription.
--
-- If you include @IdentifyLanguage@, you can optionally use
-- @LanguageOptions@ to include a list of language codes that you think may
-- be present in your audio stream. Including language options can improve
-- transcription accuracy.
--
-- You can also use @PreferredLanguage@ to include a preferred language.
-- Doing so can help Amazon Transcribe identify the language faster.
--
-- You must include either @LanguageCode@ or @IdentifyLanguage@.
--
-- Language identification can\'t be combined with custom language models
-- or redaction.
--
-- 'languageCode', 'engineTranscribeSettings_languageCode' - Specify the language code that represents the language spoken.
--
-- If you\'re unsure of the language spoken in your audio, consider using
-- @IdentifyLanguage@ to enable automatic language identification.
--
-- 'languageModelName', 'engineTranscribeSettings_languageModelName' - Specify the name of the custom language model that you want to use when
-- processing your transcription. Note that language model names are case
-- sensitive.
--
-- The language of the specified language model must match the language
-- code. If the languages don\'t match, the custom language model isn\'t
-- applied. There are no errors or warnings associated with a language
-- mismatch.
--
-- If you use Amazon Transcribe in multiple Regions, the custom language
-- model must be available in Amazon Transcribe in each Region.
--
-- 'languageOptions', 'engineTranscribeSettings_languageOptions' - Specify two or more language codes that represent the languages you
-- think may be present in your media; including more than five is not
-- recommended. If you\'re unsure what languages are present, do not
-- include this parameter.
--
-- Including language options can improve the accuracy of language
-- identification.
--
-- If you include @LanguageOptions@, you must also include
-- @IdentifyLanguage@.
--
-- You can only include one language dialect per language. For example, you
-- cannot include @en-US@ and @en-AU@.
--
-- 'partialResultsStability', 'engineTranscribeSettings_partialResultsStability' - Specify the level of stability to use when you enable partial results
-- stabilization (@EnablePartialResultsStabilization@).
--
-- Low stability provides the highest accuracy. High stability transcribes
-- faster, but with slightly lower accuracy.
--
-- 'piiEntityTypes', 'engineTranscribeSettings_piiEntityTypes' - Specify which types of personally identifiable information (PII) you
-- want to redact in your transcript. You can include as many types as
-- you\'d like, or you can select @ALL@.
--
-- Values must be comma-separated and can include: @ADDRESS@,
-- @BANK_ACCOUNT_NUMBER@, @BANK_ROUTING@, @CREDIT_DEBIT_CVV@,
-- @CREDIT_DEBIT_EXPIRY@ @CREDIT_DEBIT_NUMBER@, @EMAIL@,@NAME@, @PHONE@,
-- @PIN@, @SSN@, or @ALL@.
--
-- Note that if you include @PiiEntityTypes@, you must also include
-- @ContentIdentificationType@ or @ContentRedactionType@.
--
-- If you include @ContentRedactionType@ or @ContentIdentificationType@,
-- but do not include @PiiEntityTypes@, all PII is redacted or identified.
--
-- 'preferredLanguage', 'engineTranscribeSettings_preferredLanguage' - Specify a preferred language from the subset of languages codes you
-- specified in @LanguageOptions@.
--
-- You can only use this parameter if you include @IdentifyLanguage@ and
-- @LanguageOptions@.
--
-- 'region', 'engineTranscribeSettings_region' - The AWS Region in which to use Amazon Transcribe.
--
-- If you don\'t specify a Region, then the @MediaRegion@ parameter of the
-- <https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_CreateMeeting.html CreateMeeting.html>
-- API will be used. However, if Amazon Transcribe is not available in the
-- @MediaRegion@, then a TranscriptFailed event is sent.
--
-- Use @auto@ to use Amazon Transcribe in a Region near the meeting’s
-- @MediaRegion@. For more information, refer to
-- <https://docs.aws.amazon.com/chime-sdk/latest/dg/transcription-options.html#choose-region Choosing a transcription Region>
-- in the /Amazon Chime SDK Developer Guide/.
--
-- 'vocabularyFilterMethod', 'engineTranscribeSettings_vocabularyFilterMethod' - Specify how you want your vocabulary filter applied to your transcript.
--
-- To replace words with @***@, choose @mask@.
--
-- To delete words, choose @remove@.
--
-- To flag words without changing them, choose @tag@.
--
-- 'vocabularyFilterName', 'engineTranscribeSettings_vocabularyFilterName' - Specify the name of the custom vocabulary filter that you want to use
-- when processing your transcription. Note that vocabulary filter names
-- are case sensitive.
--
-- If you use Amazon Transcribe in multiple Regions, the vocabulary filter
-- must be available in Amazon Transcribe in each Region.
--
-- If you include @IdentifyLanguage@ and want to use one or more vocabulary
-- filters with your transcription, use the @VocabularyFilterNames@
-- parameter instead.
--
-- 'vocabularyFilterNames', 'engineTranscribeSettings_vocabularyFilterNames' - Specify the names of the custom vocabulary filters that you want to use
-- when processing your transcription. Note that vocabulary filter names
-- are case sensitive.
--
-- If you use Amazon Transcribe in multiple Regions, the vocabulary filter
-- must be available in Amazon Transcribe in each Region.
--
-- If you\'re /not/ including @IdentifyLanguage@ and want to use a custom
-- vocabulary filter with your transcription, use the
-- @VocabularyFilterName@ parameter instead.
--
-- 'vocabularyName', 'engineTranscribeSettings_vocabularyName' - Specify the name of the custom vocabulary that you want to use when
-- processing your transcription. Note that vocabulary names are case
-- sensitive.
--
-- If you use Amazon Transcribe multiple Regions, the vocabulary must be
-- available in Amazon Transcribe in each Region.
--
-- If you include @IdentifyLanguage@ and want to use one or more custom
-- vocabularies with your transcription, use the @VocabularyNames@
-- parameter instead.
--
-- 'vocabularyNames', 'engineTranscribeSettings_vocabularyNames' - Specify the names of the custom vocabularies that you want to use when
-- processing your transcription. Note that vocabulary names are case
-- sensitive.
--
-- If you use Amazon Transcribe in multiple Regions, the vocabulary must be
-- available in Amazon Transcribe in each Region.
--
-- If you don\'t include @IdentifyLanguage@ and want to use a custom
-- vocabulary with your transcription, use the @VocabularyName@ parameter
-- instead.
newEngineTranscribeSettings ::
  EngineTranscribeSettings
newEngineTranscribeSettings =
  EngineTranscribeSettings'
    { contentIdentificationType =
        Prelude.Nothing,
      contentRedactionType = Prelude.Nothing,
      enablePartialResultsStabilization =
        Prelude.Nothing,
      identifyLanguage = Prelude.Nothing,
      languageCode = Prelude.Nothing,
      languageModelName = Prelude.Nothing,
      languageOptions = Prelude.Nothing,
      partialResultsStability = Prelude.Nothing,
      piiEntityTypes = Prelude.Nothing,
      preferredLanguage = Prelude.Nothing,
      region = Prelude.Nothing,
      vocabularyFilterMethod = Prelude.Nothing,
      vocabularyFilterName = Prelude.Nothing,
      vocabularyFilterNames = Prelude.Nothing,
      vocabularyName = Prelude.Nothing,
      vocabularyNames = Prelude.Nothing
    }

-- | Labels all personally identifiable information (PII) identified in your
-- transcript. If you don\'t include @PiiEntityTypes@, all PII is
-- identified.
--
-- You can’t set @ContentIdentificationType@ and @ContentRedactionType@.
engineTranscribeSettings_contentIdentificationType :: Lens.Lens' EngineTranscribeSettings (Prelude.Maybe TranscribeContentIdentificationType)
engineTranscribeSettings_contentIdentificationType = Lens.lens (\EngineTranscribeSettings' {contentIdentificationType} -> contentIdentificationType) (\s@EngineTranscribeSettings' {} a -> s {contentIdentificationType = a} :: EngineTranscribeSettings)

-- | Content redaction is performed at the segment level. If you don\'t
-- include @PiiEntityTypes@, all PII is redacted.
--
-- You can’t set @ContentIdentificationType@ and @ContentRedactionType@.
engineTranscribeSettings_contentRedactionType :: Lens.Lens' EngineTranscribeSettings (Prelude.Maybe TranscribeContentRedactionType)
engineTranscribeSettings_contentRedactionType = Lens.lens (\EngineTranscribeSettings' {contentRedactionType} -> contentRedactionType) (\s@EngineTranscribeSettings' {} a -> s {contentRedactionType = a} :: EngineTranscribeSettings)

-- | Enables partial result stabilization for your transcription. Partial
-- result stabilization can reduce latency in your output, but may impact
-- accuracy.
engineTranscribeSettings_enablePartialResultsStabilization :: Lens.Lens' EngineTranscribeSettings (Prelude.Maybe Prelude.Bool)
engineTranscribeSettings_enablePartialResultsStabilization = Lens.lens (\EngineTranscribeSettings' {enablePartialResultsStabilization} -> enablePartialResultsStabilization) (\s@EngineTranscribeSettings' {} a -> s {enablePartialResultsStabilization = a} :: EngineTranscribeSettings)

-- | Enables automatic language identification for your transcription.
--
-- If you include @IdentifyLanguage@, you can optionally use
-- @LanguageOptions@ to include a list of language codes that you think may
-- be present in your audio stream. Including language options can improve
-- transcription accuracy.
--
-- You can also use @PreferredLanguage@ to include a preferred language.
-- Doing so can help Amazon Transcribe identify the language faster.
--
-- You must include either @LanguageCode@ or @IdentifyLanguage@.
--
-- Language identification can\'t be combined with custom language models
-- or redaction.
engineTranscribeSettings_identifyLanguage :: Lens.Lens' EngineTranscribeSettings (Prelude.Maybe Prelude.Bool)
engineTranscribeSettings_identifyLanguage = Lens.lens (\EngineTranscribeSettings' {identifyLanguage} -> identifyLanguage) (\s@EngineTranscribeSettings' {} a -> s {identifyLanguage = a} :: EngineTranscribeSettings)

-- | Specify the language code that represents the language spoken.
--
-- If you\'re unsure of the language spoken in your audio, consider using
-- @IdentifyLanguage@ to enable automatic language identification.
engineTranscribeSettings_languageCode :: Lens.Lens' EngineTranscribeSettings (Prelude.Maybe TranscribeLanguageCode)
engineTranscribeSettings_languageCode = Lens.lens (\EngineTranscribeSettings' {languageCode} -> languageCode) (\s@EngineTranscribeSettings' {} a -> s {languageCode = a} :: EngineTranscribeSettings)

-- | Specify the name of the custom language model that you want to use when
-- processing your transcription. Note that language model names are case
-- sensitive.
--
-- The language of the specified language model must match the language
-- code. If the languages don\'t match, the custom language model isn\'t
-- applied. There are no errors or warnings associated with a language
-- mismatch.
--
-- If you use Amazon Transcribe in multiple Regions, the custom language
-- model must be available in Amazon Transcribe in each Region.
engineTranscribeSettings_languageModelName :: Lens.Lens' EngineTranscribeSettings (Prelude.Maybe Prelude.Text)
engineTranscribeSettings_languageModelName = Lens.lens (\EngineTranscribeSettings' {languageModelName} -> languageModelName) (\s@EngineTranscribeSettings' {} a -> s {languageModelName = a} :: EngineTranscribeSettings)

-- | Specify two or more language codes that represent the languages you
-- think may be present in your media; including more than five is not
-- recommended. If you\'re unsure what languages are present, do not
-- include this parameter.
--
-- Including language options can improve the accuracy of language
-- identification.
--
-- If you include @LanguageOptions@, you must also include
-- @IdentifyLanguage@.
--
-- You can only include one language dialect per language. For example, you
-- cannot include @en-US@ and @en-AU@.
engineTranscribeSettings_languageOptions :: Lens.Lens' EngineTranscribeSettings (Prelude.Maybe Prelude.Text)
engineTranscribeSettings_languageOptions = Lens.lens (\EngineTranscribeSettings' {languageOptions} -> languageOptions) (\s@EngineTranscribeSettings' {} a -> s {languageOptions = a} :: EngineTranscribeSettings)

-- | Specify the level of stability to use when you enable partial results
-- stabilization (@EnablePartialResultsStabilization@).
--
-- Low stability provides the highest accuracy. High stability transcribes
-- faster, but with slightly lower accuracy.
engineTranscribeSettings_partialResultsStability :: Lens.Lens' EngineTranscribeSettings (Prelude.Maybe TranscribePartialResultsStability)
engineTranscribeSettings_partialResultsStability = Lens.lens (\EngineTranscribeSettings' {partialResultsStability} -> partialResultsStability) (\s@EngineTranscribeSettings' {} a -> s {partialResultsStability = a} :: EngineTranscribeSettings)

-- | Specify which types of personally identifiable information (PII) you
-- want to redact in your transcript. You can include as many types as
-- you\'d like, or you can select @ALL@.
--
-- Values must be comma-separated and can include: @ADDRESS@,
-- @BANK_ACCOUNT_NUMBER@, @BANK_ROUTING@, @CREDIT_DEBIT_CVV@,
-- @CREDIT_DEBIT_EXPIRY@ @CREDIT_DEBIT_NUMBER@, @EMAIL@,@NAME@, @PHONE@,
-- @PIN@, @SSN@, or @ALL@.
--
-- Note that if you include @PiiEntityTypes@, you must also include
-- @ContentIdentificationType@ or @ContentRedactionType@.
--
-- If you include @ContentRedactionType@ or @ContentIdentificationType@,
-- but do not include @PiiEntityTypes@, all PII is redacted or identified.
engineTranscribeSettings_piiEntityTypes :: Lens.Lens' EngineTranscribeSettings (Prelude.Maybe Prelude.Text)
engineTranscribeSettings_piiEntityTypes = Lens.lens (\EngineTranscribeSettings' {piiEntityTypes} -> piiEntityTypes) (\s@EngineTranscribeSettings' {} a -> s {piiEntityTypes = a} :: EngineTranscribeSettings)

-- | Specify a preferred language from the subset of languages codes you
-- specified in @LanguageOptions@.
--
-- You can only use this parameter if you include @IdentifyLanguage@ and
-- @LanguageOptions@.
engineTranscribeSettings_preferredLanguage :: Lens.Lens' EngineTranscribeSettings (Prelude.Maybe TranscribeLanguageCode)
engineTranscribeSettings_preferredLanguage = Lens.lens (\EngineTranscribeSettings' {preferredLanguage} -> preferredLanguage) (\s@EngineTranscribeSettings' {} a -> s {preferredLanguage = a} :: EngineTranscribeSettings)

-- | The AWS Region in which to use Amazon Transcribe.
--
-- If you don\'t specify a Region, then the @MediaRegion@ parameter of the
-- <https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_CreateMeeting.html CreateMeeting.html>
-- API will be used. However, if Amazon Transcribe is not available in the
-- @MediaRegion@, then a TranscriptFailed event is sent.
--
-- Use @auto@ to use Amazon Transcribe in a Region near the meeting’s
-- @MediaRegion@. For more information, refer to
-- <https://docs.aws.amazon.com/chime-sdk/latest/dg/transcription-options.html#choose-region Choosing a transcription Region>
-- in the /Amazon Chime SDK Developer Guide/.
engineTranscribeSettings_region :: Lens.Lens' EngineTranscribeSettings (Prelude.Maybe TranscribeRegion)
engineTranscribeSettings_region = Lens.lens (\EngineTranscribeSettings' {region} -> region) (\s@EngineTranscribeSettings' {} a -> s {region = a} :: EngineTranscribeSettings)

-- | Specify how you want your vocabulary filter applied to your transcript.
--
-- To replace words with @***@, choose @mask@.
--
-- To delete words, choose @remove@.
--
-- To flag words without changing them, choose @tag@.
engineTranscribeSettings_vocabularyFilterMethod :: Lens.Lens' EngineTranscribeSettings (Prelude.Maybe TranscribeVocabularyFilterMethod)
engineTranscribeSettings_vocabularyFilterMethod = Lens.lens (\EngineTranscribeSettings' {vocabularyFilterMethod} -> vocabularyFilterMethod) (\s@EngineTranscribeSettings' {} a -> s {vocabularyFilterMethod = a} :: EngineTranscribeSettings)

-- | Specify the name of the custom vocabulary filter that you want to use
-- when processing your transcription. Note that vocabulary filter names
-- are case sensitive.
--
-- If you use Amazon Transcribe in multiple Regions, the vocabulary filter
-- must be available in Amazon Transcribe in each Region.
--
-- If you include @IdentifyLanguage@ and want to use one or more vocabulary
-- filters with your transcription, use the @VocabularyFilterNames@
-- parameter instead.
engineTranscribeSettings_vocabularyFilterName :: Lens.Lens' EngineTranscribeSettings (Prelude.Maybe Prelude.Text)
engineTranscribeSettings_vocabularyFilterName = Lens.lens (\EngineTranscribeSettings' {vocabularyFilterName} -> vocabularyFilterName) (\s@EngineTranscribeSettings' {} a -> s {vocabularyFilterName = a} :: EngineTranscribeSettings)

-- | Specify the names of the custom vocabulary filters that you want to use
-- when processing your transcription. Note that vocabulary filter names
-- are case sensitive.
--
-- If you use Amazon Transcribe in multiple Regions, the vocabulary filter
-- must be available in Amazon Transcribe in each Region.
--
-- If you\'re /not/ including @IdentifyLanguage@ and want to use a custom
-- vocabulary filter with your transcription, use the
-- @VocabularyFilterName@ parameter instead.
engineTranscribeSettings_vocabularyFilterNames :: Lens.Lens' EngineTranscribeSettings (Prelude.Maybe Prelude.Text)
engineTranscribeSettings_vocabularyFilterNames = Lens.lens (\EngineTranscribeSettings' {vocabularyFilterNames} -> vocabularyFilterNames) (\s@EngineTranscribeSettings' {} a -> s {vocabularyFilterNames = a} :: EngineTranscribeSettings)

-- | Specify the name of the custom vocabulary that you want to use when
-- processing your transcription. Note that vocabulary names are case
-- sensitive.
--
-- If you use Amazon Transcribe multiple Regions, the vocabulary must be
-- available in Amazon Transcribe in each Region.
--
-- If you include @IdentifyLanguage@ and want to use one or more custom
-- vocabularies with your transcription, use the @VocabularyNames@
-- parameter instead.
engineTranscribeSettings_vocabularyName :: Lens.Lens' EngineTranscribeSettings (Prelude.Maybe Prelude.Text)
engineTranscribeSettings_vocabularyName = Lens.lens (\EngineTranscribeSettings' {vocabularyName} -> vocabularyName) (\s@EngineTranscribeSettings' {} a -> s {vocabularyName = a} :: EngineTranscribeSettings)

-- | Specify the names of the custom vocabularies that you want to use when
-- processing your transcription. Note that vocabulary names are case
-- sensitive.
--
-- If you use Amazon Transcribe in multiple Regions, the vocabulary must be
-- available in Amazon Transcribe in each Region.
--
-- If you don\'t include @IdentifyLanguage@ and want to use a custom
-- vocabulary with your transcription, use the @VocabularyName@ parameter
-- instead.
engineTranscribeSettings_vocabularyNames :: Lens.Lens' EngineTranscribeSettings (Prelude.Maybe Prelude.Text)
engineTranscribeSettings_vocabularyNames = Lens.lens (\EngineTranscribeSettings' {vocabularyNames} -> vocabularyNames) (\s@EngineTranscribeSettings' {} a -> s {vocabularyNames = a} :: EngineTranscribeSettings)

instance Prelude.Hashable EngineTranscribeSettings where
  hashWithSalt _salt EngineTranscribeSettings' {..} =
    _salt
      `Prelude.hashWithSalt` contentIdentificationType
      `Prelude.hashWithSalt` contentRedactionType
      `Prelude.hashWithSalt` enablePartialResultsStabilization
      `Prelude.hashWithSalt` identifyLanguage
      `Prelude.hashWithSalt` languageCode
      `Prelude.hashWithSalt` languageModelName
      `Prelude.hashWithSalt` languageOptions
      `Prelude.hashWithSalt` partialResultsStability
      `Prelude.hashWithSalt` piiEntityTypes
      `Prelude.hashWithSalt` preferredLanguage
      `Prelude.hashWithSalt` region
      `Prelude.hashWithSalt` vocabularyFilterMethod
      `Prelude.hashWithSalt` vocabularyFilterName
      `Prelude.hashWithSalt` vocabularyFilterNames
      `Prelude.hashWithSalt` vocabularyName
      `Prelude.hashWithSalt` vocabularyNames

instance Prelude.NFData EngineTranscribeSettings where
  rnf EngineTranscribeSettings' {..} =
    Prelude.rnf contentIdentificationType
      `Prelude.seq` Prelude.rnf contentRedactionType
      `Prelude.seq` Prelude.rnf enablePartialResultsStabilization
      `Prelude.seq` Prelude.rnf identifyLanguage
      `Prelude.seq` Prelude.rnf languageCode
      `Prelude.seq` Prelude.rnf languageModelName
      `Prelude.seq` Prelude.rnf languageOptions
      `Prelude.seq` Prelude.rnf partialResultsStability
      `Prelude.seq` Prelude.rnf piiEntityTypes
      `Prelude.seq` Prelude.rnf preferredLanguage
      `Prelude.seq` Prelude.rnf region
      `Prelude.seq` Prelude.rnf vocabularyFilterMethod
      `Prelude.seq` Prelude.rnf vocabularyFilterName
      `Prelude.seq` Prelude.rnf vocabularyFilterNames
      `Prelude.seq` Prelude.rnf vocabularyName
      `Prelude.seq` Prelude.rnf vocabularyNames

instance Data.ToJSON EngineTranscribeSettings where
  toJSON EngineTranscribeSettings' {..} =
    Data.object
      ( Prelude.catMaybes
          [ ("ContentIdentificationType" Data..=)
              Prelude.<$> contentIdentificationType,
            ("ContentRedactionType" Data..=)
              Prelude.<$> contentRedactionType,
            ("EnablePartialResultsStabilization" Data..=)
              Prelude.<$> enablePartialResultsStabilization,
            ("IdentifyLanguage" Data..=)
              Prelude.<$> identifyLanguage,
            ("LanguageCode" Data..=) Prelude.<$> languageCode,
            ("LanguageModelName" Data..=)
              Prelude.<$> languageModelName,
            ("LanguageOptions" Data..=)
              Prelude.<$> languageOptions,
            ("PartialResultsStability" Data..=)
              Prelude.<$> partialResultsStability,
            ("PiiEntityTypes" Data..=)
              Prelude.<$> piiEntityTypes,
            ("PreferredLanguage" Data..=)
              Prelude.<$> preferredLanguage,
            ("Region" Data..=) Prelude.<$> region,
            ("VocabularyFilterMethod" Data..=)
              Prelude.<$> vocabularyFilterMethod,
            ("VocabularyFilterName" Data..=)
              Prelude.<$> vocabularyFilterName,
            ("VocabularyFilterNames" Data..=)
              Prelude.<$> vocabularyFilterNames,
            ("VocabularyName" Data..=)
              Prelude.<$> vocabularyName,
            ("VocabularyNames" Data..=)
              Prelude.<$> vocabularyNames
          ]
      )
