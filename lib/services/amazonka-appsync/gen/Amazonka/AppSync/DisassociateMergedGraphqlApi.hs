{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.AppSync.DisassociateMergedGraphqlApi
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Deletes an association between a Merged API and source API using the
-- source API\'s identifier and the association ID.
module Amazonka.AppSync.DisassociateMergedGraphqlApi
  ( -- * Creating a Request
    DisassociateMergedGraphqlApi (..),
    newDisassociateMergedGraphqlApi,

    -- * Request Lenses
    disassociateMergedGraphqlApi_sourceApiIdentifier,
    disassociateMergedGraphqlApi_associationId,

    -- * Destructuring the Response
    DisassociateMergedGraphqlApiResponse (..),
    newDisassociateMergedGraphqlApiResponse,

    -- * Response Lenses
    disassociateMergedGraphqlApiResponse_sourceApiAssociationStatus,
    disassociateMergedGraphqlApiResponse_httpStatus,
  )
where

import Amazonka.AppSync.Types
import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import qualified Amazonka.Prelude as Prelude
import qualified Amazonka.Request as Request
import qualified Amazonka.Response as Response

-- | /See:/ 'newDisassociateMergedGraphqlApi' smart constructor.
data DisassociateMergedGraphqlApi = DisassociateMergedGraphqlApi'
  { -- | The identifier of the AppSync Source API. This is generated by the
    -- AppSync service. In most cases, source APIs (especially in your account)
    -- only require the API ID value or ARN of the source API. However, source
    -- APIs from other accounts (cross-account use cases) strictly require the
    -- full resource ARN of the source API.
    sourceApiIdentifier :: Prelude.Text,
    -- | The ID generated by the AppSync service for the source API association.
    associationId :: Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'DisassociateMergedGraphqlApi' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'sourceApiIdentifier', 'disassociateMergedGraphqlApi_sourceApiIdentifier' - The identifier of the AppSync Source API. This is generated by the
-- AppSync service. In most cases, source APIs (especially in your account)
-- only require the API ID value or ARN of the source API. However, source
-- APIs from other accounts (cross-account use cases) strictly require the
-- full resource ARN of the source API.
--
-- 'associationId', 'disassociateMergedGraphqlApi_associationId' - The ID generated by the AppSync service for the source API association.
newDisassociateMergedGraphqlApi ::
  -- | 'sourceApiIdentifier'
  Prelude.Text ->
  -- | 'associationId'
  Prelude.Text ->
  DisassociateMergedGraphqlApi
newDisassociateMergedGraphqlApi
  pSourceApiIdentifier_
  pAssociationId_ =
    DisassociateMergedGraphqlApi'
      { sourceApiIdentifier =
          pSourceApiIdentifier_,
        associationId = pAssociationId_
      }

-- | The identifier of the AppSync Source API. This is generated by the
-- AppSync service. In most cases, source APIs (especially in your account)
-- only require the API ID value or ARN of the source API. However, source
-- APIs from other accounts (cross-account use cases) strictly require the
-- full resource ARN of the source API.
disassociateMergedGraphqlApi_sourceApiIdentifier :: Lens.Lens' DisassociateMergedGraphqlApi Prelude.Text
disassociateMergedGraphqlApi_sourceApiIdentifier = Lens.lens (\DisassociateMergedGraphqlApi' {sourceApiIdentifier} -> sourceApiIdentifier) (\s@DisassociateMergedGraphqlApi' {} a -> s {sourceApiIdentifier = a} :: DisassociateMergedGraphqlApi)

-- | The ID generated by the AppSync service for the source API association.
disassociateMergedGraphqlApi_associationId :: Lens.Lens' DisassociateMergedGraphqlApi Prelude.Text
disassociateMergedGraphqlApi_associationId = Lens.lens (\DisassociateMergedGraphqlApi' {associationId} -> associationId) (\s@DisassociateMergedGraphqlApi' {} a -> s {associationId = a} :: DisassociateMergedGraphqlApi)

instance Core.AWSRequest DisassociateMergedGraphqlApi where
  type
    AWSResponse DisassociateMergedGraphqlApi =
      DisassociateMergedGraphqlApiResponse
  request overrides =
    Request.delete (overrides defaultService)
  response =
    Response.receiveJSON
      ( \s h x ->
          DisassociateMergedGraphqlApiResponse'
            Prelude.<$> (x Data..?> "sourceApiAssociationStatus")
            Prelude.<*> (Prelude.pure (Prelude.fromEnum s))
      )

instance
  Prelude.Hashable
    DisassociateMergedGraphqlApi
  where
  hashWithSalt _salt DisassociateMergedGraphqlApi' {..} =
    _salt
      `Prelude.hashWithSalt` sourceApiIdentifier
      `Prelude.hashWithSalt` associationId

instance Prelude.NFData DisassociateMergedGraphqlApi where
  rnf DisassociateMergedGraphqlApi' {..} =
    Prelude.rnf sourceApiIdentifier
      `Prelude.seq` Prelude.rnf associationId

instance Data.ToHeaders DisassociateMergedGraphqlApi where
  toHeaders =
    Prelude.const
      ( Prelude.mconcat
          [ "Content-Type"
              Data.=# ( "application/x-amz-json-1.1" ::
                          Prelude.ByteString
                      )
          ]
      )

instance Data.ToPath DisassociateMergedGraphqlApi where
  toPath DisassociateMergedGraphqlApi' {..} =
    Prelude.mconcat
      [ "/v1/sourceApis/",
        Data.toBS sourceApiIdentifier,
        "/mergedApiAssociations/",
        Data.toBS associationId
      ]

instance Data.ToQuery DisassociateMergedGraphqlApi where
  toQuery = Prelude.const Prelude.mempty

-- | /See:/ 'newDisassociateMergedGraphqlApiResponse' smart constructor.
data DisassociateMergedGraphqlApiResponse = DisassociateMergedGraphqlApiResponse'
  { -- | The state of the source API association.
    sourceApiAssociationStatus :: Prelude.Maybe SourceApiAssociationStatus,
    -- | The response's http status code.
    httpStatus :: Prelude.Int
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'DisassociateMergedGraphqlApiResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'sourceApiAssociationStatus', 'disassociateMergedGraphqlApiResponse_sourceApiAssociationStatus' - The state of the source API association.
--
-- 'httpStatus', 'disassociateMergedGraphqlApiResponse_httpStatus' - The response's http status code.
newDisassociateMergedGraphqlApiResponse ::
  -- | 'httpStatus'
  Prelude.Int ->
  DisassociateMergedGraphqlApiResponse
newDisassociateMergedGraphqlApiResponse pHttpStatus_ =
  DisassociateMergedGraphqlApiResponse'
    { sourceApiAssociationStatus =
        Prelude.Nothing,
      httpStatus = pHttpStatus_
    }

-- | The state of the source API association.
disassociateMergedGraphqlApiResponse_sourceApiAssociationStatus :: Lens.Lens' DisassociateMergedGraphqlApiResponse (Prelude.Maybe SourceApiAssociationStatus)
disassociateMergedGraphqlApiResponse_sourceApiAssociationStatus = Lens.lens (\DisassociateMergedGraphqlApiResponse' {sourceApiAssociationStatus} -> sourceApiAssociationStatus) (\s@DisassociateMergedGraphqlApiResponse' {} a -> s {sourceApiAssociationStatus = a} :: DisassociateMergedGraphqlApiResponse)

-- | The response's http status code.
disassociateMergedGraphqlApiResponse_httpStatus :: Lens.Lens' DisassociateMergedGraphqlApiResponse Prelude.Int
disassociateMergedGraphqlApiResponse_httpStatus = Lens.lens (\DisassociateMergedGraphqlApiResponse' {httpStatus} -> httpStatus) (\s@DisassociateMergedGraphqlApiResponse' {} a -> s {httpStatus = a} :: DisassociateMergedGraphqlApiResponse)

instance
  Prelude.NFData
    DisassociateMergedGraphqlApiResponse
  where
  rnf DisassociateMergedGraphqlApiResponse' {..} =
    Prelude.rnf sourceApiAssociationStatus
      `Prelude.seq` Prelude.rnf httpStatus
