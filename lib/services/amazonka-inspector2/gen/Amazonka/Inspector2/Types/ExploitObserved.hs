{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.Inspector2.Types.ExploitObserved
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Amazonka.Inspector2.Types.ExploitObserved where

import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import qualified Amazonka.Prelude as Prelude

-- | Contains information on when this exploit was observed.
--
-- /See:/ 'newExploitObserved' smart constructor.
data ExploitObserved = ExploitObserved'
  { -- | The date an time when the exploit was first seen.
    firstSeen :: Prelude.Maybe Data.POSIX,
    -- | The date an time when the exploit was last seen.
    lastSeen :: Prelude.Maybe Data.POSIX
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'ExploitObserved' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'firstSeen', 'exploitObserved_firstSeen' - The date an time when the exploit was first seen.
--
-- 'lastSeen', 'exploitObserved_lastSeen' - The date an time when the exploit was last seen.
newExploitObserved ::
  ExploitObserved
newExploitObserved =
  ExploitObserved'
    { firstSeen = Prelude.Nothing,
      lastSeen = Prelude.Nothing
    }

-- | The date an time when the exploit was first seen.
exploitObserved_firstSeen :: Lens.Lens' ExploitObserved (Prelude.Maybe Prelude.UTCTime)
exploitObserved_firstSeen = Lens.lens (\ExploitObserved' {firstSeen} -> firstSeen) (\s@ExploitObserved' {} a -> s {firstSeen = a} :: ExploitObserved) Prelude.. Lens.mapping Data._Time

-- | The date an time when the exploit was last seen.
exploitObserved_lastSeen :: Lens.Lens' ExploitObserved (Prelude.Maybe Prelude.UTCTime)
exploitObserved_lastSeen = Lens.lens (\ExploitObserved' {lastSeen} -> lastSeen) (\s@ExploitObserved' {} a -> s {lastSeen = a} :: ExploitObserved) Prelude.. Lens.mapping Data._Time

instance Data.FromJSON ExploitObserved where
  parseJSON =
    Data.withObject
      "ExploitObserved"
      ( \x ->
          ExploitObserved'
            Prelude.<$> (x Data..:? "firstSeen")
            Prelude.<*> (x Data..:? "lastSeen")
      )

instance Prelude.Hashable ExploitObserved where
  hashWithSalt _salt ExploitObserved' {..} =
    _salt
      `Prelude.hashWithSalt` firstSeen
      `Prelude.hashWithSalt` lastSeen

instance Prelude.NFData ExploitObserved where
  rnf ExploitObserved' {..} =
    Prelude.rnf firstSeen
      `Prelude.seq` Prelude.rnf lastSeen
