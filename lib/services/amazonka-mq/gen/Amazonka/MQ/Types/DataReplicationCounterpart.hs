{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.MQ.Types.DataReplicationCounterpart
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Amazonka.MQ.Types.DataReplicationCounterpart where

import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import qualified Amazonka.Prelude as Prelude

-- | Specifies a broker in a data replication pair.
--
-- /See:/ 'newDataReplicationCounterpart' smart constructor.
data DataReplicationCounterpart = DataReplicationCounterpart'
  { -- | Required. The unique broker id generated by Amazon MQ.
    brokerId :: Prelude.Text,
    -- | Required. The region of the broker.
    region :: Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'DataReplicationCounterpart' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'brokerId', 'dataReplicationCounterpart_brokerId' - Required. The unique broker id generated by Amazon MQ.
--
-- 'region', 'dataReplicationCounterpart_region' - Required. The region of the broker.
newDataReplicationCounterpart ::
  -- | 'brokerId'
  Prelude.Text ->
  -- | 'region'
  Prelude.Text ->
  DataReplicationCounterpart
newDataReplicationCounterpart pBrokerId_ pRegion_ =
  DataReplicationCounterpart'
    { brokerId = pBrokerId_,
      region = pRegion_
    }

-- | Required. The unique broker id generated by Amazon MQ.
dataReplicationCounterpart_brokerId :: Lens.Lens' DataReplicationCounterpart Prelude.Text
dataReplicationCounterpart_brokerId = Lens.lens (\DataReplicationCounterpart' {brokerId} -> brokerId) (\s@DataReplicationCounterpart' {} a -> s {brokerId = a} :: DataReplicationCounterpart)

-- | Required. The region of the broker.
dataReplicationCounterpart_region :: Lens.Lens' DataReplicationCounterpart Prelude.Text
dataReplicationCounterpart_region = Lens.lens (\DataReplicationCounterpart' {region} -> region) (\s@DataReplicationCounterpart' {} a -> s {region = a} :: DataReplicationCounterpart)

instance Data.FromJSON DataReplicationCounterpart where
  parseJSON =
    Data.withObject
      "DataReplicationCounterpart"
      ( \x ->
          DataReplicationCounterpart'
            Prelude.<$> (x Data..: "brokerId")
            Prelude.<*> (x Data..: "region")
      )

instance Prelude.Hashable DataReplicationCounterpart where
  hashWithSalt _salt DataReplicationCounterpart' {..} =
    _salt
      `Prelude.hashWithSalt` brokerId
      `Prelude.hashWithSalt` region

instance Prelude.NFData DataReplicationCounterpart where
  rnf DataReplicationCounterpart' {..} =
    Prelude.rnf brokerId
      `Prelude.seq` Prelude.rnf region
