{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.AppSync.UpdateSourceApiAssociation
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Updates some of the configuration choices of a particular source API
-- association.
module Amazonka.AppSync.UpdateSourceApiAssociation
  ( -- * Creating a Request
    UpdateSourceApiAssociation (..),
    newUpdateSourceApiAssociation,

    -- * Request Lenses
    updateSourceApiAssociation_description,
    updateSourceApiAssociation_sourceApiAssociationConfig,
    updateSourceApiAssociation_associationId,
    updateSourceApiAssociation_mergedApiIdentifier,

    -- * Destructuring the Response
    UpdateSourceApiAssociationResponse (..),
    newUpdateSourceApiAssociationResponse,

    -- * Response Lenses
    updateSourceApiAssociationResponse_sourceApiAssociation,
    updateSourceApiAssociationResponse_httpStatus,
  )
where

import Amazonka.AppSync.Types
import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import qualified Amazonka.Prelude as Prelude
import qualified Amazonka.Request as Request
import qualified Amazonka.Response as Response

-- | /See:/ 'newUpdateSourceApiAssociation' smart constructor.
data UpdateSourceApiAssociation = UpdateSourceApiAssociation'
  { -- | The description field.
    description :: Prelude.Maybe Prelude.Text,
    -- | The @SourceApiAssociationConfig@ object data.
    sourceApiAssociationConfig :: Prelude.Maybe SourceApiAssociationConfig,
    -- | The ID generated by the AppSync service for the source API association.
    associationId :: Prelude.Text,
    -- | The identifier of the AppSync Merged API. This is generated by the
    -- AppSync service. In most cases, Merged APIs (especially in your account)
    -- only require the API ID value or ARN of the merged API. However, Merged
    -- APIs in other accounts (cross-account use cases) strictly require the
    -- full resource ARN of the merged API.
    mergedApiIdentifier :: Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'UpdateSourceApiAssociation' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'description', 'updateSourceApiAssociation_description' - The description field.
--
-- 'sourceApiAssociationConfig', 'updateSourceApiAssociation_sourceApiAssociationConfig' - The @SourceApiAssociationConfig@ object data.
--
-- 'associationId', 'updateSourceApiAssociation_associationId' - The ID generated by the AppSync service for the source API association.
--
-- 'mergedApiIdentifier', 'updateSourceApiAssociation_mergedApiIdentifier' - The identifier of the AppSync Merged API. This is generated by the
-- AppSync service. In most cases, Merged APIs (especially in your account)
-- only require the API ID value or ARN of the merged API. However, Merged
-- APIs in other accounts (cross-account use cases) strictly require the
-- full resource ARN of the merged API.
newUpdateSourceApiAssociation ::
  -- | 'associationId'
  Prelude.Text ->
  -- | 'mergedApiIdentifier'
  Prelude.Text ->
  UpdateSourceApiAssociation
newUpdateSourceApiAssociation
  pAssociationId_
  pMergedApiIdentifier_ =
    UpdateSourceApiAssociation'
      { description =
          Prelude.Nothing,
        sourceApiAssociationConfig = Prelude.Nothing,
        associationId = pAssociationId_,
        mergedApiIdentifier = pMergedApiIdentifier_
      }

-- | The description field.
updateSourceApiAssociation_description :: Lens.Lens' UpdateSourceApiAssociation (Prelude.Maybe Prelude.Text)
updateSourceApiAssociation_description = Lens.lens (\UpdateSourceApiAssociation' {description} -> description) (\s@UpdateSourceApiAssociation' {} a -> s {description = a} :: UpdateSourceApiAssociation)

-- | The @SourceApiAssociationConfig@ object data.
updateSourceApiAssociation_sourceApiAssociationConfig :: Lens.Lens' UpdateSourceApiAssociation (Prelude.Maybe SourceApiAssociationConfig)
updateSourceApiAssociation_sourceApiAssociationConfig = Lens.lens (\UpdateSourceApiAssociation' {sourceApiAssociationConfig} -> sourceApiAssociationConfig) (\s@UpdateSourceApiAssociation' {} a -> s {sourceApiAssociationConfig = a} :: UpdateSourceApiAssociation)

-- | The ID generated by the AppSync service for the source API association.
updateSourceApiAssociation_associationId :: Lens.Lens' UpdateSourceApiAssociation Prelude.Text
updateSourceApiAssociation_associationId = Lens.lens (\UpdateSourceApiAssociation' {associationId} -> associationId) (\s@UpdateSourceApiAssociation' {} a -> s {associationId = a} :: UpdateSourceApiAssociation)

-- | The identifier of the AppSync Merged API. This is generated by the
-- AppSync service. In most cases, Merged APIs (especially in your account)
-- only require the API ID value or ARN of the merged API. However, Merged
-- APIs in other accounts (cross-account use cases) strictly require the
-- full resource ARN of the merged API.
updateSourceApiAssociation_mergedApiIdentifier :: Lens.Lens' UpdateSourceApiAssociation Prelude.Text
updateSourceApiAssociation_mergedApiIdentifier = Lens.lens (\UpdateSourceApiAssociation' {mergedApiIdentifier} -> mergedApiIdentifier) (\s@UpdateSourceApiAssociation' {} a -> s {mergedApiIdentifier = a} :: UpdateSourceApiAssociation)

instance Core.AWSRequest UpdateSourceApiAssociation where
  type
    AWSResponse UpdateSourceApiAssociation =
      UpdateSourceApiAssociationResponse
  request overrides =
    Request.postJSON (overrides defaultService)
  response =
    Response.receiveJSON
      ( \s h x ->
          UpdateSourceApiAssociationResponse'
            Prelude.<$> (x Data..?> "sourceApiAssociation")
            Prelude.<*> (Prelude.pure (Prelude.fromEnum s))
      )

instance Prelude.Hashable UpdateSourceApiAssociation where
  hashWithSalt _salt UpdateSourceApiAssociation' {..} =
    _salt
      `Prelude.hashWithSalt` description
      `Prelude.hashWithSalt` sourceApiAssociationConfig
      `Prelude.hashWithSalt` associationId
      `Prelude.hashWithSalt` mergedApiIdentifier

instance Prelude.NFData UpdateSourceApiAssociation where
  rnf UpdateSourceApiAssociation' {..} =
    Prelude.rnf description
      `Prelude.seq` Prelude.rnf sourceApiAssociationConfig
      `Prelude.seq` Prelude.rnf associationId
      `Prelude.seq` Prelude.rnf mergedApiIdentifier

instance Data.ToHeaders UpdateSourceApiAssociation where
  toHeaders =
    Prelude.const
      ( Prelude.mconcat
          [ "Content-Type"
              Data.=# ( "application/x-amz-json-1.1" ::
                          Prelude.ByteString
                      )
          ]
      )

instance Data.ToJSON UpdateSourceApiAssociation where
  toJSON UpdateSourceApiAssociation' {..} =
    Data.object
      ( Prelude.catMaybes
          [ ("description" Data..=) Prelude.<$> description,
            ("sourceApiAssociationConfig" Data..=)
              Prelude.<$> sourceApiAssociationConfig
          ]
      )

instance Data.ToPath UpdateSourceApiAssociation where
  toPath UpdateSourceApiAssociation' {..} =
    Prelude.mconcat
      [ "/v1/mergedApis/",
        Data.toBS mergedApiIdentifier,
        "/sourceApiAssociations/",
        Data.toBS associationId
      ]

instance Data.ToQuery UpdateSourceApiAssociation where
  toQuery = Prelude.const Prelude.mempty

-- | /See:/ 'newUpdateSourceApiAssociationResponse' smart constructor.
data UpdateSourceApiAssociationResponse = UpdateSourceApiAssociationResponse'
  { -- | The @SourceApiAssociation@ object data.
    sourceApiAssociation :: Prelude.Maybe SourceApiAssociation,
    -- | The response's http status code.
    httpStatus :: Prelude.Int
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'UpdateSourceApiAssociationResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'sourceApiAssociation', 'updateSourceApiAssociationResponse_sourceApiAssociation' - The @SourceApiAssociation@ object data.
--
-- 'httpStatus', 'updateSourceApiAssociationResponse_httpStatus' - The response's http status code.
newUpdateSourceApiAssociationResponse ::
  -- | 'httpStatus'
  Prelude.Int ->
  UpdateSourceApiAssociationResponse
newUpdateSourceApiAssociationResponse pHttpStatus_ =
  UpdateSourceApiAssociationResponse'
    { sourceApiAssociation =
        Prelude.Nothing,
      httpStatus = pHttpStatus_
    }

-- | The @SourceApiAssociation@ object data.
updateSourceApiAssociationResponse_sourceApiAssociation :: Lens.Lens' UpdateSourceApiAssociationResponse (Prelude.Maybe SourceApiAssociation)
updateSourceApiAssociationResponse_sourceApiAssociation = Lens.lens (\UpdateSourceApiAssociationResponse' {sourceApiAssociation} -> sourceApiAssociation) (\s@UpdateSourceApiAssociationResponse' {} a -> s {sourceApiAssociation = a} :: UpdateSourceApiAssociationResponse)

-- | The response's http status code.
updateSourceApiAssociationResponse_httpStatus :: Lens.Lens' UpdateSourceApiAssociationResponse Prelude.Int
updateSourceApiAssociationResponse_httpStatus = Lens.lens (\UpdateSourceApiAssociationResponse' {httpStatus} -> httpStatus) (\s@UpdateSourceApiAssociationResponse' {} a -> s {httpStatus = a} :: UpdateSourceApiAssociationResponse)

instance
  Prelude.NFData
    UpdateSourceApiAssociationResponse
  where
  rnf UpdateSourceApiAssociationResponse' {..} =
    Prelude.rnf sourceApiAssociation
      `Prelude.seq` Prelude.rnf httpStatus
