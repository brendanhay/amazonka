{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.WorkSpacesWeb.UpdateIpAccessSettings
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Updates IP access settings.
module Amazonka.WorkSpacesWeb.UpdateIpAccessSettings
  ( -- * Creating a Request
    UpdateIpAccessSettings (..),
    newUpdateIpAccessSettings,

    -- * Request Lenses
    updateIpAccessSettings_clientToken,
    updateIpAccessSettings_description,
    updateIpAccessSettings_displayName,
    updateIpAccessSettings_ipRules,
    updateIpAccessSettings_ipAccessSettingsArn,

    -- * Destructuring the Response
    UpdateIpAccessSettingsResponse (..),
    newUpdateIpAccessSettingsResponse,

    -- * Response Lenses
    updateIpAccessSettingsResponse_httpStatus,
    updateIpAccessSettingsResponse_ipAccessSettings,
  )
where

import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import qualified Amazonka.Prelude as Prelude
import qualified Amazonka.Request as Request
import qualified Amazonka.Response as Response
import Amazonka.WorkSpacesWeb.Types

-- | /See:/ 'newUpdateIpAccessSettings' smart constructor.
data UpdateIpAccessSettings = UpdateIpAccessSettings'
  { -- | A unique, case-sensitive identifier that you provide to ensure the
    -- idempotency of the request. Idempotency ensures that an API request
    -- completes only once. With an idempotent request, if the original request
    -- completes successfully, subsequent retries with the same client token
    -- return the result from the original successful request.
    --
    -- If you do not specify a client token, one is automatically generated by
    -- the AWS SDK.
    clientToken :: Prelude.Maybe Prelude.Text,
    -- | The description of the IP access settings.
    description :: Prelude.Maybe (Data.Sensitive Prelude.Text),
    -- | The display name of the IP access settings.
    displayName :: Prelude.Maybe (Data.Sensitive Prelude.Text),
    -- | The updated IP rules of the IP access settings.
    ipRules :: Prelude.Maybe (Data.Sensitive (Prelude.NonEmpty IpRule)),
    -- | The ARN of the IP access settings.
    ipAccessSettingsArn :: Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'UpdateIpAccessSettings' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'clientToken', 'updateIpAccessSettings_clientToken' - A unique, case-sensitive identifier that you provide to ensure the
-- idempotency of the request. Idempotency ensures that an API request
-- completes only once. With an idempotent request, if the original request
-- completes successfully, subsequent retries with the same client token
-- return the result from the original successful request.
--
-- If you do not specify a client token, one is automatically generated by
-- the AWS SDK.
--
-- 'description', 'updateIpAccessSettings_description' - The description of the IP access settings.
--
-- 'displayName', 'updateIpAccessSettings_displayName' - The display name of the IP access settings.
--
-- 'ipRules', 'updateIpAccessSettings_ipRules' - The updated IP rules of the IP access settings.
--
-- 'ipAccessSettingsArn', 'updateIpAccessSettings_ipAccessSettingsArn' - The ARN of the IP access settings.
newUpdateIpAccessSettings ::
  -- | 'ipAccessSettingsArn'
  Prelude.Text ->
  UpdateIpAccessSettings
newUpdateIpAccessSettings pIpAccessSettingsArn_ =
  UpdateIpAccessSettings'
    { clientToken =
        Prelude.Nothing,
      description = Prelude.Nothing,
      displayName = Prelude.Nothing,
      ipRules = Prelude.Nothing,
      ipAccessSettingsArn = pIpAccessSettingsArn_
    }

-- | A unique, case-sensitive identifier that you provide to ensure the
-- idempotency of the request. Idempotency ensures that an API request
-- completes only once. With an idempotent request, if the original request
-- completes successfully, subsequent retries with the same client token
-- return the result from the original successful request.
--
-- If you do not specify a client token, one is automatically generated by
-- the AWS SDK.
updateIpAccessSettings_clientToken :: Lens.Lens' UpdateIpAccessSettings (Prelude.Maybe Prelude.Text)
updateIpAccessSettings_clientToken = Lens.lens (\UpdateIpAccessSettings' {clientToken} -> clientToken) (\s@UpdateIpAccessSettings' {} a -> s {clientToken = a} :: UpdateIpAccessSettings)

-- | The description of the IP access settings.
updateIpAccessSettings_description :: Lens.Lens' UpdateIpAccessSettings (Prelude.Maybe Prelude.Text)
updateIpAccessSettings_description = Lens.lens (\UpdateIpAccessSettings' {description} -> description) (\s@UpdateIpAccessSettings' {} a -> s {description = a} :: UpdateIpAccessSettings) Prelude.. Lens.mapping Data._Sensitive

-- | The display name of the IP access settings.
updateIpAccessSettings_displayName :: Lens.Lens' UpdateIpAccessSettings (Prelude.Maybe Prelude.Text)
updateIpAccessSettings_displayName = Lens.lens (\UpdateIpAccessSettings' {displayName} -> displayName) (\s@UpdateIpAccessSettings' {} a -> s {displayName = a} :: UpdateIpAccessSettings) Prelude.. Lens.mapping Data._Sensitive

-- | The updated IP rules of the IP access settings.
updateIpAccessSettings_ipRules :: Lens.Lens' UpdateIpAccessSettings (Prelude.Maybe (Prelude.NonEmpty IpRule))
updateIpAccessSettings_ipRules = Lens.lens (\UpdateIpAccessSettings' {ipRules} -> ipRules) (\s@UpdateIpAccessSettings' {} a -> s {ipRules = a} :: UpdateIpAccessSettings) Prelude.. Lens.mapping (Data._Sensitive Prelude.. Lens.coerced)

-- | The ARN of the IP access settings.
updateIpAccessSettings_ipAccessSettingsArn :: Lens.Lens' UpdateIpAccessSettings Prelude.Text
updateIpAccessSettings_ipAccessSettingsArn = Lens.lens (\UpdateIpAccessSettings' {ipAccessSettingsArn} -> ipAccessSettingsArn) (\s@UpdateIpAccessSettings' {} a -> s {ipAccessSettingsArn = a} :: UpdateIpAccessSettings)

instance Core.AWSRequest UpdateIpAccessSettings where
  type
    AWSResponse UpdateIpAccessSettings =
      UpdateIpAccessSettingsResponse
  request overrides =
    Request.patchJSON (overrides defaultService)
  response =
    Response.receiveJSON
      ( \s h x ->
          UpdateIpAccessSettingsResponse'
            Prelude.<$> (Prelude.pure (Prelude.fromEnum s))
            Prelude.<*> (x Data..:> "ipAccessSettings")
      )

instance Prelude.Hashable UpdateIpAccessSettings where
  hashWithSalt _salt UpdateIpAccessSettings' {..} =
    _salt
      `Prelude.hashWithSalt` clientToken
      `Prelude.hashWithSalt` description
      `Prelude.hashWithSalt` displayName
      `Prelude.hashWithSalt` ipRules
      `Prelude.hashWithSalt` ipAccessSettingsArn

instance Prelude.NFData UpdateIpAccessSettings where
  rnf UpdateIpAccessSettings' {..} =
    Prelude.rnf clientToken
      `Prelude.seq` Prelude.rnf description
      `Prelude.seq` Prelude.rnf displayName
      `Prelude.seq` Prelude.rnf ipRules
      `Prelude.seq` Prelude.rnf ipAccessSettingsArn

instance Data.ToHeaders UpdateIpAccessSettings where
  toHeaders =
    Prelude.const
      ( Prelude.mconcat
          [ "Content-Type"
              Data.=# ( "application/x-amz-json-1.1" ::
                          Prelude.ByteString
                      )
          ]
      )

instance Data.ToJSON UpdateIpAccessSettings where
  toJSON UpdateIpAccessSettings' {..} =
    Data.object
      ( Prelude.catMaybes
          [ ("clientToken" Data..=) Prelude.<$> clientToken,
            ("description" Data..=) Prelude.<$> description,
            ("displayName" Data..=) Prelude.<$> displayName,
            ("ipRules" Data..=) Prelude.<$> ipRules
          ]
      )

instance Data.ToPath UpdateIpAccessSettings where
  toPath UpdateIpAccessSettings' {..} =
    Prelude.mconcat
      ["/ipAccessSettings/", Data.toBS ipAccessSettingsArn]

instance Data.ToQuery UpdateIpAccessSettings where
  toQuery = Prelude.const Prelude.mempty

-- | /See:/ 'newUpdateIpAccessSettingsResponse' smart constructor.
data UpdateIpAccessSettingsResponse = UpdateIpAccessSettingsResponse'
  { -- | The response's http status code.
    httpStatus :: Prelude.Int,
    -- | The IP access settings.
    ipAccessSettings :: IpAccessSettings
  }
  deriving (Prelude.Eq, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'UpdateIpAccessSettingsResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'httpStatus', 'updateIpAccessSettingsResponse_httpStatus' - The response's http status code.
--
-- 'ipAccessSettings', 'updateIpAccessSettingsResponse_ipAccessSettings' - The IP access settings.
newUpdateIpAccessSettingsResponse ::
  -- | 'httpStatus'
  Prelude.Int ->
  -- | 'ipAccessSettings'
  IpAccessSettings ->
  UpdateIpAccessSettingsResponse
newUpdateIpAccessSettingsResponse
  pHttpStatus_
  pIpAccessSettings_ =
    UpdateIpAccessSettingsResponse'
      { httpStatus =
          pHttpStatus_,
        ipAccessSettings = pIpAccessSettings_
      }

-- | The response's http status code.
updateIpAccessSettingsResponse_httpStatus :: Lens.Lens' UpdateIpAccessSettingsResponse Prelude.Int
updateIpAccessSettingsResponse_httpStatus = Lens.lens (\UpdateIpAccessSettingsResponse' {httpStatus} -> httpStatus) (\s@UpdateIpAccessSettingsResponse' {} a -> s {httpStatus = a} :: UpdateIpAccessSettingsResponse)

-- | The IP access settings.
updateIpAccessSettingsResponse_ipAccessSettings :: Lens.Lens' UpdateIpAccessSettingsResponse IpAccessSettings
updateIpAccessSettingsResponse_ipAccessSettings = Lens.lens (\UpdateIpAccessSettingsResponse' {ipAccessSettings} -> ipAccessSettings) (\s@UpdateIpAccessSettingsResponse' {} a -> s {ipAccessSettings = a} :: UpdateIpAccessSettingsResponse)

instance
  Prelude.NFData
    UpdateIpAccessSettingsResponse
  where
  rnf UpdateIpAccessSettingsResponse' {..} =
    Prelude.rnf httpStatus
      `Prelude.seq` Prelude.rnf ipAccessSettings
