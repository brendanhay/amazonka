{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.WorkSpacesWeb.CreateIpAccessSettings
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Creates an IP access settings resource that can be associated with a web
-- portal.
module Amazonka.WorkSpacesWeb.CreateIpAccessSettings
  ( -- * Creating a Request
    CreateIpAccessSettings (..),
    newCreateIpAccessSettings,

    -- * Request Lenses
    createIpAccessSettings_additionalEncryptionContext,
    createIpAccessSettings_clientToken,
    createIpAccessSettings_customerManagedKey,
    createIpAccessSettings_description,
    createIpAccessSettings_displayName,
    createIpAccessSettings_tags,
    createIpAccessSettings_ipRules,

    -- * Destructuring the Response
    CreateIpAccessSettingsResponse (..),
    newCreateIpAccessSettingsResponse,

    -- * Response Lenses
    createIpAccessSettingsResponse_httpStatus,
    createIpAccessSettingsResponse_ipAccessSettingsArn,
  )
where

import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import qualified Amazonka.Prelude as Prelude
import qualified Amazonka.Request as Request
import qualified Amazonka.Response as Response
import Amazonka.WorkSpacesWeb.Types

-- | /See:/ 'newCreateIpAccessSettings' smart constructor.
data CreateIpAccessSettings = CreateIpAccessSettings'
  { -- | Additional encryption context of the IP access settings.
    additionalEncryptionContext :: Prelude.Maybe (Prelude.HashMap Prelude.Text Prelude.Text),
    -- | A unique, case-sensitive identifier that you provide to ensure the
    -- idempotency of the request. Idempotency ensures that an API request
    -- completes only once. With an idempotent request, if the original request
    -- completes successfully, subsequent retries with the same client token
    -- returns the result from the original successful request.
    --
    -- If you do not specify a client token, one is automatically generated by
    -- the AWS SDK.
    clientToken :: Prelude.Maybe Prelude.Text,
    -- | The custom managed key of the IP access settings.
    customerManagedKey :: Prelude.Maybe Prelude.Text,
    -- | The description of the IP access settings.
    description :: Prelude.Maybe (Data.Sensitive Prelude.Text),
    -- | The display name of the IP access settings.
    displayName :: Prelude.Maybe (Data.Sensitive Prelude.Text),
    -- | The tags to add to the browser settings resource. A tag is a key-value
    -- pair.
    tags :: Prelude.Maybe [Data.Sensitive Tag],
    -- | The IP rules of the IP access settings.
    ipRules :: Data.Sensitive (Prelude.NonEmpty IpRule)
  }
  deriving (Prelude.Eq, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'CreateIpAccessSettings' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'additionalEncryptionContext', 'createIpAccessSettings_additionalEncryptionContext' - Additional encryption context of the IP access settings.
--
-- 'clientToken', 'createIpAccessSettings_clientToken' - A unique, case-sensitive identifier that you provide to ensure the
-- idempotency of the request. Idempotency ensures that an API request
-- completes only once. With an idempotent request, if the original request
-- completes successfully, subsequent retries with the same client token
-- returns the result from the original successful request.
--
-- If you do not specify a client token, one is automatically generated by
-- the AWS SDK.
--
-- 'customerManagedKey', 'createIpAccessSettings_customerManagedKey' - The custom managed key of the IP access settings.
--
-- 'description', 'createIpAccessSettings_description' - The description of the IP access settings.
--
-- 'displayName', 'createIpAccessSettings_displayName' - The display name of the IP access settings.
--
-- 'tags', 'createIpAccessSettings_tags' - The tags to add to the browser settings resource. A tag is a key-value
-- pair.
--
-- 'ipRules', 'createIpAccessSettings_ipRules' - The IP rules of the IP access settings.
newCreateIpAccessSettings ::
  -- | 'ipRules'
  Prelude.NonEmpty IpRule ->
  CreateIpAccessSettings
newCreateIpAccessSettings pIpRules_ =
  CreateIpAccessSettings'
    { additionalEncryptionContext =
        Prelude.Nothing,
      clientToken = Prelude.Nothing,
      customerManagedKey = Prelude.Nothing,
      description = Prelude.Nothing,
      displayName = Prelude.Nothing,
      tags = Prelude.Nothing,
      ipRules =
        Data._Sensitive
          Prelude.. Lens.coerced
          Lens.# pIpRules_
    }

-- | Additional encryption context of the IP access settings.
createIpAccessSettings_additionalEncryptionContext :: Lens.Lens' CreateIpAccessSettings (Prelude.Maybe (Prelude.HashMap Prelude.Text Prelude.Text))
createIpAccessSettings_additionalEncryptionContext = Lens.lens (\CreateIpAccessSettings' {additionalEncryptionContext} -> additionalEncryptionContext) (\s@CreateIpAccessSettings' {} a -> s {additionalEncryptionContext = a} :: CreateIpAccessSettings) Prelude.. Lens.mapping Lens.coerced

-- | A unique, case-sensitive identifier that you provide to ensure the
-- idempotency of the request. Idempotency ensures that an API request
-- completes only once. With an idempotent request, if the original request
-- completes successfully, subsequent retries with the same client token
-- returns the result from the original successful request.
--
-- If you do not specify a client token, one is automatically generated by
-- the AWS SDK.
createIpAccessSettings_clientToken :: Lens.Lens' CreateIpAccessSettings (Prelude.Maybe Prelude.Text)
createIpAccessSettings_clientToken = Lens.lens (\CreateIpAccessSettings' {clientToken} -> clientToken) (\s@CreateIpAccessSettings' {} a -> s {clientToken = a} :: CreateIpAccessSettings)

-- | The custom managed key of the IP access settings.
createIpAccessSettings_customerManagedKey :: Lens.Lens' CreateIpAccessSettings (Prelude.Maybe Prelude.Text)
createIpAccessSettings_customerManagedKey = Lens.lens (\CreateIpAccessSettings' {customerManagedKey} -> customerManagedKey) (\s@CreateIpAccessSettings' {} a -> s {customerManagedKey = a} :: CreateIpAccessSettings)

-- | The description of the IP access settings.
createIpAccessSettings_description :: Lens.Lens' CreateIpAccessSettings (Prelude.Maybe Prelude.Text)
createIpAccessSettings_description = Lens.lens (\CreateIpAccessSettings' {description} -> description) (\s@CreateIpAccessSettings' {} a -> s {description = a} :: CreateIpAccessSettings) Prelude.. Lens.mapping Data._Sensitive

-- | The display name of the IP access settings.
createIpAccessSettings_displayName :: Lens.Lens' CreateIpAccessSettings (Prelude.Maybe Prelude.Text)
createIpAccessSettings_displayName = Lens.lens (\CreateIpAccessSettings' {displayName} -> displayName) (\s@CreateIpAccessSettings' {} a -> s {displayName = a} :: CreateIpAccessSettings) Prelude.. Lens.mapping Data._Sensitive

-- | The tags to add to the browser settings resource. A tag is a key-value
-- pair.
createIpAccessSettings_tags :: Lens.Lens' CreateIpAccessSettings (Prelude.Maybe [Tag])
createIpAccessSettings_tags = Lens.lens (\CreateIpAccessSettings' {tags} -> tags) (\s@CreateIpAccessSettings' {} a -> s {tags = a} :: CreateIpAccessSettings) Prelude.. Lens.mapping Lens.coerced

-- | The IP rules of the IP access settings.
createIpAccessSettings_ipRules :: Lens.Lens' CreateIpAccessSettings (Prelude.NonEmpty IpRule)
createIpAccessSettings_ipRules = Lens.lens (\CreateIpAccessSettings' {ipRules} -> ipRules) (\s@CreateIpAccessSettings' {} a -> s {ipRules = a} :: CreateIpAccessSettings) Prelude.. Data._Sensitive Prelude.. Lens.coerced

instance Core.AWSRequest CreateIpAccessSettings where
  type
    AWSResponse CreateIpAccessSettings =
      CreateIpAccessSettingsResponse
  request overrides =
    Request.postJSON (overrides defaultService)
  response =
    Response.receiveJSON
      ( \s h x ->
          CreateIpAccessSettingsResponse'
            Prelude.<$> (Prelude.pure (Prelude.fromEnum s))
            Prelude.<*> (x Data..:> "ipAccessSettingsArn")
      )

instance Prelude.Hashable CreateIpAccessSettings where
  hashWithSalt _salt CreateIpAccessSettings' {..} =
    _salt
      `Prelude.hashWithSalt` additionalEncryptionContext
      `Prelude.hashWithSalt` clientToken
      `Prelude.hashWithSalt` customerManagedKey
      `Prelude.hashWithSalt` description
      `Prelude.hashWithSalt` displayName
      `Prelude.hashWithSalt` tags
      `Prelude.hashWithSalt` ipRules

instance Prelude.NFData CreateIpAccessSettings where
  rnf CreateIpAccessSettings' {..} =
    Prelude.rnf additionalEncryptionContext
      `Prelude.seq` Prelude.rnf clientToken
      `Prelude.seq` Prelude.rnf customerManagedKey
      `Prelude.seq` Prelude.rnf description
      `Prelude.seq` Prelude.rnf displayName
      `Prelude.seq` Prelude.rnf tags
      `Prelude.seq` Prelude.rnf ipRules

instance Data.ToHeaders CreateIpAccessSettings where
  toHeaders =
    Prelude.const
      ( Prelude.mconcat
          [ "Content-Type"
              Data.=# ( "application/x-amz-json-1.1" ::
                          Prelude.ByteString
                      )
          ]
      )

instance Data.ToJSON CreateIpAccessSettings where
  toJSON CreateIpAccessSettings' {..} =
    Data.object
      ( Prelude.catMaybes
          [ ("additionalEncryptionContext" Data..=)
              Prelude.<$> additionalEncryptionContext,
            ("clientToken" Data..=) Prelude.<$> clientToken,
            ("customerManagedKey" Data..=)
              Prelude.<$> customerManagedKey,
            ("description" Data..=) Prelude.<$> description,
            ("displayName" Data..=) Prelude.<$> displayName,
            ("tags" Data..=) Prelude.<$> tags,
            Prelude.Just ("ipRules" Data..= ipRules)
          ]
      )

instance Data.ToPath CreateIpAccessSettings where
  toPath = Prelude.const "/ipAccessSettings"

instance Data.ToQuery CreateIpAccessSettings where
  toQuery = Prelude.const Prelude.mempty

-- | /See:/ 'newCreateIpAccessSettingsResponse' smart constructor.
data CreateIpAccessSettingsResponse = CreateIpAccessSettingsResponse'
  { -- | The response's http status code.
    httpStatus :: Prelude.Int,
    -- | The ARN of the IP access settings resource.
    ipAccessSettingsArn :: Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'CreateIpAccessSettingsResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'httpStatus', 'createIpAccessSettingsResponse_httpStatus' - The response's http status code.
--
-- 'ipAccessSettingsArn', 'createIpAccessSettingsResponse_ipAccessSettingsArn' - The ARN of the IP access settings resource.
newCreateIpAccessSettingsResponse ::
  -- | 'httpStatus'
  Prelude.Int ->
  -- | 'ipAccessSettingsArn'
  Prelude.Text ->
  CreateIpAccessSettingsResponse
newCreateIpAccessSettingsResponse
  pHttpStatus_
  pIpAccessSettingsArn_ =
    CreateIpAccessSettingsResponse'
      { httpStatus =
          pHttpStatus_,
        ipAccessSettingsArn = pIpAccessSettingsArn_
      }

-- | The response's http status code.
createIpAccessSettingsResponse_httpStatus :: Lens.Lens' CreateIpAccessSettingsResponse Prelude.Int
createIpAccessSettingsResponse_httpStatus = Lens.lens (\CreateIpAccessSettingsResponse' {httpStatus} -> httpStatus) (\s@CreateIpAccessSettingsResponse' {} a -> s {httpStatus = a} :: CreateIpAccessSettingsResponse)

-- | The ARN of the IP access settings resource.
createIpAccessSettingsResponse_ipAccessSettingsArn :: Lens.Lens' CreateIpAccessSettingsResponse Prelude.Text
createIpAccessSettingsResponse_ipAccessSettingsArn = Lens.lens (\CreateIpAccessSettingsResponse' {ipAccessSettingsArn} -> ipAccessSettingsArn) (\s@CreateIpAccessSettingsResponse' {} a -> s {ipAccessSettingsArn = a} :: CreateIpAccessSettingsResponse)

instance
  Prelude.NFData
    CreateIpAccessSettingsResponse
  where
  rnf CreateIpAccessSettingsResponse' {..} =
    Prelude.rnf httpStatus
      `Prelude.seq` Prelude.rnf ipAccessSettingsArn
