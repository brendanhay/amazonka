{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.PaymentCryptography.ImportKey
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Imports keys and public key certificates into Amazon Web Services
-- Payment Cryptography.
--
-- Amazon Web Services Payment Cryptography simplifies main or root key
-- exchange process by eliminating the need of a paper-based key exchange
-- process. It takes a modern and secure approach based of the ANSI X9
-- TR-34 key exchange standard.
--
-- You can use @ImportKey@ to import main or root keys such as KEK (Key
-- Encryption Key) using asymmetric key exchange technique following the
-- ANSI X9 TR-34 standard. The ANSI X9 TR-34 standard uses asymmetric keys
-- to establishes bi-directional trust between the two parties exchanging
-- keys.
--
-- After you have imported a main or root key, you can import working keys
-- to perform various cryptographic operations within Amazon Web Services
-- Payment Cryptography using the ANSI X9 TR-31 symmetric key exchange
-- standard as mandated by PCI PIN.
--
-- You can also import a /root public key certificate/, a self-signed
-- certificate used to sign other public key certificates, or a /trusted
-- public key certificate/ under an already established root public key
-- certificate.
--
-- __To import a public root key certificate__
--
-- Using this operation, you can import the public component (in PEM
-- cerificate format) of your private root key. You can use the imported
-- public root key certificate for digital signatures, for example signing
-- wrapping key or signing key in TR-34, within your Amazon Web Services
-- Payment Cryptography account.
--
-- Set the following parameters:
--
-- -   @KeyMaterial@: @RootCertificatePublicKey@
--
-- -   @KeyClass@: @PUBLIC_KEY@
--
-- -   @KeyModesOfUse@: @Verify@
--
-- -   @KeyUsage@: @TR31_S0_ASYMMETRIC_KEY_FOR_DIGITAL_SIGNATURE@
--
-- -   @PublicKeyCertificate@: The certificate authority used to sign the
--     root public key certificate.
--
-- __To import a trusted public key certificate__
--
-- The root public key certificate must be in place and operational before
-- you import a trusted public key certificate. Set the following
-- parameters:
--
-- -   @KeyMaterial@: @TrustedCertificatePublicKey@
--
-- -   @CertificateAuthorityPublicKeyIdentifier@: @KeyArn@ of the
--     @RootCertificatePublicKey@.
--
-- -   @KeyModesOfUse@ and @KeyUsage@: Corresponding to the cryptographic
--     operations such as wrap, sign, or encrypt that you will allow the
--     trusted public key certificate to perform.
--
-- -   @PublicKeyCertificate@: The certificate authority used to sign the
--     trusted public key certificate.
--
-- __Import main keys__
--
-- Amazon Web Services Payment Cryptography uses TR-34 asymmetric key
-- exchange standard to import main keys such as KEK. In TR-34 terminology,
-- the sending party of the key is called Key Distribution Host (KDH) and
-- the receiving party of the key is called Key Receiving Host (KRH).
-- During the key import process, KDH is the user who initiates the key
-- import and KRH is Amazon Web Services Payment Cryptography who receives
-- the key. Before initiating TR-34 key import, you must obtain an import
-- token by calling GetParametersForImport. This operation also returns the
-- wrapping key certificate that KDH uses wrap key under import to generate
-- a TR-34 wrapped key block. The import token expires after 7 days.
--
-- Set the following parameters:
--
-- -   @CertificateAuthorityPublicKeyIdentifier@: The @KeyArn@ of the
--     certificate chain that will sign the signing key certificate and
--     should exist within Amazon Web Services Payment Cryptography before
--     initiating TR-34 key import. If it does not exist, you can import it
--     by calling by calling @ImportKey@ for @RootCertificatePublicKey@.
--
-- -   @ImportToken@: Obtained from KRH by calling GetParametersForImport.
--
-- -   @WrappedKeyBlock@: The TR-34 wrapped key block from KDH. It contains
--     the KDH key under import, wrapped with KRH provided wrapping key
--     certificate and signed by the KDH private signing key. This TR-34
--     key block is generated by the KDH Hardware Security Module (HSM)
--     outside of Amazon Web Services Payment Cryptography.
--
-- -   @SigningKeyCertificate@: The public component of the private key
--     that signed the KDH TR-34 wrapped key block. In PEM certificate
--     format.
--
-- TR-34 is intended primarily to exchange 3DES keys. Your ability to
-- export AES-128 and larger AES keys may be dependent on your source
-- system.
--
-- __Import working keys__
--
-- Amazon Web Services Payment Cryptography uses TR-31 symmetric key
-- exchange standard to import working keys. A KEK must be established
-- within Amazon Web Services Payment Cryptography by using TR-34 key
-- import. To initiate a TR-31 key import, set the following parameters:
--
-- -   @WrappedKeyBlock@: The key under import and encrypted using KEK. The
--     TR-31 key block generated by your HSM outside of Amazon Web Services
--     Payment Cryptography.
--
-- -   @WrappingKeyIdentifier@: The @KeyArn@ of the KEK that Amazon Web
--     Services Payment Cryptography uses to decrypt or unwrap the key
--     under import.
--
-- __Cross-account use:__ This operation can\'t be used across different
-- Amazon Web Services accounts.
--
-- __Related operations:__
--
-- -   ExportKey
--
-- -   GetParametersForImport
module Amazonka.PaymentCryptography.ImportKey
  ( -- * Creating a Request
    ImportKey (..),
    newImportKey,

    -- * Request Lenses
    importKey_enabled,
    importKey_keyCheckValueAlgorithm,
    importKey_tags,
    importKey_keyMaterial,

    -- * Destructuring the Response
    ImportKeyResponse (..),
    newImportKeyResponse,

    -- * Response Lenses
    importKeyResponse_httpStatus,
    importKeyResponse_key,
  )
where

import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import Amazonka.PaymentCryptography.Types
import qualified Amazonka.Prelude as Prelude
import qualified Amazonka.Request as Request
import qualified Amazonka.Response as Response

-- | /See:/ 'newImportKey' smart constructor.
data ImportKey = ImportKey'
  { -- | Specifies whether import key is enabled.
    enabled :: Prelude.Maybe Prelude.Bool,
    -- | The algorithm that Amazon Web Services Payment Cryptography uses to
    -- calculate the key check value (KCV) for DES and AES keys.
    --
    -- For DES key, the KCV is computed by encrypting 8 bytes, each with value
    -- \'00\', with the key to be checked and retaining the 3 highest order
    -- bytes of the encrypted result. For AES key, the KCV is computed by
    -- encrypting 8 bytes, each with value \'01\', with the key to be checked
    -- and retaining the 3 highest order bytes of the encrypted result.
    keyCheckValueAlgorithm :: Prelude.Maybe KeyCheckValueAlgorithm,
    -- | The tags to attach to the key. Each tag consists of a tag key and a tag
    -- value. Both the tag key and the tag value are required, but the tag
    -- value can be an empty (null) string. You can\'t have more than one tag
    -- on an Amazon Web Services Payment Cryptography key with the same tag
    -- key.
    --
    -- You can\'t have more than one tag on an Amazon Web Services Payment
    -- Cryptography key with the same tag key. If you specify an existing tag
    -- key with a different tag value, Amazon Web Services Payment Cryptography
    -- replaces the current tag value with the specified one.
    --
    -- To use this parameter, you must have @TagResource@ permission.
    --
    -- Don\'t include confidential or sensitive information in this field. This
    -- field may be displayed in plaintext in CloudTrail logs and other output.
    --
    -- Tagging or untagging an Amazon Web Services Payment Cryptography key can
    -- allow or deny permission to the key.
    tags :: Prelude.Maybe [Tag],
    -- | The key or public key certificate type to use during key material
    -- import, for example TR-34 or RootCertificatePublicKey.
    keyMaterial :: ImportKeyMaterial
  }
  deriving (Prelude.Eq, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'ImportKey' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'enabled', 'importKey_enabled' - Specifies whether import key is enabled.
--
-- 'keyCheckValueAlgorithm', 'importKey_keyCheckValueAlgorithm' - The algorithm that Amazon Web Services Payment Cryptography uses to
-- calculate the key check value (KCV) for DES and AES keys.
--
-- For DES key, the KCV is computed by encrypting 8 bytes, each with value
-- \'00\', with the key to be checked and retaining the 3 highest order
-- bytes of the encrypted result. For AES key, the KCV is computed by
-- encrypting 8 bytes, each with value \'01\', with the key to be checked
-- and retaining the 3 highest order bytes of the encrypted result.
--
-- 'tags', 'importKey_tags' - The tags to attach to the key. Each tag consists of a tag key and a tag
-- value. Both the tag key and the tag value are required, but the tag
-- value can be an empty (null) string. You can\'t have more than one tag
-- on an Amazon Web Services Payment Cryptography key with the same tag
-- key.
--
-- You can\'t have more than one tag on an Amazon Web Services Payment
-- Cryptography key with the same tag key. If you specify an existing tag
-- key with a different tag value, Amazon Web Services Payment Cryptography
-- replaces the current tag value with the specified one.
--
-- To use this parameter, you must have @TagResource@ permission.
--
-- Don\'t include confidential or sensitive information in this field. This
-- field may be displayed in plaintext in CloudTrail logs and other output.
--
-- Tagging or untagging an Amazon Web Services Payment Cryptography key can
-- allow or deny permission to the key.
--
-- 'keyMaterial', 'importKey_keyMaterial' - The key or public key certificate type to use during key material
-- import, for example TR-34 or RootCertificatePublicKey.
newImportKey ::
  -- | 'keyMaterial'
  ImportKeyMaterial ->
  ImportKey
newImportKey pKeyMaterial_ =
  ImportKey'
    { enabled = Prelude.Nothing,
      keyCheckValueAlgorithm = Prelude.Nothing,
      tags = Prelude.Nothing,
      keyMaterial = pKeyMaterial_
    }

-- | Specifies whether import key is enabled.
importKey_enabled :: Lens.Lens' ImportKey (Prelude.Maybe Prelude.Bool)
importKey_enabled = Lens.lens (\ImportKey' {enabled} -> enabled) (\s@ImportKey' {} a -> s {enabled = a} :: ImportKey)

-- | The algorithm that Amazon Web Services Payment Cryptography uses to
-- calculate the key check value (KCV) for DES and AES keys.
--
-- For DES key, the KCV is computed by encrypting 8 bytes, each with value
-- \'00\', with the key to be checked and retaining the 3 highest order
-- bytes of the encrypted result. For AES key, the KCV is computed by
-- encrypting 8 bytes, each with value \'01\', with the key to be checked
-- and retaining the 3 highest order bytes of the encrypted result.
importKey_keyCheckValueAlgorithm :: Lens.Lens' ImportKey (Prelude.Maybe KeyCheckValueAlgorithm)
importKey_keyCheckValueAlgorithm = Lens.lens (\ImportKey' {keyCheckValueAlgorithm} -> keyCheckValueAlgorithm) (\s@ImportKey' {} a -> s {keyCheckValueAlgorithm = a} :: ImportKey)

-- | The tags to attach to the key. Each tag consists of a tag key and a tag
-- value. Both the tag key and the tag value are required, but the tag
-- value can be an empty (null) string. You can\'t have more than one tag
-- on an Amazon Web Services Payment Cryptography key with the same tag
-- key.
--
-- You can\'t have more than one tag on an Amazon Web Services Payment
-- Cryptography key with the same tag key. If you specify an existing tag
-- key with a different tag value, Amazon Web Services Payment Cryptography
-- replaces the current tag value with the specified one.
--
-- To use this parameter, you must have @TagResource@ permission.
--
-- Don\'t include confidential or sensitive information in this field. This
-- field may be displayed in plaintext in CloudTrail logs and other output.
--
-- Tagging or untagging an Amazon Web Services Payment Cryptography key can
-- allow or deny permission to the key.
importKey_tags :: Lens.Lens' ImportKey (Prelude.Maybe [Tag])
importKey_tags = Lens.lens (\ImportKey' {tags} -> tags) (\s@ImportKey' {} a -> s {tags = a} :: ImportKey) Prelude.. Lens.mapping Lens.coerced

-- | The key or public key certificate type to use during key material
-- import, for example TR-34 or RootCertificatePublicKey.
importKey_keyMaterial :: Lens.Lens' ImportKey ImportKeyMaterial
importKey_keyMaterial = Lens.lens (\ImportKey' {keyMaterial} -> keyMaterial) (\s@ImportKey' {} a -> s {keyMaterial = a} :: ImportKey)

instance Core.AWSRequest ImportKey where
  type AWSResponse ImportKey = ImportKeyResponse
  request overrides =
    Request.postJSON (overrides defaultService)
  response =
    Response.receiveJSON
      ( \s h x ->
          ImportKeyResponse'
            Prelude.<$> (Prelude.pure (Prelude.fromEnum s))
            Prelude.<*> (x Data..:> "Key")
      )

instance Prelude.Hashable ImportKey where
  hashWithSalt _salt ImportKey' {..} =
    _salt
      `Prelude.hashWithSalt` enabled
      `Prelude.hashWithSalt` keyCheckValueAlgorithm
      `Prelude.hashWithSalt` tags
      `Prelude.hashWithSalt` keyMaterial

instance Prelude.NFData ImportKey where
  rnf ImportKey' {..} =
    Prelude.rnf enabled
      `Prelude.seq` Prelude.rnf keyCheckValueAlgorithm
      `Prelude.seq` Prelude.rnf tags
      `Prelude.seq` Prelude.rnf keyMaterial

instance Data.ToHeaders ImportKey where
  toHeaders =
    Prelude.const
      ( Prelude.mconcat
          [ "X-Amz-Target"
              Data.=# ( "PaymentCryptographyControlPlane.ImportKey" ::
                          Prelude.ByteString
                      ),
            "Content-Type"
              Data.=# ( "application/x-amz-json-1.0" ::
                          Prelude.ByteString
                      )
          ]
      )

instance Data.ToJSON ImportKey where
  toJSON ImportKey' {..} =
    Data.object
      ( Prelude.catMaybes
          [ ("Enabled" Data..=) Prelude.<$> enabled,
            ("KeyCheckValueAlgorithm" Data..=)
              Prelude.<$> keyCheckValueAlgorithm,
            ("Tags" Data..=) Prelude.<$> tags,
            Prelude.Just ("KeyMaterial" Data..= keyMaterial)
          ]
      )

instance Data.ToPath ImportKey where
  toPath = Prelude.const "/"

instance Data.ToQuery ImportKey where
  toQuery = Prelude.const Prelude.mempty

-- | /See:/ 'newImportKeyResponse' smart constructor.
data ImportKeyResponse = ImportKeyResponse'
  { -- | The response's http status code.
    httpStatus :: Prelude.Int,
    -- | The @KeyARN@ of the key material imported within Amazon Web Services
    -- Payment Cryptography.
    key :: Key
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'ImportKeyResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'httpStatus', 'importKeyResponse_httpStatus' - The response's http status code.
--
-- 'key', 'importKeyResponse_key' - The @KeyARN@ of the key material imported within Amazon Web Services
-- Payment Cryptography.
newImportKeyResponse ::
  -- | 'httpStatus'
  Prelude.Int ->
  -- | 'key'
  Key ->
  ImportKeyResponse
newImportKeyResponse pHttpStatus_ pKey_ =
  ImportKeyResponse'
    { httpStatus = pHttpStatus_,
      key = pKey_
    }

-- | The response's http status code.
importKeyResponse_httpStatus :: Lens.Lens' ImportKeyResponse Prelude.Int
importKeyResponse_httpStatus = Lens.lens (\ImportKeyResponse' {httpStatus} -> httpStatus) (\s@ImportKeyResponse' {} a -> s {httpStatus = a} :: ImportKeyResponse)

-- | The @KeyARN@ of the key material imported within Amazon Web Services
-- Payment Cryptography.
importKeyResponse_key :: Lens.Lens' ImportKeyResponse Key
importKeyResponse_key = Lens.lens (\ImportKeyResponse' {key} -> key) (\s@ImportKeyResponse' {} a -> s {key = a} :: ImportKeyResponse)

instance Prelude.NFData ImportKeyResponse where
  rnf ImportKeyResponse' {..} =
    Prelude.rnf httpStatus
      `Prelude.seq` Prelude.rnf key
