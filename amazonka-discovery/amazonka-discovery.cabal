name:                  amazonka-discovery
version:               1.4.2
synopsis:              Amazon Application Discovery Service SDK.
homepage:              https://github.com/brendanhay/amazonka
bug-reports:           https://github.com/brendanhay/amazonka/issues
license:               OtherLicense
license-file:          LICENSE
author:                Brendan Hay
maintainer:            Brendan Hay <brendan.g.hay@gmail.com>
copyright:             Copyright (c) 2013-2016 Brendan Hay
category:              Network, AWS, Cloud, Distributed Computing
build-type:            Simple
cabal-version:         >= 1.10
extra-source-files:    README.md fixture/*.yaml fixture/*.proto
description:
    The AWS Application Discovery Service helps Systems Integrators quickly
    and reliably plan application migration projects by automatically
    identifying applications running in on-premises data centers, their
    associated dependencies, and their performance profile.

    Planning data center migrations can involve thousands of workloads that
    are often deeply interdependent. Application discovery and dependency
    mapping are important early first steps in the migration process, but
    difficult to perform at scale due to the lack of automated tools.

    The AWS Application Discovery Service automatically collects
    configuration and usage data from servers to develop a list of
    applications, how they perform, and how they are interdependent. This
    information is securely retained in an AWS Application Discovery Service
    database which you can export as a CSV file into your preferred
    visualization tool or cloud migration solution to help reduce the
    complexity and time in planning your cloud migration.

    The Application Discovery Service is currently available for preview.
    Only customers who are engaged with
    <https://aws.amazon.com/professional-services/ AWS Professional Services>
    or a certified AWS partner can use the service. To see the list of
    certified partners and request access to the Application Discovery
    Service, complete the following
    <http://aws.amazon.com/application-discovery/preview/ preview form>.

    This API reference provides descriptions, syntax, and usage examples for
    each of the actions and data types for the Discovery Service. The topic
    for each action shows the API request parameters and the response.
    Alternatively, you can use one of the AWS SDKs to access an API that is
    tailored to the programming language or platform that you\'re using. For
    more information, see <http://aws.amazon.com/tools/#SDKs AWS SDKs>.

    This guide is intended for use with the
    <http://docs.aws.amazon.com/application-discovery/latest/userguide/what-is-appdiscovery.html AWS Discovery Service User Guide>.

    The following are short descriptions of each API action, organized by
    function.

    __Managing AWS Agents Using the Application Discovery Service__

    An AWS agent is software that you install on on-premises servers and
    virtual machines that are targeted for discovery and migration. Agents
    run on Linux and Windows Server and collect server configuration and
    activity information about your applications and infrastructure.
    Specifically, agents collect the following information and send it to
    the Application Discovery Service using Secure Sockets Layer (SSL)
    encryption:

    -   User information (user name, home directory)

    -   Group information (name)

    -   List of installed packages

    -   List of kernel modules

    -   All create and stop process events

    -   DNS queries

    -   NIC information

    -   TCP\/UDP process listening ports

    -   TCPV4\/V6 connections

    -   Operating system information

    -   System performance

    -   Process performance

    The Application Discovery Service API includes the following actions to
    manage AWS agents:

    -   /StartDataCollectionByAgentIds/: Instructs the specified agents to
        start collecting data. The Application Discovery Service takes
        several minutes to receive and process data after you initiate data
        collection.

    -   /StopDataCollectionByAgentIds/: Instructs the specified agents to
        stop collecting data.

    -   /DescribeAgents/: Lists AWS agents by ID or lists all agents
        associated with your user account if you did not specify an agent
        ID. The output includes agent IDs, IP addresses, media access
        control (MAC) addresses, agent health, host name where the agent
        resides, and the version number of each agent.

    __Querying Configuration Items__

    A /configuration item/ is an IT asset that was discovered in your data
    center by an AWS agent. When you use the Application Discovery Service,
    you can specify filters and query specific configuration items. The
    service supports Server, Process, and Connection configuration items.
    This means you can specify a value for the following keys and query your
    IT assets:

    __Server__

    -   server.HostName

    -   server.osName

    -   server.osVersion

    -   server.configurationId

    -   server.agentId

    __Process__

    -   process.name

    -   process.CommandLine

    -   process.configurationId

    -   server.hostName

    -   server.osName

    -   server.osVersion

    -   server.configurationId

    -   server.agentId

    __Connection__

    -   connection.sourceIp

    -   connection.sourcePort

    -   connection.destinationIp

    -   connection.destinationPort

    -   sourceProcess.configurationId

    -   sourceProcess.commandLine

    -   sourceProcess.name

    -   destinationProcessId.configurationId

    -   destinationProcess.commandLine

    -   destinationProcess.name

    -   sourceServer.configurationId

    -   sourceServer.hostName

    -   sourceServer.osName

    -   sourceServer.osVersion

    -   destinationServer.configurationId

    -   destinationServer.hostName

    -   destinationServer.osName

    -   destinationServer.osVersion

    The Application Discovery Service includes the following actions for
    querying configuration items.

    -   /DescribeConfigurations/: Retrieves a list of attributes for a
        specific configuration ID. For example, the output for a /server/
        configuration item includes a list of attributes about the server,
        including host name, operating system, number of network cards, etc.

    -   /ListConfigurations/: Retrieves a list of configuration items
        according to the criteria you specify in a filter. The filter
        criteria identify relationship requirements. For example, you can
        specify filter criteria of process.name with values of /nginx/ and
        /apache/.

    __Tagging Discovered Configuration Items__

    You can tag discovered configuration items. Tags are metadata that help
    you categorize IT assets in your data center. Tags use a /key/-/value/
    format.

    -   /CreateTags/: Creates one or more tags for a configuration items.

    -   /DescribeTags/: Retrieves a list of configuration items that are
        tagged with a specific tag. /Or/, retrieves a list of all tags
        assigned to a specific configuration item.

    -   /DeleteTags/: Deletes the association between a configuration item
        and one or more tags.

    __Exporting Data__

    You can export data as a CSV file to an Amazon S3 bucket or into your
    preferred visualization tool or cloud migration solution to help reduce
    the complexity and time in planning your cloud migration.

    -   /ExportConfigurations/: Exports all discovered configuration data to
        an Amazon S3 bucket. Data includes tags and tag associations,
        processes, connections, servers, and system performance. This API
        returns an export ID which you can query using the GetExportStatus
        API.

    -   /DescribeExportConfigurations/: Gets the status of the data export.
        When the export is complete, the service returns an Amazon S3 URL
        where you can download CSV files that include the data.
    .
    The types from this library are intended to be used with
    <http://hackage.haskell.org/package/amazonka amazonka>, which provides
    mechanisms for specifying AuthN/AuthZ information and sending requests.
    .
    Use of lenses is required for constructing and manipulating types.
    This is due to the amount of nesting of AWS types and transparency regarding
    de/serialisation into more palatable Haskell values.
    The provided lenses should be compatible with any of the major lens libraries
    such as <http://hackage.haskell.org/package/lens lens> or
    <http://hackage.haskell.org/package/lens-family-core lens-family-core>.
    .
    See "Network.AWS.Discovery" or <https://aws.amazon.com/documentation/ the AWS Documentation>
    to get started.

source-repository head
    type:     git
    location: git://github.com/brendanhay/amazonka.git

library
    default-language:  Haskell2010
    hs-source-dirs:    src gen

    ghc-options:       -Wall

    exposed-modules:
          Network.AWS.Discovery
        , Network.AWS.Discovery.CreateTags
        , Network.AWS.Discovery.DeleteTags
        , Network.AWS.Discovery.DescribeAgents
        , Network.AWS.Discovery.DescribeConfigurations
        , Network.AWS.Discovery.DescribeExportConfigurations
        , Network.AWS.Discovery.DescribeTags
        , Network.AWS.Discovery.ExportConfigurations
        , Network.AWS.Discovery.ListConfigurations
        , Network.AWS.Discovery.StartDataCollectionByAgentIds
        , Network.AWS.Discovery.StopDataCollectionByAgentIds
        , Network.AWS.Discovery.Types
        , Network.AWS.Discovery.Waiters

    other-modules:
          Network.AWS.Discovery.Types.Product
        , Network.AWS.Discovery.Types.Sum

    build-depends:
          amazonka-core == 1.4.2.*
        , base          >= 4.7     && < 5

test-suite amazonka-discovery-test
    type:              exitcode-stdio-1.0
    default-language:  Haskell2010
    hs-source-dirs:    test
    main-is:           Main.hs

    ghc-options:       -Wall -threaded

    -- This section is encoded by the template and any modules added by
    -- hand outside these namespaces will not correctly be added to the
    -- distribution package.
    other-modules:
          Test.AWS.Discovery
        , Test.AWS.Gen.Discovery
        , Test.AWS.Discovery.Internal

    build-depends:
          amazonka-core == 1.4.2.*
        , amazonka-test == 1.4.2.*
        , amazonka-discovery == 1.4.2.*
        , base
        , bytestring
        , tasty
        , tasty-hunit
        , text
        , time
        , unordered-containers
