load("@rules_haskell//haskell:defs.bzl", "haskell_binary", "haskell_library")

GHC_EXTENSIONS = [
    "-XBinaryLiterals",
    "-XConstraintKinds",
    "-XDataKinds",
    "-XDefaultSignatures",
    "-XDeriveFoldable",
    "-XDeriveFunctor",
    "-XDeriveGeneric",
    "-XDeriveTraversable",
    "-XDerivingStrategies",
    "-XDerivingVia",
    "-XDoAndIfThenElse",
    "-XDuplicateRecordFields",
    "-XEmptyDataDecls",
    "-XExistentialQuantification",
    "-XExplicitNamespaces",
    "-XFlexibleContexts",
    "-XFlexibleInstances",
    "-XFunctionalDependencies",
    "-XGADTs",
    "-XGeneralizedNewtypeDeriving",
    "-XInstanceSigs",
    "-XKindSignatures",
    "-XLambdaCase",
    "-XMultiParamTypeClasses",
    "-XMultiWayIf",
    "-XNamedFieldPuns",
    "-XNumericUnderscores",
    "-XOverloadedLabels",
    "-XOverloadedStrings",
    "-XPartialTypeSignatures",
    "-XPatternGuards",
    "-XPatternSynonyms",
    "-XPolyKinds",
    "-XRankNTypes",
    "-XRecordWildCards",
    "-XScopedTypeVariables",
    "-XStandaloneDeriving",
    "-XStrictData",
    "-XTupleSections",
    "-XTypeApplications",
    "-XTypeFamilies",
    "-XTypeOperators",
    "-XTypeSynonymInstances",
    "-XViewPatterns",
]

GHC_OPTS = [
    "-Wall",
    "-Wunused-packages",
    "-fwarn-incomplete-uni-patterns",
    "-fwarn-incomplete-record-updates",
] + GHC_EXTENSIONS

haskell_library(
    name = "lib",
    srcs = glob(["src/**/*.hs"]),
    ghcopts = GHC_OPTS + [
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@stackage//:aeson",
        "@stackage//:attoparsec",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:comonad",
        "@stackage//:containers",
        "@stackage//:deriving-compat",
        "@stackage//:directory-tree",
        "@stackage//:ede",
        "@stackage//:errors",
        "@stackage//:filepath",
        "@stackage//:free",
        "@stackage//:hashable",
        "@stackage//:haskell-src-exts",
        "@stackage//:lens",
        "@stackage//:mtl",
        "@stackage//:pandoc",
        "@stackage//:scientific",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:transformers",
        "@stackage//:unliftio",
        "@stackage//:unordered-containers",
    ],
)

haskell_binary(
    name = "gen",
    srcs = ["bin/amazonka-gen.hs"],
    ghcopts = GHC_OPTS + [
        "-O1",
        "-threaded",
        "-rtsopts",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":lib",
        "@stackage//:base",
        "@stackage//:filepath",
        "@stackage//:lens",
        "@stackage//:mtl",
        "@stackage//:optparse-applicative",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unliftio",
        "@stackage//:unordered-containers",
    ],
)

haskell_binary(
    name = "gen-configs",
    srcs = [
        "bin/WordFrequency.hs",
        "bin/amazonka-gen-configs.hs",
    ],
    ghcopts = GHC_OPTS + [
        "-O1",
        "-threaded",
        "-rtsopts",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@stackage//:aeson",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:containers",
        "@stackage//:filepath",
        "@stackage//:hashable",
        "@stackage//:optparse-applicative",
        "@stackage//:text",
        "@stackage//:unliftio",
    ],
)
