{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.SSMContacts.ListRotationShifts
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Returns a list of shifts generated by an existing rotation in the
-- system.
--
-- This operation returns paginated results.
module Amazonka.SSMContacts.ListRotationShifts
  ( -- * Creating a Request
    ListRotationShifts (..),
    newListRotationShifts,

    -- * Request Lenses
    listRotationShifts_maxResults,
    listRotationShifts_nextToken,
    listRotationShifts_startTime,
    listRotationShifts_rotationId,
    listRotationShifts_endTime,

    -- * Destructuring the Response
    ListRotationShiftsResponse (..),
    newListRotationShiftsResponse,

    -- * Response Lenses
    listRotationShiftsResponse_nextToken,
    listRotationShiftsResponse_rotationShifts,
    listRotationShiftsResponse_httpStatus,
  )
where

import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import qualified Amazonka.Prelude as Prelude
import qualified Amazonka.Request as Request
import qualified Amazonka.Response as Response
import Amazonka.SSMContacts.Types

-- | /See:/ 'newListRotationShifts' smart constructor.
data ListRotationShifts = ListRotationShifts'
  { -- | The maximum number of items to return for this call. The call also
    -- returns a token that you can specify in a subsequent call to get the
    -- next set of results.
    maxResults :: Prelude.Maybe Prelude.Natural,
    -- | A token to start the list. Use this token to get the next set of
    -- results.
    nextToken :: Prelude.Maybe Prelude.Text,
    -- | The date and time for the beginning of the time range to list shifts
    -- for.
    startTime :: Prelude.Maybe Data.POSIX,
    -- | The Amazon Resource Name (ARN) of the rotation to retrieve shift
    -- information about.
    rotationId :: Prelude.Text,
    -- | The date and time for the end of the time range to list shifts for.
    endTime :: Data.POSIX
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'ListRotationShifts' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'maxResults', 'listRotationShifts_maxResults' - The maximum number of items to return for this call. The call also
-- returns a token that you can specify in a subsequent call to get the
-- next set of results.
--
-- 'nextToken', 'listRotationShifts_nextToken' - A token to start the list. Use this token to get the next set of
-- results.
--
-- 'startTime', 'listRotationShifts_startTime' - The date and time for the beginning of the time range to list shifts
-- for.
--
-- 'rotationId', 'listRotationShifts_rotationId' - The Amazon Resource Name (ARN) of the rotation to retrieve shift
-- information about.
--
-- 'endTime', 'listRotationShifts_endTime' - The date and time for the end of the time range to list shifts for.
newListRotationShifts ::
  -- | 'rotationId'
  Prelude.Text ->
  -- | 'endTime'
  Prelude.UTCTime ->
  ListRotationShifts
newListRotationShifts pRotationId_ pEndTime_ =
  ListRotationShifts'
    { maxResults = Prelude.Nothing,
      nextToken = Prelude.Nothing,
      startTime = Prelude.Nothing,
      rotationId = pRotationId_,
      endTime = Data._Time Lens.# pEndTime_
    }

-- | The maximum number of items to return for this call. The call also
-- returns a token that you can specify in a subsequent call to get the
-- next set of results.
listRotationShifts_maxResults :: Lens.Lens' ListRotationShifts (Prelude.Maybe Prelude.Natural)
listRotationShifts_maxResults = Lens.lens (\ListRotationShifts' {maxResults} -> maxResults) (\s@ListRotationShifts' {} a -> s {maxResults = a} :: ListRotationShifts)

-- | A token to start the list. Use this token to get the next set of
-- results.
listRotationShifts_nextToken :: Lens.Lens' ListRotationShifts (Prelude.Maybe Prelude.Text)
listRotationShifts_nextToken = Lens.lens (\ListRotationShifts' {nextToken} -> nextToken) (\s@ListRotationShifts' {} a -> s {nextToken = a} :: ListRotationShifts)

-- | The date and time for the beginning of the time range to list shifts
-- for.
listRotationShifts_startTime :: Lens.Lens' ListRotationShifts (Prelude.Maybe Prelude.UTCTime)
listRotationShifts_startTime = Lens.lens (\ListRotationShifts' {startTime} -> startTime) (\s@ListRotationShifts' {} a -> s {startTime = a} :: ListRotationShifts) Prelude.. Lens.mapping Data._Time

-- | The Amazon Resource Name (ARN) of the rotation to retrieve shift
-- information about.
listRotationShifts_rotationId :: Lens.Lens' ListRotationShifts Prelude.Text
listRotationShifts_rotationId = Lens.lens (\ListRotationShifts' {rotationId} -> rotationId) (\s@ListRotationShifts' {} a -> s {rotationId = a} :: ListRotationShifts)

-- | The date and time for the end of the time range to list shifts for.
listRotationShifts_endTime :: Lens.Lens' ListRotationShifts Prelude.UTCTime
listRotationShifts_endTime = Lens.lens (\ListRotationShifts' {endTime} -> endTime) (\s@ListRotationShifts' {} a -> s {endTime = a} :: ListRotationShifts) Prelude.. Data._Time

instance Core.AWSPager ListRotationShifts where
  page rq rs
    | Core.stop
        ( rs
            Lens.^? listRotationShiftsResponse_nextToken
            Prelude.. Lens._Just
        ) =
        Prelude.Nothing
    | Core.stop
        ( rs
            Lens.^? listRotationShiftsResponse_rotationShifts
            Prelude.. Lens._Just
        ) =
        Prelude.Nothing
    | Prelude.otherwise =
        Prelude.Just
          Prelude.$ rq
          Prelude.& listRotationShifts_nextToken
          Lens..~ rs
          Lens.^? listRotationShiftsResponse_nextToken
          Prelude.. Lens._Just

instance Core.AWSRequest ListRotationShifts where
  type
    AWSResponse ListRotationShifts =
      ListRotationShiftsResponse
  request overrides =
    Request.postJSON (overrides defaultService)
  response =
    Response.receiveJSON
      ( \s h x ->
          ListRotationShiftsResponse'
            Prelude.<$> (x Data..?> "NextToken")
            Prelude.<*> (x Data..?> "RotationShifts" Core..!@ Prelude.mempty)
            Prelude.<*> (Prelude.pure (Prelude.fromEnum s))
      )

instance Prelude.Hashable ListRotationShifts where
  hashWithSalt _salt ListRotationShifts' {..} =
    _salt
      `Prelude.hashWithSalt` maxResults
      `Prelude.hashWithSalt` nextToken
      `Prelude.hashWithSalt` startTime
      `Prelude.hashWithSalt` rotationId
      `Prelude.hashWithSalt` endTime

instance Prelude.NFData ListRotationShifts where
  rnf ListRotationShifts' {..} =
    Prelude.rnf maxResults
      `Prelude.seq` Prelude.rnf nextToken
      `Prelude.seq` Prelude.rnf startTime
      `Prelude.seq` Prelude.rnf rotationId
      `Prelude.seq` Prelude.rnf endTime

instance Data.ToHeaders ListRotationShifts where
  toHeaders =
    Prelude.const
      ( Prelude.mconcat
          [ "X-Amz-Target"
              Data.=# ( "SSMContacts.ListRotationShifts" ::
                          Prelude.ByteString
                      ),
            "Content-Type"
              Data.=# ( "application/x-amz-json-1.1" ::
                          Prelude.ByteString
                      )
          ]
      )

instance Data.ToJSON ListRotationShifts where
  toJSON ListRotationShifts' {..} =
    Data.object
      ( Prelude.catMaybes
          [ ("MaxResults" Data..=) Prelude.<$> maxResults,
            ("NextToken" Data..=) Prelude.<$> nextToken,
            ("StartTime" Data..=) Prelude.<$> startTime,
            Prelude.Just ("RotationId" Data..= rotationId),
            Prelude.Just ("EndTime" Data..= endTime)
          ]
      )

instance Data.ToPath ListRotationShifts where
  toPath = Prelude.const "/"

instance Data.ToQuery ListRotationShifts where
  toQuery = Prelude.const Prelude.mempty

-- | /See:/ 'newListRotationShiftsResponse' smart constructor.
data ListRotationShiftsResponse = ListRotationShiftsResponse'
  { -- | The token for the next set of items to return. Use this token to get the
    -- next set of results.
    nextToken :: Prelude.Maybe Prelude.Text,
    -- | Information about shifts that meet the filter criteria.
    rotationShifts :: Prelude.Maybe [RotationShift],
    -- | The response's http status code.
    httpStatus :: Prelude.Int
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'ListRotationShiftsResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'nextToken', 'listRotationShiftsResponse_nextToken' - The token for the next set of items to return. Use this token to get the
-- next set of results.
--
-- 'rotationShifts', 'listRotationShiftsResponse_rotationShifts' - Information about shifts that meet the filter criteria.
--
-- 'httpStatus', 'listRotationShiftsResponse_httpStatus' - The response's http status code.
newListRotationShiftsResponse ::
  -- | 'httpStatus'
  Prelude.Int ->
  ListRotationShiftsResponse
newListRotationShiftsResponse pHttpStatus_ =
  ListRotationShiftsResponse'
    { nextToken =
        Prelude.Nothing,
      rotationShifts = Prelude.Nothing,
      httpStatus = pHttpStatus_
    }

-- | The token for the next set of items to return. Use this token to get the
-- next set of results.
listRotationShiftsResponse_nextToken :: Lens.Lens' ListRotationShiftsResponse (Prelude.Maybe Prelude.Text)
listRotationShiftsResponse_nextToken = Lens.lens (\ListRotationShiftsResponse' {nextToken} -> nextToken) (\s@ListRotationShiftsResponse' {} a -> s {nextToken = a} :: ListRotationShiftsResponse)

-- | Information about shifts that meet the filter criteria.
listRotationShiftsResponse_rotationShifts :: Lens.Lens' ListRotationShiftsResponse (Prelude.Maybe [RotationShift])
listRotationShiftsResponse_rotationShifts = Lens.lens (\ListRotationShiftsResponse' {rotationShifts} -> rotationShifts) (\s@ListRotationShiftsResponse' {} a -> s {rotationShifts = a} :: ListRotationShiftsResponse) Prelude.. Lens.mapping Lens.coerced

-- | The response's http status code.
listRotationShiftsResponse_httpStatus :: Lens.Lens' ListRotationShiftsResponse Prelude.Int
listRotationShiftsResponse_httpStatus = Lens.lens (\ListRotationShiftsResponse' {httpStatus} -> httpStatus) (\s@ListRotationShiftsResponse' {} a -> s {httpStatus = a} :: ListRotationShiftsResponse)

instance Prelude.NFData ListRotationShiftsResponse where
  rnf ListRotationShiftsResponse' {..} =
    Prelude.rnf nextToken
      `Prelude.seq` Prelude.rnf rotationShifts
      `Prelude.seq` Prelude.rnf httpStatus
