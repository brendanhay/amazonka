{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.Inspector.ListExclusions
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- List exclusions that are generated by the assessment run.
--
-- This operation returns paginated results.
module Amazonka.Inspector.ListExclusions
  ( -- * Creating a Request
    ListExclusions (..),
    newListExclusions,

    -- * Request Lenses
    listExclusions_maxResults,
    listExclusions_nextToken,
    listExclusions_assessmentRunArn,

    -- * Destructuring the Response
    ListExclusionsResponse (..),
    newListExclusionsResponse,

    -- * Response Lenses
    listExclusionsResponse_nextToken,
    listExclusionsResponse_httpStatus,
    listExclusionsResponse_exclusionArns,
  )
where

import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import Amazonka.Inspector.Types
import qualified Amazonka.Prelude as Prelude
import qualified Amazonka.Request as Request
import qualified Amazonka.Response as Response

-- | /See:/ 'newListExclusions' smart constructor.
data ListExclusions = ListExclusions'
  { -- | You can use this parameter to indicate the maximum number of items you
    -- want in the response. The default value is 100. The maximum value is
    -- 500.
    maxResults :: Prelude.Maybe Prelude.Int,
    -- | You can use this parameter when paginating results. Set the value of
    -- this parameter to null on your first call to the ListExclusionsRequest
    -- action. Subsequent calls to the action fill nextToken in the request
    -- with the value of nextToken from the previous response to continue
    -- listing data.
    nextToken :: Prelude.Maybe Prelude.Text,
    -- | The ARN of the assessment run that generated the exclusions that you
    -- want to list.
    assessmentRunArn :: Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'ListExclusions' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'maxResults', 'listExclusions_maxResults' - You can use this parameter to indicate the maximum number of items you
-- want in the response. The default value is 100. The maximum value is
-- 500.
--
-- 'nextToken', 'listExclusions_nextToken' - You can use this parameter when paginating results. Set the value of
-- this parameter to null on your first call to the ListExclusionsRequest
-- action. Subsequent calls to the action fill nextToken in the request
-- with the value of nextToken from the previous response to continue
-- listing data.
--
-- 'assessmentRunArn', 'listExclusions_assessmentRunArn' - The ARN of the assessment run that generated the exclusions that you
-- want to list.
newListExclusions ::
  -- | 'assessmentRunArn'
  Prelude.Text ->
  ListExclusions
newListExclusions pAssessmentRunArn_ =
  ListExclusions'
    { maxResults = Prelude.Nothing,
      nextToken = Prelude.Nothing,
      assessmentRunArn = pAssessmentRunArn_
    }

-- | You can use this parameter to indicate the maximum number of items you
-- want in the response. The default value is 100. The maximum value is
-- 500.
listExclusions_maxResults :: Lens.Lens' ListExclusions (Prelude.Maybe Prelude.Int)
listExclusions_maxResults = Lens.lens (\ListExclusions' {maxResults} -> maxResults) (\s@ListExclusions' {} a -> s {maxResults = a} :: ListExclusions)

-- | You can use this parameter when paginating results. Set the value of
-- this parameter to null on your first call to the ListExclusionsRequest
-- action. Subsequent calls to the action fill nextToken in the request
-- with the value of nextToken from the previous response to continue
-- listing data.
listExclusions_nextToken :: Lens.Lens' ListExclusions (Prelude.Maybe Prelude.Text)
listExclusions_nextToken = Lens.lens (\ListExclusions' {nextToken} -> nextToken) (\s@ListExclusions' {} a -> s {nextToken = a} :: ListExclusions)

-- | The ARN of the assessment run that generated the exclusions that you
-- want to list.
listExclusions_assessmentRunArn :: Lens.Lens' ListExclusions Prelude.Text
listExclusions_assessmentRunArn = Lens.lens (\ListExclusions' {assessmentRunArn} -> assessmentRunArn) (\s@ListExclusions' {} a -> s {assessmentRunArn = a} :: ListExclusions)

instance Core.AWSPager ListExclusions where
  page rq rs
    | Core.stop
        ( rs
            Lens.^? listExclusionsResponse_nextToken
            Prelude.. Lens._Just
        ) =
        Prelude.Nothing
    | Core.stop
        (rs Lens.^. listExclusionsResponse_exclusionArns) =
        Prelude.Nothing
    | Prelude.otherwise =
        Prelude.Just
          Prelude.$ rq
          Prelude.& listExclusions_nextToken
          Lens..~ rs
          Lens.^? listExclusionsResponse_nextToken
          Prelude.. Lens._Just

instance Core.AWSRequest ListExclusions where
  type
    AWSResponse ListExclusions =
      ListExclusionsResponse
  request overrides =
    Request.postJSON (overrides defaultService)
  response =
    Response.receiveJSON
      ( \s h x ->
          ListExclusionsResponse'
            Prelude.<$> (x Data..?> "nextToken")
            Prelude.<*> (Prelude.pure (Prelude.fromEnum s))
            Prelude.<*> (x Data..?> "exclusionArns" Core..!@ Prelude.mempty)
      )

instance Prelude.Hashable ListExclusions where
  hashWithSalt _salt ListExclusions' {..} =
    _salt
      `Prelude.hashWithSalt` maxResults
      `Prelude.hashWithSalt` nextToken
      `Prelude.hashWithSalt` assessmentRunArn

instance Prelude.NFData ListExclusions where
  rnf ListExclusions' {..} =
    Prelude.rnf maxResults
      `Prelude.seq` Prelude.rnf nextToken
      `Prelude.seq` Prelude.rnf assessmentRunArn

instance Data.ToHeaders ListExclusions where
  toHeaders =
    Prelude.const
      ( Prelude.mconcat
          [ "X-Amz-Target"
              Data.=# ( "InspectorService.ListExclusions" ::
                          Prelude.ByteString
                      ),
            "Content-Type"
              Data.=# ( "application/x-amz-json-1.1" ::
                          Prelude.ByteString
                      )
          ]
      )

instance Data.ToJSON ListExclusions where
  toJSON ListExclusions' {..} =
    Data.object
      ( Prelude.catMaybes
          [ ("maxResults" Data..=) Prelude.<$> maxResults,
            ("nextToken" Data..=) Prelude.<$> nextToken,
            Prelude.Just
              ("assessmentRunArn" Data..= assessmentRunArn)
          ]
      )

instance Data.ToPath ListExclusions where
  toPath = Prelude.const "/"

instance Data.ToQuery ListExclusions where
  toQuery = Prelude.const Prelude.mempty

-- | /See:/ 'newListExclusionsResponse' smart constructor.
data ListExclusionsResponse = ListExclusionsResponse'
  { -- | When a response is generated, if there is more data to be listed, this
    -- parameters is present in the response and contains the value to use for
    -- the nextToken parameter in a subsequent pagination request. If there is
    -- no more data to be listed, this parameter is set to null.
    nextToken :: Prelude.Maybe Prelude.Text,
    -- | The response's http status code.
    httpStatus :: Prelude.Int,
    -- | A list of exclusions\' ARNs returned by the action.
    exclusionArns :: [Prelude.Text]
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'ListExclusionsResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'nextToken', 'listExclusionsResponse_nextToken' - When a response is generated, if there is more data to be listed, this
-- parameters is present in the response and contains the value to use for
-- the nextToken parameter in a subsequent pagination request. If there is
-- no more data to be listed, this parameter is set to null.
--
-- 'httpStatus', 'listExclusionsResponse_httpStatus' - The response's http status code.
--
-- 'exclusionArns', 'listExclusionsResponse_exclusionArns' - A list of exclusions\' ARNs returned by the action.
newListExclusionsResponse ::
  -- | 'httpStatus'
  Prelude.Int ->
  ListExclusionsResponse
newListExclusionsResponse pHttpStatus_ =
  ListExclusionsResponse'
    { nextToken =
        Prelude.Nothing,
      httpStatus = pHttpStatus_,
      exclusionArns = Prelude.mempty
    }

-- | When a response is generated, if there is more data to be listed, this
-- parameters is present in the response and contains the value to use for
-- the nextToken parameter in a subsequent pagination request. If there is
-- no more data to be listed, this parameter is set to null.
listExclusionsResponse_nextToken :: Lens.Lens' ListExclusionsResponse (Prelude.Maybe Prelude.Text)
listExclusionsResponse_nextToken = Lens.lens (\ListExclusionsResponse' {nextToken} -> nextToken) (\s@ListExclusionsResponse' {} a -> s {nextToken = a} :: ListExclusionsResponse)

-- | The response's http status code.
listExclusionsResponse_httpStatus :: Lens.Lens' ListExclusionsResponse Prelude.Int
listExclusionsResponse_httpStatus = Lens.lens (\ListExclusionsResponse' {httpStatus} -> httpStatus) (\s@ListExclusionsResponse' {} a -> s {httpStatus = a} :: ListExclusionsResponse)

-- | A list of exclusions\' ARNs returned by the action.
listExclusionsResponse_exclusionArns :: Lens.Lens' ListExclusionsResponse [Prelude.Text]
listExclusionsResponse_exclusionArns = Lens.lens (\ListExclusionsResponse' {exclusionArns} -> exclusionArns) (\s@ListExclusionsResponse' {} a -> s {exclusionArns = a} :: ListExclusionsResponse) Prelude.. Lens.coerced

instance Prelude.NFData ListExclusionsResponse where
  rnf ListExclusionsResponse' {..} =
    Prelude.rnf nextToken
      `Prelude.seq` Prelude.rnf httpStatus
      `Prelude.seq` Prelude.rnf exclusionArns
