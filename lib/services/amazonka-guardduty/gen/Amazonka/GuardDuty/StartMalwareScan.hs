{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.GuardDuty.StartMalwareScan
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Initiates the malware scan. Invoking this API will automatically create
-- the
-- <https://docs.aws.amazon.com/guardduty/latest/ug/slr-permissions-malware-protection.html Service-linked role>
-- in the corresponding account.
module Amazonka.GuardDuty.StartMalwareScan
  ( -- * Creating a Request
    StartMalwareScan (..),
    newStartMalwareScan,

    -- * Request Lenses
    startMalwareScan_resourceArn,

    -- * Destructuring the Response
    StartMalwareScanResponse (..),
    newStartMalwareScanResponse,

    -- * Response Lenses
    startMalwareScanResponse_scanId,
    startMalwareScanResponse_httpStatus,
  )
where

import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import Amazonka.GuardDuty.Types
import qualified Amazonka.Prelude as Prelude
import qualified Amazonka.Request as Request
import qualified Amazonka.Response as Response

-- | /See:/ 'newStartMalwareScan' smart constructor.
data StartMalwareScan = StartMalwareScan'
  { -- | Amazon Resource Name (ARN) of the resource for which you invoked the
    -- API.
    resourceArn :: Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'StartMalwareScan' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'resourceArn', 'startMalwareScan_resourceArn' - Amazon Resource Name (ARN) of the resource for which you invoked the
-- API.
newStartMalwareScan ::
  -- | 'resourceArn'
  Prelude.Text ->
  StartMalwareScan
newStartMalwareScan pResourceArn_ =
  StartMalwareScan' {resourceArn = pResourceArn_}

-- | Amazon Resource Name (ARN) of the resource for which you invoked the
-- API.
startMalwareScan_resourceArn :: Lens.Lens' StartMalwareScan Prelude.Text
startMalwareScan_resourceArn = Lens.lens (\StartMalwareScan' {resourceArn} -> resourceArn) (\s@StartMalwareScan' {} a -> s {resourceArn = a} :: StartMalwareScan)

instance Core.AWSRequest StartMalwareScan where
  type
    AWSResponse StartMalwareScan =
      StartMalwareScanResponse
  request overrides =
    Request.postJSON (overrides defaultService)
  response =
    Response.receiveJSON
      ( \s h x ->
          StartMalwareScanResponse'
            Prelude.<$> (x Data..?> "scanId")
            Prelude.<*> (Prelude.pure (Prelude.fromEnum s))
      )

instance Prelude.Hashable StartMalwareScan where
  hashWithSalt _salt StartMalwareScan' {..} =
    _salt `Prelude.hashWithSalt` resourceArn

instance Prelude.NFData StartMalwareScan where
  rnf StartMalwareScan' {..} = Prelude.rnf resourceArn

instance Data.ToHeaders StartMalwareScan where
  toHeaders =
    Prelude.const
      ( Prelude.mconcat
          [ "Content-Type"
              Data.=# ( "application/x-amz-json-1.1" ::
                          Prelude.ByteString
                      )
          ]
      )

instance Data.ToJSON StartMalwareScan where
  toJSON StartMalwareScan' {..} =
    Data.object
      ( Prelude.catMaybes
          [Prelude.Just ("resourceArn" Data..= resourceArn)]
      )

instance Data.ToPath StartMalwareScan where
  toPath = Prelude.const "/malware-scan/start"

instance Data.ToQuery StartMalwareScan where
  toQuery = Prelude.const Prelude.mempty

-- | /See:/ 'newStartMalwareScanResponse' smart constructor.
data StartMalwareScanResponse = StartMalwareScanResponse'
  { -- | A unique identifier that gets generated when you invoke the API without
    -- any error. Each malware scan has a corresponding scan ID. Using this
    -- scan ID, you can monitor the status of your malware scan.
    scanId :: Prelude.Maybe Prelude.Text,
    -- | The response's http status code.
    httpStatus :: Prelude.Int
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'StartMalwareScanResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'scanId', 'startMalwareScanResponse_scanId' - A unique identifier that gets generated when you invoke the API without
-- any error. Each malware scan has a corresponding scan ID. Using this
-- scan ID, you can monitor the status of your malware scan.
--
-- 'httpStatus', 'startMalwareScanResponse_httpStatus' - The response's http status code.
newStartMalwareScanResponse ::
  -- | 'httpStatus'
  Prelude.Int ->
  StartMalwareScanResponse
newStartMalwareScanResponse pHttpStatus_ =
  StartMalwareScanResponse'
    { scanId = Prelude.Nothing,
      httpStatus = pHttpStatus_
    }

-- | A unique identifier that gets generated when you invoke the API without
-- any error. Each malware scan has a corresponding scan ID. Using this
-- scan ID, you can monitor the status of your malware scan.
startMalwareScanResponse_scanId :: Lens.Lens' StartMalwareScanResponse (Prelude.Maybe Prelude.Text)
startMalwareScanResponse_scanId = Lens.lens (\StartMalwareScanResponse' {scanId} -> scanId) (\s@StartMalwareScanResponse' {} a -> s {scanId = a} :: StartMalwareScanResponse)

-- | The response's http status code.
startMalwareScanResponse_httpStatus :: Lens.Lens' StartMalwareScanResponse Prelude.Int
startMalwareScanResponse_httpStatus = Lens.lens (\StartMalwareScanResponse' {httpStatus} -> httpStatus) (\s@StartMalwareScanResponse' {} a -> s {httpStatus = a} :: StartMalwareScanResponse)

instance Prelude.NFData StartMalwareScanResponse where
  rnf StartMalwareScanResponse' {..} =
    Prelude.rnf scanId
      `Prelude.seq` Prelude.rnf httpStatus
