{% if pager %}

instance AWSPager {{ request.name }} where
  {% case pager.type %}
  {% when "next" %}
    page rq rs
        | stop (rs ^. {{ pager.token.output }}) = Nothing
      {% if pager.token.outputRequired && pager.token.inputRequired %}
        | otherwise = Just $ rq
            & {{ pager.token.input }} .~ rs ^. {{ pager.token.output }}
      {% elif !pager.token.outputRequired && pager.token.inputRequired %}
        | otherwise = (\x -> rq & {{ pager.token.input }} .~ x)
            <$> (rs ^. {{ pager.token.output }})
      {% elif pager.token.outputRequired && !pager.token.inputRequired %}
        | otherwise = Just $ rq
            & {{ pager.token.input }} ?~ rs ^. {{ pager.token.output }}
      {% else %}
        | otherwise = (\x -> rq & {{ pager.token.input }} ?~ x)
            <$> (rs ^. {{ pager.token.output }})
      {% endif %}
  {% when "one" %}
    page rq rs
        | stop (rs ^. {{ pager.more }}) = Nothing
        | otherwise = Just $ rq
            & {{ pager.token.input }} .~ rs ^. {{ pager.token.output }}
  {% when "many" %}
    page rq rs
        | stop (rs ^. {{ pager.more }}) = Nothing
        | {{ pager.negate }} = Nothing
        | otherwise = Just $ rq
    {% for token in pager.tokens %}
            & {{ token.value.input }} .~ {{ token.key }}
    {% endfor %}
      where
    {% for token in pager.tokens %}
        {{ token.key }} = rs ^. {{ token.value.output }}
   {% endfor %}
  {% endcase %}
{% else %}

instance AWSPager {{ request.name }} where
  page _ _ = Nothing
{% endif %}
