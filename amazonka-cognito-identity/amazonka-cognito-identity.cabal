name:                  amazonka-cognito-identity
version:               1.4.2
synopsis:              Amazon Cognito Identity SDK.
homepage:              https://github.com/brendanhay/amazonka
bug-reports:           https://github.com/brendanhay/amazonka/issues
license:               OtherLicense
license-file:          LICENSE
author:                Brendan Hay
maintainer:            Brendan Hay <brendan.g.hay@gmail.com>
copyright:             Copyright (c) 2013-2016 Brendan Hay
category:              Network, AWS, Cloud, Distributed Computing
build-type:            Simple
cabal-version:         >= 1.10
extra-source-files:    README.md fixture/*.yaml fixture/*.proto
description:
    Amazon Cognito

    Amazon Cognito is a web service that delivers scoped temporary
    credentials to mobile devices and other untrusted environments. Amazon
    Cognito uniquely identifies a device and supplies the user with a
    consistent identity over the lifetime of an application.

    Using Amazon Cognito, you can enable authentication with one or more
    third-party identity providers (Facebook, Google, or Login with Amazon),
    and you can also choose to support unauthenticated access from your app.
    Cognito delivers a unique identifier for each user and acts as an OpenID
    token provider trusted by AWS Security Token Service (STS) to access
    temporary, limited-privilege AWS credentials.

    To provide end-user credentials, first make an unsigned call to
    < GetId>. If the end user is authenticated with one of the supported
    identity providers, set the @Logins@ map with the identity provider
    token. @GetId@ returns a unique identifier for the user.

    Next, make an unsigned call to < GetCredentialsForIdentity>. This call
    expects the same @Logins@ map as the @GetId@ call, as well as the
    @IdentityID@ originally returned by @GetId@. Assuming your identity pool
    has been configured via the < SetIdentityPoolRoles> operation,
    @GetCredentialsForIdentity@ will return AWS credentials for your use. If
    your pool has not been configured with @SetIdentityPoolRoles@, or if you
    want to follow legacy flow, make an unsigned call to < GetOpenIdToken>,
    which returns the OpenID token necessary to call STS and retrieve AWS
    credentials. This call expects the same @Logins@ map as the @GetId@
    call, as well as the @IdentityID@ originally returned by @GetId@. The
    token returned by @GetOpenIdToken@ can be passed to the STS operation
    <http://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html AssumeRoleWithWebIdentity>
    to retrieve AWS credentials.

    If you want to use Amazon Cognito in an Android, iOS, or Unity
    application, you will probably want to make API calls via the AWS Mobile
    SDK. To learn more, see the
    <http://docs.aws.amazon.com/mobile/index.html AWS Mobile SDK Developer Guide>.
    .
    The types from this library are intended to be used with
    <http://hackage.haskell.org/package/amazonka amazonka>, which provides
    mechanisms for specifying AuthN/AuthZ information and sending requests.
    .
    Use of lenses is required for constructing and manipulating types.
    This is due to the amount of nesting of AWS types and transparency regarding
    de/serialisation into more palatable Haskell values.
    The provided lenses should be compatible with any of the major lens libraries
    such as <http://hackage.haskell.org/package/lens lens> or
    <http://hackage.haskell.org/package/lens-family-core lens-family-core>.
    .
    See "Network.AWS.CognitoIdentity" or <https://aws.amazon.com/documentation/ the AWS Documentation>
    to get started.

source-repository head
    type:     git
    location: git://github.com/brendanhay/amazonka.git

library
    default-language:  Haskell2010
    hs-source-dirs:    src gen

    ghc-options:       -Wall

    exposed-modules:
          Network.AWS.CognitoIdentity
        , Network.AWS.CognitoIdentity.CreateIdentityPool
        , Network.AWS.CognitoIdentity.DeleteIdentities
        , Network.AWS.CognitoIdentity.DeleteIdentityPool
        , Network.AWS.CognitoIdentity.DescribeIdentity
        , Network.AWS.CognitoIdentity.DescribeIdentityPool
        , Network.AWS.CognitoIdentity.GetCredentialsForIdentity
        , Network.AWS.CognitoIdentity.GetId
        , Network.AWS.CognitoIdentity.GetIdentityPoolRoles
        , Network.AWS.CognitoIdentity.GetOpenIdToken
        , Network.AWS.CognitoIdentity.GetOpenIdTokenForDeveloperIdentity
        , Network.AWS.CognitoIdentity.ListIdentities
        , Network.AWS.CognitoIdentity.ListIdentityPools
        , Network.AWS.CognitoIdentity.LookupDeveloperIdentity
        , Network.AWS.CognitoIdentity.MergeDeveloperIdentities
        , Network.AWS.CognitoIdentity.SetIdentityPoolRoles
        , Network.AWS.CognitoIdentity.Types
        , Network.AWS.CognitoIdentity.UnlinkDeveloperIdentity
        , Network.AWS.CognitoIdentity.UnlinkIdentity
        , Network.AWS.CognitoIdentity.UpdateIdentityPool
        , Network.AWS.CognitoIdentity.Waiters

    other-modules:
          Network.AWS.CognitoIdentity.Types.Product
        , Network.AWS.CognitoIdentity.Types.Sum

    build-depends:
          amazonka-core == 1.4.2.*
        , base          >= 4.7     && < 5

test-suite amazonka-cognito-identity-test
    type:              exitcode-stdio-1.0
    default-language:  Haskell2010
    hs-source-dirs:    test
    main-is:           Main.hs

    ghc-options:       -Wall -threaded

    -- This section is encoded by the template and any modules added by
    -- hand outside these namespaces will not correctly be added to the
    -- distribution package.
    other-modules:
          Test.AWS.CognitoIdentity
        , Test.AWS.Gen.CognitoIdentity
        , Test.AWS.CognitoIdentity.Internal

    build-depends:
          amazonka-core == 1.4.2.*
        , amazonka-test == 1.4.2.*
        , amazonka-cognito-identity == 1.4.2.*
        , base
        , bytestring
        , tasty
        , tasty-hunit
        , text
        , time
        , unordered-containers
