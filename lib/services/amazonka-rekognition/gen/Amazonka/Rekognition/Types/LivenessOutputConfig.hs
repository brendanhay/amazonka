{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.Rekognition.Types.LivenessOutputConfig
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Amazonka.Rekognition.Types.LivenessOutputConfig where

import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import qualified Amazonka.Prelude as Prelude

-- | Contains settings that specify the location of an Amazon S3 bucket used
-- to store the output of a Face Liveness session. Note that the S3 bucket
-- must be located in the caller\'s AWS account and in the same region as
-- the Face Liveness end-point. Additionally, the Amazon S3 object keys are
-- auto-generated by the Face Liveness system.
--
-- /See:/ 'newLivenessOutputConfig' smart constructor.
data LivenessOutputConfig = LivenessOutputConfig'
  { -- | The prefix prepended to the output files for the Face Liveness session
    -- results.
    s3KeyPrefix :: Prelude.Maybe Prelude.Text,
    -- | The path to an AWS Amazon S3 bucket used to store Face Liveness session
    -- results.
    s3Bucket :: Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'LivenessOutputConfig' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 's3KeyPrefix', 'livenessOutputConfig_s3KeyPrefix' - The prefix prepended to the output files for the Face Liveness session
-- results.
--
-- 's3Bucket', 'livenessOutputConfig_s3Bucket' - The path to an AWS Amazon S3 bucket used to store Face Liveness session
-- results.
newLivenessOutputConfig ::
  -- | 's3Bucket'
  Prelude.Text ->
  LivenessOutputConfig
newLivenessOutputConfig pS3Bucket_ =
  LivenessOutputConfig'
    { s3KeyPrefix =
        Prelude.Nothing,
      s3Bucket = pS3Bucket_
    }

-- | The prefix prepended to the output files for the Face Liveness session
-- results.
livenessOutputConfig_s3KeyPrefix :: Lens.Lens' LivenessOutputConfig (Prelude.Maybe Prelude.Text)
livenessOutputConfig_s3KeyPrefix = Lens.lens (\LivenessOutputConfig' {s3KeyPrefix} -> s3KeyPrefix) (\s@LivenessOutputConfig' {} a -> s {s3KeyPrefix = a} :: LivenessOutputConfig)

-- | The path to an AWS Amazon S3 bucket used to store Face Liveness session
-- results.
livenessOutputConfig_s3Bucket :: Lens.Lens' LivenessOutputConfig Prelude.Text
livenessOutputConfig_s3Bucket = Lens.lens (\LivenessOutputConfig' {s3Bucket} -> s3Bucket) (\s@LivenessOutputConfig' {} a -> s {s3Bucket = a} :: LivenessOutputConfig)

instance Prelude.Hashable LivenessOutputConfig where
  hashWithSalt _salt LivenessOutputConfig' {..} =
    _salt
      `Prelude.hashWithSalt` s3KeyPrefix
      `Prelude.hashWithSalt` s3Bucket

instance Prelude.NFData LivenessOutputConfig where
  rnf LivenessOutputConfig' {..} =
    Prelude.rnf s3KeyPrefix
      `Prelude.seq` Prelude.rnf s3Bucket

instance Data.ToJSON LivenessOutputConfig where
  toJSON LivenessOutputConfig' {..} =
    Data.object
      ( Prelude.catMaybes
          [ ("S3KeyPrefix" Data..=) Prelude.<$> s3KeyPrefix,
            Prelude.Just ("S3Bucket" Data..= s3Bucket)
          ]
      )
