{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.AppSync.StartSchemaMerge
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Initiates a merge operation. Returns a status that shows the result of
-- the merge operation.
module Amazonka.AppSync.StartSchemaMerge
  ( -- * Creating a Request
    StartSchemaMerge (..),
    newStartSchemaMerge,

    -- * Request Lenses
    startSchemaMerge_associationId,
    startSchemaMerge_mergedApiIdentifier,

    -- * Destructuring the Response
    StartSchemaMergeResponse (..),
    newStartSchemaMergeResponse,

    -- * Response Lenses
    startSchemaMergeResponse_sourceApiAssociationStatus,
    startSchemaMergeResponse_httpStatus,
  )
where

import Amazonka.AppSync.Types
import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import qualified Amazonka.Prelude as Prelude
import qualified Amazonka.Request as Request
import qualified Amazonka.Response as Response

-- | /See:/ 'newStartSchemaMerge' smart constructor.
data StartSchemaMerge = StartSchemaMerge'
  { -- | The ID generated by the AppSync service for the source API association.
    associationId :: Prelude.Text,
    -- | The identifier of the AppSync Merged API. This is generated by the
    -- AppSync service. In most cases, Merged APIs (especially in your account)
    -- only require the API ID value or ARN of the merged API. However, Merged
    -- APIs in other accounts (cross-account use cases) strictly require the
    -- full resource ARN of the merged API.
    mergedApiIdentifier :: Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'StartSchemaMerge' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'associationId', 'startSchemaMerge_associationId' - The ID generated by the AppSync service for the source API association.
--
-- 'mergedApiIdentifier', 'startSchemaMerge_mergedApiIdentifier' - The identifier of the AppSync Merged API. This is generated by the
-- AppSync service. In most cases, Merged APIs (especially in your account)
-- only require the API ID value or ARN of the merged API. However, Merged
-- APIs in other accounts (cross-account use cases) strictly require the
-- full resource ARN of the merged API.
newStartSchemaMerge ::
  -- | 'associationId'
  Prelude.Text ->
  -- | 'mergedApiIdentifier'
  Prelude.Text ->
  StartSchemaMerge
newStartSchemaMerge
  pAssociationId_
  pMergedApiIdentifier_ =
    StartSchemaMerge'
      { associationId = pAssociationId_,
        mergedApiIdentifier = pMergedApiIdentifier_
      }

-- | The ID generated by the AppSync service for the source API association.
startSchemaMerge_associationId :: Lens.Lens' StartSchemaMerge Prelude.Text
startSchemaMerge_associationId = Lens.lens (\StartSchemaMerge' {associationId} -> associationId) (\s@StartSchemaMerge' {} a -> s {associationId = a} :: StartSchemaMerge)

-- | The identifier of the AppSync Merged API. This is generated by the
-- AppSync service. In most cases, Merged APIs (especially in your account)
-- only require the API ID value or ARN of the merged API. However, Merged
-- APIs in other accounts (cross-account use cases) strictly require the
-- full resource ARN of the merged API.
startSchemaMerge_mergedApiIdentifier :: Lens.Lens' StartSchemaMerge Prelude.Text
startSchemaMerge_mergedApiIdentifier = Lens.lens (\StartSchemaMerge' {mergedApiIdentifier} -> mergedApiIdentifier) (\s@StartSchemaMerge' {} a -> s {mergedApiIdentifier = a} :: StartSchemaMerge)

instance Core.AWSRequest StartSchemaMerge where
  type
    AWSResponse StartSchemaMerge =
      StartSchemaMergeResponse
  request overrides =
    Request.postJSON (overrides defaultService)
  response =
    Response.receiveJSON
      ( \s h x ->
          StartSchemaMergeResponse'
            Prelude.<$> (x Data..?> "sourceApiAssociationStatus")
            Prelude.<*> (Prelude.pure (Prelude.fromEnum s))
      )

instance Prelude.Hashable StartSchemaMerge where
  hashWithSalt _salt StartSchemaMerge' {..} =
    _salt
      `Prelude.hashWithSalt` associationId
      `Prelude.hashWithSalt` mergedApiIdentifier

instance Prelude.NFData StartSchemaMerge where
  rnf StartSchemaMerge' {..} =
    Prelude.rnf associationId
      `Prelude.seq` Prelude.rnf mergedApiIdentifier

instance Data.ToHeaders StartSchemaMerge where
  toHeaders =
    Prelude.const
      ( Prelude.mconcat
          [ "Content-Type"
              Data.=# ( "application/x-amz-json-1.1" ::
                          Prelude.ByteString
                      )
          ]
      )

instance Data.ToJSON StartSchemaMerge where
  toJSON = Prelude.const (Data.Object Prelude.mempty)

instance Data.ToPath StartSchemaMerge where
  toPath StartSchemaMerge' {..} =
    Prelude.mconcat
      [ "/v1/mergedApis/",
        Data.toBS mergedApiIdentifier,
        "/sourceApiAssociations/",
        Data.toBS associationId,
        "/merge"
      ]

instance Data.ToQuery StartSchemaMerge where
  toQuery = Prelude.const Prelude.mempty

-- | /See:/ 'newStartSchemaMergeResponse' smart constructor.
data StartSchemaMergeResponse = StartSchemaMergeResponse'
  { -- | The state of the source API association.
    sourceApiAssociationStatus :: Prelude.Maybe SourceApiAssociationStatus,
    -- | The response's http status code.
    httpStatus :: Prelude.Int
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'StartSchemaMergeResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'sourceApiAssociationStatus', 'startSchemaMergeResponse_sourceApiAssociationStatus' - The state of the source API association.
--
-- 'httpStatus', 'startSchemaMergeResponse_httpStatus' - The response's http status code.
newStartSchemaMergeResponse ::
  -- | 'httpStatus'
  Prelude.Int ->
  StartSchemaMergeResponse
newStartSchemaMergeResponse pHttpStatus_ =
  StartSchemaMergeResponse'
    { sourceApiAssociationStatus =
        Prelude.Nothing,
      httpStatus = pHttpStatus_
    }

-- | The state of the source API association.
startSchemaMergeResponse_sourceApiAssociationStatus :: Lens.Lens' StartSchemaMergeResponse (Prelude.Maybe SourceApiAssociationStatus)
startSchemaMergeResponse_sourceApiAssociationStatus = Lens.lens (\StartSchemaMergeResponse' {sourceApiAssociationStatus} -> sourceApiAssociationStatus) (\s@StartSchemaMergeResponse' {} a -> s {sourceApiAssociationStatus = a} :: StartSchemaMergeResponse)

-- | The response's http status code.
startSchemaMergeResponse_httpStatus :: Lens.Lens' StartSchemaMergeResponse Prelude.Int
startSchemaMergeResponse_httpStatus = Lens.lens (\StartSchemaMergeResponse' {httpStatus} -> httpStatus) (\s@StartSchemaMergeResponse' {} a -> s {httpStatus = a} :: StartSchemaMergeResponse)

instance Prelude.NFData StartSchemaMergeResponse where
  rnf StartSchemaMergeResponse' {..} =
    Prelude.rnf sourceApiAssociationStatus
      `Prelude.seq` Prelude.rnf httpStatus
