{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.AppSync.DisassociateSourceGraphqlApi
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Deletes an association between a Merged API and source API using the
-- Merged API\'s identifier and the association ID.
module Amazonka.AppSync.DisassociateSourceGraphqlApi
  ( -- * Creating a Request
    DisassociateSourceGraphqlApi (..),
    newDisassociateSourceGraphqlApi,

    -- * Request Lenses
    disassociateSourceGraphqlApi_mergedApiIdentifier,
    disassociateSourceGraphqlApi_associationId,

    -- * Destructuring the Response
    DisassociateSourceGraphqlApiResponse (..),
    newDisassociateSourceGraphqlApiResponse,

    -- * Response Lenses
    disassociateSourceGraphqlApiResponse_sourceApiAssociationStatus,
    disassociateSourceGraphqlApiResponse_httpStatus,
  )
where

import Amazonka.AppSync.Types
import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import qualified Amazonka.Prelude as Prelude
import qualified Amazonka.Request as Request
import qualified Amazonka.Response as Response

-- | /See:/ 'newDisassociateSourceGraphqlApi' smart constructor.
data DisassociateSourceGraphqlApi = DisassociateSourceGraphqlApi'
  { -- | The identifier of the AppSync Merged API. This is generated by the
    -- AppSync service. In most cases, Merged APIs (especially in your account)
    -- only require the API ID value or ARN of the merged API. However, Merged
    -- APIs in other accounts (cross-account use cases) strictly require the
    -- full resource ARN of the merged API.
    mergedApiIdentifier :: Prelude.Text,
    -- | The ID generated by the AppSync service for the source API association.
    associationId :: Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'DisassociateSourceGraphqlApi' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'mergedApiIdentifier', 'disassociateSourceGraphqlApi_mergedApiIdentifier' - The identifier of the AppSync Merged API. This is generated by the
-- AppSync service. In most cases, Merged APIs (especially in your account)
-- only require the API ID value or ARN of the merged API. However, Merged
-- APIs in other accounts (cross-account use cases) strictly require the
-- full resource ARN of the merged API.
--
-- 'associationId', 'disassociateSourceGraphqlApi_associationId' - The ID generated by the AppSync service for the source API association.
newDisassociateSourceGraphqlApi ::
  -- | 'mergedApiIdentifier'
  Prelude.Text ->
  -- | 'associationId'
  Prelude.Text ->
  DisassociateSourceGraphqlApi
newDisassociateSourceGraphqlApi
  pMergedApiIdentifier_
  pAssociationId_ =
    DisassociateSourceGraphqlApi'
      { mergedApiIdentifier =
          pMergedApiIdentifier_,
        associationId = pAssociationId_
      }

-- | The identifier of the AppSync Merged API. This is generated by the
-- AppSync service. In most cases, Merged APIs (especially in your account)
-- only require the API ID value or ARN of the merged API. However, Merged
-- APIs in other accounts (cross-account use cases) strictly require the
-- full resource ARN of the merged API.
disassociateSourceGraphqlApi_mergedApiIdentifier :: Lens.Lens' DisassociateSourceGraphqlApi Prelude.Text
disassociateSourceGraphqlApi_mergedApiIdentifier = Lens.lens (\DisassociateSourceGraphqlApi' {mergedApiIdentifier} -> mergedApiIdentifier) (\s@DisassociateSourceGraphqlApi' {} a -> s {mergedApiIdentifier = a} :: DisassociateSourceGraphqlApi)

-- | The ID generated by the AppSync service for the source API association.
disassociateSourceGraphqlApi_associationId :: Lens.Lens' DisassociateSourceGraphqlApi Prelude.Text
disassociateSourceGraphqlApi_associationId = Lens.lens (\DisassociateSourceGraphqlApi' {associationId} -> associationId) (\s@DisassociateSourceGraphqlApi' {} a -> s {associationId = a} :: DisassociateSourceGraphqlApi)

instance Core.AWSRequest DisassociateSourceGraphqlApi where
  type
    AWSResponse DisassociateSourceGraphqlApi =
      DisassociateSourceGraphqlApiResponse
  request overrides =
    Request.delete (overrides defaultService)
  response =
    Response.receiveJSON
      ( \s h x ->
          DisassociateSourceGraphqlApiResponse'
            Prelude.<$> (x Data..?> "sourceApiAssociationStatus")
            Prelude.<*> (Prelude.pure (Prelude.fromEnum s))
      )

instance
  Prelude.Hashable
    DisassociateSourceGraphqlApi
  where
  hashWithSalt _salt DisassociateSourceGraphqlApi' {..} =
    _salt
      `Prelude.hashWithSalt` mergedApiIdentifier
      `Prelude.hashWithSalt` associationId

instance Prelude.NFData DisassociateSourceGraphqlApi where
  rnf DisassociateSourceGraphqlApi' {..} =
    Prelude.rnf mergedApiIdentifier
      `Prelude.seq` Prelude.rnf associationId

instance Data.ToHeaders DisassociateSourceGraphqlApi where
  toHeaders =
    Prelude.const
      ( Prelude.mconcat
          [ "Content-Type"
              Data.=# ( "application/x-amz-json-1.1" ::
                          Prelude.ByteString
                      )
          ]
      )

instance Data.ToPath DisassociateSourceGraphqlApi where
  toPath DisassociateSourceGraphqlApi' {..} =
    Prelude.mconcat
      [ "/v1/mergedApis/",
        Data.toBS mergedApiIdentifier,
        "/sourceApiAssociations/",
        Data.toBS associationId
      ]

instance Data.ToQuery DisassociateSourceGraphqlApi where
  toQuery = Prelude.const Prelude.mempty

-- | /See:/ 'newDisassociateSourceGraphqlApiResponse' smart constructor.
data DisassociateSourceGraphqlApiResponse = DisassociateSourceGraphqlApiResponse'
  { -- | The state of the source API association.
    sourceApiAssociationStatus :: Prelude.Maybe SourceApiAssociationStatus,
    -- | The response's http status code.
    httpStatus :: Prelude.Int
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'DisassociateSourceGraphqlApiResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'sourceApiAssociationStatus', 'disassociateSourceGraphqlApiResponse_sourceApiAssociationStatus' - The state of the source API association.
--
-- 'httpStatus', 'disassociateSourceGraphqlApiResponse_httpStatus' - The response's http status code.
newDisassociateSourceGraphqlApiResponse ::
  -- | 'httpStatus'
  Prelude.Int ->
  DisassociateSourceGraphqlApiResponse
newDisassociateSourceGraphqlApiResponse pHttpStatus_ =
  DisassociateSourceGraphqlApiResponse'
    { sourceApiAssociationStatus =
        Prelude.Nothing,
      httpStatus = pHttpStatus_
    }

-- | The state of the source API association.
disassociateSourceGraphqlApiResponse_sourceApiAssociationStatus :: Lens.Lens' DisassociateSourceGraphqlApiResponse (Prelude.Maybe SourceApiAssociationStatus)
disassociateSourceGraphqlApiResponse_sourceApiAssociationStatus = Lens.lens (\DisassociateSourceGraphqlApiResponse' {sourceApiAssociationStatus} -> sourceApiAssociationStatus) (\s@DisassociateSourceGraphqlApiResponse' {} a -> s {sourceApiAssociationStatus = a} :: DisassociateSourceGraphqlApiResponse)

-- | The response's http status code.
disassociateSourceGraphqlApiResponse_httpStatus :: Lens.Lens' DisassociateSourceGraphqlApiResponse Prelude.Int
disassociateSourceGraphqlApiResponse_httpStatus = Lens.lens (\DisassociateSourceGraphqlApiResponse' {httpStatus} -> httpStatus) (\s@DisassociateSourceGraphqlApiResponse' {} a -> s {httpStatus = a} :: DisassociateSourceGraphqlApiResponse)

instance
  Prelude.NFData
    DisassociateSourceGraphqlApiResponse
  where
  rnf DisassociateSourceGraphqlApiResponse' {..} =
    Prelude.rnf sourceApiAssociationStatus
      `Prelude.seq` Prelude.rnf httpStatus
