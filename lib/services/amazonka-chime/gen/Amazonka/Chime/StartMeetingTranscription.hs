{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.Chime.StartMeetingTranscription
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Starts transcription for the specified @meetingId@. For more
-- information, refer to
-- <https://docs.aws.amazon.com/chime-sdk/latest/dg/meeting-transcription.html Using Amazon Chime SDK live transcription>
-- in the /Amazon Chime SDK Developer Guide/.
--
-- If you specify an invalid configuration, a @TranscriptFailed@ event will
-- be sent with the contents of the @BadRequestException@ generated by
-- Amazon Transcribe. For more information on each parameter and which
-- combinations are valid, refer to the
-- <https://docs.aws.amazon.com/transcribe/latest/APIReference/API_streaming_StartStreamTranscription.html StartStreamTranscription>
-- API in the /Amazon Transcribe Developer Guide/.
--
-- Amazon Chime SDK live transcription is powered by Amazon Transcribe. Use
-- of Amazon Transcribe is subject to the
-- <https://aws.amazon.com/service-terms/ AWS Service Terms>, including the
-- terms specific to the AWS Machine Learning and Artificial Intelligence
-- Services.
module Amazonka.Chime.StartMeetingTranscription
  ( -- * Creating a Request
    StartMeetingTranscription (..),
    newStartMeetingTranscription,

    -- * Request Lenses
    startMeetingTranscription_meetingId,
    startMeetingTranscription_transcriptionConfiguration,

    -- * Destructuring the Response
    StartMeetingTranscriptionResponse (..),
    newStartMeetingTranscriptionResponse,

    -- * Response Lenses
    startMeetingTranscriptionResponse_httpStatus,
  )
where

import Amazonka.Chime.Types
import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import qualified Amazonka.Prelude as Prelude
import qualified Amazonka.Request as Request
import qualified Amazonka.Response as Response

-- | /See:/ 'newStartMeetingTranscription' smart constructor.
data StartMeetingTranscription = StartMeetingTranscription'
  { -- | The unique ID of the meeting being transcribed.
    meetingId :: Prelude.Text,
    -- | The configuration for the current transcription operation. Must contain
    -- @EngineTranscribeSettings@ or @EngineTranscribeMedicalSettings@.
    transcriptionConfiguration :: TranscriptionConfiguration
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'StartMeetingTranscription' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'meetingId', 'startMeetingTranscription_meetingId' - The unique ID of the meeting being transcribed.
--
-- 'transcriptionConfiguration', 'startMeetingTranscription_transcriptionConfiguration' - The configuration for the current transcription operation. Must contain
-- @EngineTranscribeSettings@ or @EngineTranscribeMedicalSettings@.
newStartMeetingTranscription ::
  -- | 'meetingId'
  Prelude.Text ->
  -- | 'transcriptionConfiguration'
  TranscriptionConfiguration ->
  StartMeetingTranscription
newStartMeetingTranscription
  pMeetingId_
  pTranscriptionConfiguration_ =
    StartMeetingTranscription'
      { meetingId = pMeetingId_,
        transcriptionConfiguration =
          pTranscriptionConfiguration_
      }

-- | The unique ID of the meeting being transcribed.
startMeetingTranscription_meetingId :: Lens.Lens' StartMeetingTranscription Prelude.Text
startMeetingTranscription_meetingId = Lens.lens (\StartMeetingTranscription' {meetingId} -> meetingId) (\s@StartMeetingTranscription' {} a -> s {meetingId = a} :: StartMeetingTranscription)

-- | The configuration for the current transcription operation. Must contain
-- @EngineTranscribeSettings@ or @EngineTranscribeMedicalSettings@.
startMeetingTranscription_transcriptionConfiguration :: Lens.Lens' StartMeetingTranscription TranscriptionConfiguration
startMeetingTranscription_transcriptionConfiguration = Lens.lens (\StartMeetingTranscription' {transcriptionConfiguration} -> transcriptionConfiguration) (\s@StartMeetingTranscription' {} a -> s {transcriptionConfiguration = a} :: StartMeetingTranscription)

instance Core.AWSRequest StartMeetingTranscription where
  type
    AWSResponse StartMeetingTranscription =
      StartMeetingTranscriptionResponse
  request overrides =
    Request.postJSON (overrides defaultService)
  response =
    Response.receiveEmpty
      ( \s h x ->
          StartMeetingTranscriptionResponse'
            Prelude.<$> (Prelude.pure (Prelude.fromEnum s))
      )

instance Prelude.Hashable StartMeetingTranscription where
  hashWithSalt _salt StartMeetingTranscription' {..} =
    _salt
      `Prelude.hashWithSalt` meetingId
      `Prelude.hashWithSalt` transcriptionConfiguration

instance Prelude.NFData StartMeetingTranscription where
  rnf StartMeetingTranscription' {..} =
    Prelude.rnf meetingId
      `Prelude.seq` Prelude.rnf transcriptionConfiguration

instance Data.ToHeaders StartMeetingTranscription where
  toHeaders = Prelude.const Prelude.mempty

instance Data.ToJSON StartMeetingTranscription where
  toJSON StartMeetingTranscription' {..} =
    Data.object
      ( Prelude.catMaybes
          [ Prelude.Just
              ( "TranscriptionConfiguration"
                  Data..= transcriptionConfiguration
              )
          ]
      )

instance Data.ToPath StartMeetingTranscription where
  toPath StartMeetingTranscription' {..} =
    Prelude.mconcat
      ["/meetings/", Data.toBS meetingId, "/transcription"]

instance Data.ToQuery StartMeetingTranscription where
  toQuery =
    Prelude.const (Prelude.mconcat ["operation=start"])

-- | /See:/ 'newStartMeetingTranscriptionResponse' smart constructor.
data StartMeetingTranscriptionResponse = StartMeetingTranscriptionResponse'
  { -- | The response's http status code.
    httpStatus :: Prelude.Int
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'StartMeetingTranscriptionResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'httpStatus', 'startMeetingTranscriptionResponse_httpStatus' - The response's http status code.
newStartMeetingTranscriptionResponse ::
  -- | 'httpStatus'
  Prelude.Int ->
  StartMeetingTranscriptionResponse
newStartMeetingTranscriptionResponse pHttpStatus_ =
  StartMeetingTranscriptionResponse'
    { httpStatus =
        pHttpStatus_
    }

-- | The response's http status code.
startMeetingTranscriptionResponse_httpStatus :: Lens.Lens' StartMeetingTranscriptionResponse Prelude.Int
startMeetingTranscriptionResponse_httpStatus = Lens.lens (\StartMeetingTranscriptionResponse' {httpStatus} -> httpStatus) (\s@StartMeetingTranscriptionResponse' {} a -> s {httpStatus = a} :: StartMeetingTranscriptionResponse)

instance
  Prelude.NFData
    StartMeetingTranscriptionResponse
  where
  rnf StartMeetingTranscriptionResponse' {..} =
    Prelude.rnf httpStatus
