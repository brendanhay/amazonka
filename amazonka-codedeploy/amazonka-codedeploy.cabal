name:                  amazonka-codedeploy
version:               1.0.2
synopsis:              Amazon CodeDeploy SDK.
homepage:              https://github.com/brendanhay/amazonka
license:               OtherLicense
license-file:          LICENSE
author:                Brendan Hay
maintainer:            Brendan Hay <brendan.g.hay@gmail.com>
copyright:             Copyright (c) 2013-2015 Brendan Hay
category:              Network, AWS, Cloud, Distributed Computing
build-type:            Simple
extra-source-files:    README.md
cabal-version:         >= 1.10

description:
    AWS CodeDeploy __Overview__

    This is the AWS CodeDeploy API Reference. This guide provides
    descriptions of the AWS CodeDeploy APIs. For additional information, see
    the
    <http://docs.aws.amazon.com/codedeploy/latest/userguide AWS CodeDeploy User Guide>.

    __Using the APIs__

    You can use the AWS CodeDeploy APIs to work with the following items:

    -   Applications are unique identifiers that AWS CodeDeploy uses to
        ensure that the correct combinations of revisions, deployment
        configurations, and deployment groups are being referenced during
        deployments.

        You can use the AWS CodeDeploy APIs to create, delete, get, list,
        and update applications.

    -   Deployment configurations are sets of deployment rules and
        deployment success and failure conditions that AWS CodeDeploy uses
        during deployments.

        You can use the AWS CodeDeploy APIs to create, delete, get, and list
        deployment configurations.

    -   Deployment groups are groups of instances to which application
        revisions can be deployed.

        You can use the AWS CodeDeploy APIs to create, delete, get, list,
        and update deployment groups.

    -   Instances represent Amazon EC2 instances to which application
        revisions are deployed. Instances are identified by their Amazon EC2
        tags or Auto Scaling group names. Instances belong to deployment
        groups.

        You can use the AWS CodeDeploy APIs to get and list instances.

    -   Deployments represent the process of deploying revisions to
        instances.

        You can use the AWS CodeDeploy APIs to create, get, list, and stop
        deployments.

    -   Application revisions are archive files that are stored in Amazon S3
        buckets or GitHub repositories. These revisions contain source
        content (such as source code, web pages, executable files, any
        deployment scripts, and similar) along with an Application
        Specification file (AppSpec file). (The AppSpec file is unique to
        AWS CodeDeploy; it defines a series of deployment actions that you
        want AWS CodeDeploy to execute.) An application revision is uniquely
        identified by its Amazon S3 object key and its ETag, version, or
        both (for application revisions that are stored in Amazon S3
        buckets) or by its repository name and commit ID (for applications
        revisions that are stored in GitHub repositories). Application
        revisions are deployed through deployment groups.

        You can use the AWS CodeDeploy APIs to get, list, and register
        application revisions.
    .
    The types from this library are intended to be used with
    <http://hackage.haskell.org/package/amazonka amazonka>, which provides
    mechanisms for specifying AuthN/AuthZ information and sending requests.
    .
    Use of lenses is required for constructing and manipulating types.
    This is due to the amount of nesting of AWS types and transparency regarding
    de/serialisation into more palatable Haskell values.
    The provided lenses should be compatible with any of the major lens libraries
    such as <http://hackage.haskell.org/package/lens lens> or
    <http://hackage.haskell.org/package/lens-family-core lens-family-core>.
    .
    See "Network.AWS.CodeDeploy" and the <http://docs.aws.amazon.com/codedeploy/latest/APIReference/Welcome.html AWS API Reference>
    to get started.

source-repository head
    type:     git
    location: git://github.com/brendanhay/amazonka.git

library
    default-language:  Haskell2010
    hs-source-dirs:    src gen

    ghc-options:       -Wall

    exposed-modules:
          Network.AWS.CodeDeploy
        , Network.AWS.CodeDeploy.AddTagsToOnPremisesInstances
        , Network.AWS.CodeDeploy.BatchGetApplications
        , Network.AWS.CodeDeploy.BatchGetDeployments
        , Network.AWS.CodeDeploy.BatchGetOnPremisesInstances
        , Network.AWS.CodeDeploy.CreateApplication
        , Network.AWS.CodeDeploy.CreateDeployment
        , Network.AWS.CodeDeploy.CreateDeploymentConfig
        , Network.AWS.CodeDeploy.CreateDeploymentGroup
        , Network.AWS.CodeDeploy.DeleteApplication
        , Network.AWS.CodeDeploy.DeleteDeploymentConfig
        , Network.AWS.CodeDeploy.DeleteDeploymentGroup
        , Network.AWS.CodeDeploy.DeregisterOnPremisesInstance
        , Network.AWS.CodeDeploy.GetApplication
        , Network.AWS.CodeDeploy.GetApplicationRevision
        , Network.AWS.CodeDeploy.GetDeployment
        , Network.AWS.CodeDeploy.GetDeploymentConfig
        , Network.AWS.CodeDeploy.GetDeploymentGroup
        , Network.AWS.CodeDeploy.GetDeploymentInstance
        , Network.AWS.CodeDeploy.GetOnPremisesInstance
        , Network.AWS.CodeDeploy.ListApplicationRevisions
        , Network.AWS.CodeDeploy.ListApplications
        , Network.AWS.CodeDeploy.ListDeploymentConfigs
        , Network.AWS.CodeDeploy.ListDeploymentGroups
        , Network.AWS.CodeDeploy.ListDeploymentInstances
        , Network.AWS.CodeDeploy.ListDeployments
        , Network.AWS.CodeDeploy.ListOnPremisesInstances
        , Network.AWS.CodeDeploy.RegisterApplicationRevision
        , Network.AWS.CodeDeploy.RegisterOnPremisesInstance
        , Network.AWS.CodeDeploy.RemoveTagsFromOnPremisesInstances
        , Network.AWS.CodeDeploy.StopDeployment
        , Network.AWS.CodeDeploy.Types
        , Network.AWS.CodeDeploy.UpdateApplication
        , Network.AWS.CodeDeploy.UpdateDeploymentGroup
        , Network.AWS.CodeDeploy.Waiters

    other-modules:
          Network.AWS.CodeDeploy.Types.Product
        , Network.AWS.CodeDeploy.Types.Sum

    build-depends:
          amazonka-core == 1.0.2.*
        , base          >= 4.7     && < 5

test-suite amazonka-codedeploy-test
    type:              exitcode-stdio-1.0
    default-language:  Haskell2010
    hs-source-dirs:    test
    main-is:           Main.hs

    ghc-options:       -Wall -threaded

    -- This is not comprehensive if modules have manually been added.
    -- It exists to ensure cabal 'somewhat' detects test module changes.
    other-modules:
          Test.AWS.CodeDeploy
        , Test.AWS.Gen.CodeDeploy
        , Test.AWS.CodeDeploy.Internal

    build-depends:
          amazonka-core == 1.0.2
        , amazonka-test == 1.0.2
        , amazonka-codedeploy == 1.0.2
        , base
        , bytestring
        , lens
        , tasty
        , tasty-hunit
        , text
        , time
        , unordered-containers
