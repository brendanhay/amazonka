{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.CloudFormation.Types.StackEvent
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.CloudFormation.Types.StackEvent where

import Network.AWS.CloudFormation.Types.ResourceStatus
import qualified Network.AWS.Core as Core
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Prelude

-- | The StackEvent data type.
--
-- /See:/ 'newStackEvent' smart constructor.
data StackEvent = StackEvent'
  { -- | BLOB of the properties used to create the resource.
    resourceProperties :: Prelude.Maybe Prelude.Text,
    -- | The name or unique identifier associated with the physical instance of
    -- the resource.
    physicalResourceId :: Prelude.Maybe Prelude.Text,
    -- | Type of resource. (For more information, go to
    -- <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html AWS Resource Types Reference>
    -- in the AWS CloudFormation User Guide.)
    resourceType :: Prelude.Maybe Prelude.Text,
    -- | Success\/failure message associated with the resource.
    resourceStatusReason :: Prelude.Maybe Prelude.Text,
    -- | The logical name of the resource specified in the template.
    logicalResourceId :: Prelude.Maybe Prelude.Text,
    -- | Current status of the resource.
    resourceStatus :: Prelude.Maybe ResourceStatus,
    -- | The token passed to the operation that generated this event.
    --
    -- All events triggered by a given stack operation are assigned the same
    -- client request token, which you can use to track operations. For
    -- example, if you execute a @CreateStack@ operation with the token
    -- @token1@, then all the @StackEvents@ generated by that operation will
    -- have @ClientRequestToken@ set as @token1@.
    --
    -- In the console, stack operations display the client request token on the
    -- Events tab. Stack operations that are initiated from the console use the
    -- token format /Console-StackOperation-ID/, which helps you easily
    -- identify the stack operation . For example, if you create a stack using
    -- the console, each stack event would be assigned the same token in the
    -- following format:
    -- @Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002@.
    clientRequestToken :: Prelude.Maybe Prelude.Text,
    -- | The unique ID name of the instance of the stack.
    stackId :: Prelude.Text,
    -- | The unique ID of this event.
    eventId :: Prelude.Text,
    -- | The name associated with a stack.
    stackName :: Prelude.Text,
    -- | Time the status was updated.
    timestamp :: Core.ISO8601
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'StackEvent' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'resourceProperties', 'stackEvent_resourceProperties' - BLOB of the properties used to create the resource.
--
-- 'physicalResourceId', 'stackEvent_physicalResourceId' - The name or unique identifier associated with the physical instance of
-- the resource.
--
-- 'resourceType', 'stackEvent_resourceType' - Type of resource. (For more information, go to
-- <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html AWS Resource Types Reference>
-- in the AWS CloudFormation User Guide.)
--
-- 'resourceStatusReason', 'stackEvent_resourceStatusReason' - Success\/failure message associated with the resource.
--
-- 'logicalResourceId', 'stackEvent_logicalResourceId' - The logical name of the resource specified in the template.
--
-- 'resourceStatus', 'stackEvent_resourceStatus' - Current status of the resource.
--
-- 'clientRequestToken', 'stackEvent_clientRequestToken' - The token passed to the operation that generated this event.
--
-- All events triggered by a given stack operation are assigned the same
-- client request token, which you can use to track operations. For
-- example, if you execute a @CreateStack@ operation with the token
-- @token1@, then all the @StackEvents@ generated by that operation will
-- have @ClientRequestToken@ set as @token1@.
--
-- In the console, stack operations display the client request token on the
-- Events tab. Stack operations that are initiated from the console use the
-- token format /Console-StackOperation-ID/, which helps you easily
-- identify the stack operation . For example, if you create a stack using
-- the console, each stack event would be assigned the same token in the
-- following format:
-- @Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002@.
--
-- 'stackId', 'stackEvent_stackId' - The unique ID name of the instance of the stack.
--
-- 'eventId', 'stackEvent_eventId' - The unique ID of this event.
--
-- 'stackName', 'stackEvent_stackName' - The name associated with a stack.
--
-- 'timestamp', 'stackEvent_timestamp' - Time the status was updated.
newStackEvent ::
  -- | 'stackId'
  Prelude.Text ->
  -- | 'eventId'
  Prelude.Text ->
  -- | 'stackName'
  Prelude.Text ->
  -- | 'timestamp'
  Prelude.UTCTime ->
  StackEvent
newStackEvent
  pStackId_
  pEventId_
  pStackName_
  pTimestamp_ =
    StackEvent'
      { resourceProperties = Prelude.Nothing,
        physicalResourceId = Prelude.Nothing,
        resourceType = Prelude.Nothing,
        resourceStatusReason = Prelude.Nothing,
        logicalResourceId = Prelude.Nothing,
        resourceStatus = Prelude.Nothing,
        clientRequestToken = Prelude.Nothing,
        stackId = pStackId_,
        eventId = pEventId_,
        stackName = pStackName_,
        timestamp = Core._Time Lens.# pTimestamp_
      }

-- | BLOB of the properties used to create the resource.
stackEvent_resourceProperties :: Lens.Lens' StackEvent (Prelude.Maybe Prelude.Text)
stackEvent_resourceProperties = Lens.lens (\StackEvent' {resourceProperties} -> resourceProperties) (\s@StackEvent' {} a -> s {resourceProperties = a} :: StackEvent)

-- | The name or unique identifier associated with the physical instance of
-- the resource.
stackEvent_physicalResourceId :: Lens.Lens' StackEvent (Prelude.Maybe Prelude.Text)
stackEvent_physicalResourceId = Lens.lens (\StackEvent' {physicalResourceId} -> physicalResourceId) (\s@StackEvent' {} a -> s {physicalResourceId = a} :: StackEvent)

-- | Type of resource. (For more information, go to
-- <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html AWS Resource Types Reference>
-- in the AWS CloudFormation User Guide.)
stackEvent_resourceType :: Lens.Lens' StackEvent (Prelude.Maybe Prelude.Text)
stackEvent_resourceType = Lens.lens (\StackEvent' {resourceType} -> resourceType) (\s@StackEvent' {} a -> s {resourceType = a} :: StackEvent)

-- | Success\/failure message associated with the resource.
stackEvent_resourceStatusReason :: Lens.Lens' StackEvent (Prelude.Maybe Prelude.Text)
stackEvent_resourceStatusReason = Lens.lens (\StackEvent' {resourceStatusReason} -> resourceStatusReason) (\s@StackEvent' {} a -> s {resourceStatusReason = a} :: StackEvent)

-- | The logical name of the resource specified in the template.
stackEvent_logicalResourceId :: Lens.Lens' StackEvent (Prelude.Maybe Prelude.Text)
stackEvent_logicalResourceId = Lens.lens (\StackEvent' {logicalResourceId} -> logicalResourceId) (\s@StackEvent' {} a -> s {logicalResourceId = a} :: StackEvent)

-- | Current status of the resource.
stackEvent_resourceStatus :: Lens.Lens' StackEvent (Prelude.Maybe ResourceStatus)
stackEvent_resourceStatus = Lens.lens (\StackEvent' {resourceStatus} -> resourceStatus) (\s@StackEvent' {} a -> s {resourceStatus = a} :: StackEvent)

-- | The token passed to the operation that generated this event.
--
-- All events triggered by a given stack operation are assigned the same
-- client request token, which you can use to track operations. For
-- example, if you execute a @CreateStack@ operation with the token
-- @token1@, then all the @StackEvents@ generated by that operation will
-- have @ClientRequestToken@ set as @token1@.
--
-- In the console, stack operations display the client request token on the
-- Events tab. Stack operations that are initiated from the console use the
-- token format /Console-StackOperation-ID/, which helps you easily
-- identify the stack operation . For example, if you create a stack using
-- the console, each stack event would be assigned the same token in the
-- following format:
-- @Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002@.
stackEvent_clientRequestToken :: Lens.Lens' StackEvent (Prelude.Maybe Prelude.Text)
stackEvent_clientRequestToken = Lens.lens (\StackEvent' {clientRequestToken} -> clientRequestToken) (\s@StackEvent' {} a -> s {clientRequestToken = a} :: StackEvent)

-- | The unique ID name of the instance of the stack.
stackEvent_stackId :: Lens.Lens' StackEvent Prelude.Text
stackEvent_stackId = Lens.lens (\StackEvent' {stackId} -> stackId) (\s@StackEvent' {} a -> s {stackId = a} :: StackEvent)

-- | The unique ID of this event.
stackEvent_eventId :: Lens.Lens' StackEvent Prelude.Text
stackEvent_eventId = Lens.lens (\StackEvent' {eventId} -> eventId) (\s@StackEvent' {} a -> s {eventId = a} :: StackEvent)

-- | The name associated with a stack.
stackEvent_stackName :: Lens.Lens' StackEvent Prelude.Text
stackEvent_stackName = Lens.lens (\StackEvent' {stackName} -> stackName) (\s@StackEvent' {} a -> s {stackName = a} :: StackEvent)

-- | Time the status was updated.
stackEvent_timestamp :: Lens.Lens' StackEvent Prelude.UTCTime
stackEvent_timestamp = Lens.lens (\StackEvent' {timestamp} -> timestamp) (\s@StackEvent' {} a -> s {timestamp = a} :: StackEvent) Prelude.. Core._Time

instance Core.FromXML StackEvent where
  parseXML x =
    StackEvent'
      Prelude.<$> (x Core..@? "ResourceProperties")
      Prelude.<*> (x Core..@? "PhysicalResourceId")
      Prelude.<*> (x Core..@? "ResourceType")
      Prelude.<*> (x Core..@? "ResourceStatusReason")
      Prelude.<*> (x Core..@? "LogicalResourceId")
      Prelude.<*> (x Core..@? "ResourceStatus")
      Prelude.<*> (x Core..@? "ClientRequestToken")
      Prelude.<*> (x Core..@ "StackId")
      Prelude.<*> (x Core..@ "EventId")
      Prelude.<*> (x Core..@ "StackName")
      Prelude.<*> (x Core..@ "Timestamp")

instance Prelude.Hashable StackEvent

instance Prelude.NFData StackEvent
