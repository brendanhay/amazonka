{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.AppSync.Types.SourceApiAssociation
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Amazonka.AppSync.Types.SourceApiAssociation where

import Amazonka.AppSync.Types.SourceApiAssociationConfig
import Amazonka.AppSync.Types.SourceApiAssociationStatus
import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import qualified Amazonka.Prelude as Prelude

-- | Describes the configuration of a source API. A source API is a GraphQL
-- API that is linked to a merged API. There can be multiple source APIs
-- attached to each merged API. When linked to a merged API, the source
-- API\'s schema, data sources, and resolvers will be combined with other
-- linked source API data to form a new, singular API.
--
-- Source APIs can originate from your account or from other accounts via
-- Amazon Web Services Resource Access Manager. For more information about
-- sharing resources from other accounts, see
-- <https://docs.aws.amazon.com/ram/latest/userguide/what-is.html What is Amazon Web Services Resource Access Manager?>
-- in the /Amazon Web Services Resource Access Manager/ guide.
--
-- /See:/ 'newSourceApiAssociation' smart constructor.
data SourceApiAssociation = SourceApiAssociation'
  { -- | The Amazon Resource Name (ARN) of the source API association.
    associationArn :: Prelude.Maybe Prelude.Text,
    -- | The ID generated by the AppSync service for the source API association.
    associationId :: Prelude.Maybe Prelude.Text,
    -- | The description field.
    description :: Prelude.Maybe Prelude.Text,
    -- | The datetime value of the last successful merge of the source API
    -- association. The result will be in UTC format and your local time zone.
    lastSuccessfulMergeDate :: Prelude.Maybe Data.POSIX,
    -- | The Amazon Resource Name (ARN) of the AppSync Merged API.
    mergedApiArn :: Prelude.Maybe Prelude.Text,
    -- | The ID of the AppSync Merged API.
    mergedApiId :: Prelude.Maybe Prelude.Text,
    -- | The Amazon Resource Name (ARN) of the AppSync source API.
    sourceApiArn :: Prelude.Maybe Prelude.Text,
    -- | The @SourceApiAssociationConfig@ object data.
    sourceApiAssociationConfig :: Prelude.Maybe SourceApiAssociationConfig,
    -- | The state of the source API association.
    sourceApiAssociationStatus :: Prelude.Maybe SourceApiAssociationStatus,
    -- | The detailed message related to the current state of the source API
    -- association.
    sourceApiAssociationStatusDetail :: Prelude.Maybe Prelude.Text,
    -- | The ID of the AppSync source API.
    sourceApiId :: Prelude.Maybe Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'SourceApiAssociation' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'associationArn', 'sourceApiAssociation_associationArn' - The Amazon Resource Name (ARN) of the source API association.
--
-- 'associationId', 'sourceApiAssociation_associationId' - The ID generated by the AppSync service for the source API association.
--
-- 'description', 'sourceApiAssociation_description' - The description field.
--
-- 'lastSuccessfulMergeDate', 'sourceApiAssociation_lastSuccessfulMergeDate' - The datetime value of the last successful merge of the source API
-- association. The result will be in UTC format and your local time zone.
--
-- 'mergedApiArn', 'sourceApiAssociation_mergedApiArn' - The Amazon Resource Name (ARN) of the AppSync Merged API.
--
-- 'mergedApiId', 'sourceApiAssociation_mergedApiId' - The ID of the AppSync Merged API.
--
-- 'sourceApiArn', 'sourceApiAssociation_sourceApiArn' - The Amazon Resource Name (ARN) of the AppSync source API.
--
-- 'sourceApiAssociationConfig', 'sourceApiAssociation_sourceApiAssociationConfig' - The @SourceApiAssociationConfig@ object data.
--
-- 'sourceApiAssociationStatus', 'sourceApiAssociation_sourceApiAssociationStatus' - The state of the source API association.
--
-- 'sourceApiAssociationStatusDetail', 'sourceApiAssociation_sourceApiAssociationStatusDetail' - The detailed message related to the current state of the source API
-- association.
--
-- 'sourceApiId', 'sourceApiAssociation_sourceApiId' - The ID of the AppSync source API.
newSourceApiAssociation ::
  SourceApiAssociation
newSourceApiAssociation =
  SourceApiAssociation'
    { associationArn =
        Prelude.Nothing,
      associationId = Prelude.Nothing,
      description = Prelude.Nothing,
      lastSuccessfulMergeDate = Prelude.Nothing,
      mergedApiArn = Prelude.Nothing,
      mergedApiId = Prelude.Nothing,
      sourceApiArn = Prelude.Nothing,
      sourceApiAssociationConfig = Prelude.Nothing,
      sourceApiAssociationStatus = Prelude.Nothing,
      sourceApiAssociationStatusDetail = Prelude.Nothing,
      sourceApiId = Prelude.Nothing
    }

-- | The Amazon Resource Name (ARN) of the source API association.
sourceApiAssociation_associationArn :: Lens.Lens' SourceApiAssociation (Prelude.Maybe Prelude.Text)
sourceApiAssociation_associationArn = Lens.lens (\SourceApiAssociation' {associationArn} -> associationArn) (\s@SourceApiAssociation' {} a -> s {associationArn = a} :: SourceApiAssociation)

-- | The ID generated by the AppSync service for the source API association.
sourceApiAssociation_associationId :: Lens.Lens' SourceApiAssociation (Prelude.Maybe Prelude.Text)
sourceApiAssociation_associationId = Lens.lens (\SourceApiAssociation' {associationId} -> associationId) (\s@SourceApiAssociation' {} a -> s {associationId = a} :: SourceApiAssociation)

-- | The description field.
sourceApiAssociation_description :: Lens.Lens' SourceApiAssociation (Prelude.Maybe Prelude.Text)
sourceApiAssociation_description = Lens.lens (\SourceApiAssociation' {description} -> description) (\s@SourceApiAssociation' {} a -> s {description = a} :: SourceApiAssociation)

-- | The datetime value of the last successful merge of the source API
-- association. The result will be in UTC format and your local time zone.
sourceApiAssociation_lastSuccessfulMergeDate :: Lens.Lens' SourceApiAssociation (Prelude.Maybe Prelude.UTCTime)
sourceApiAssociation_lastSuccessfulMergeDate = Lens.lens (\SourceApiAssociation' {lastSuccessfulMergeDate} -> lastSuccessfulMergeDate) (\s@SourceApiAssociation' {} a -> s {lastSuccessfulMergeDate = a} :: SourceApiAssociation) Prelude.. Lens.mapping Data._Time

-- | The Amazon Resource Name (ARN) of the AppSync Merged API.
sourceApiAssociation_mergedApiArn :: Lens.Lens' SourceApiAssociation (Prelude.Maybe Prelude.Text)
sourceApiAssociation_mergedApiArn = Lens.lens (\SourceApiAssociation' {mergedApiArn} -> mergedApiArn) (\s@SourceApiAssociation' {} a -> s {mergedApiArn = a} :: SourceApiAssociation)

-- | The ID of the AppSync Merged API.
sourceApiAssociation_mergedApiId :: Lens.Lens' SourceApiAssociation (Prelude.Maybe Prelude.Text)
sourceApiAssociation_mergedApiId = Lens.lens (\SourceApiAssociation' {mergedApiId} -> mergedApiId) (\s@SourceApiAssociation' {} a -> s {mergedApiId = a} :: SourceApiAssociation)

-- | The Amazon Resource Name (ARN) of the AppSync source API.
sourceApiAssociation_sourceApiArn :: Lens.Lens' SourceApiAssociation (Prelude.Maybe Prelude.Text)
sourceApiAssociation_sourceApiArn = Lens.lens (\SourceApiAssociation' {sourceApiArn} -> sourceApiArn) (\s@SourceApiAssociation' {} a -> s {sourceApiArn = a} :: SourceApiAssociation)

-- | The @SourceApiAssociationConfig@ object data.
sourceApiAssociation_sourceApiAssociationConfig :: Lens.Lens' SourceApiAssociation (Prelude.Maybe SourceApiAssociationConfig)
sourceApiAssociation_sourceApiAssociationConfig = Lens.lens (\SourceApiAssociation' {sourceApiAssociationConfig} -> sourceApiAssociationConfig) (\s@SourceApiAssociation' {} a -> s {sourceApiAssociationConfig = a} :: SourceApiAssociation)

-- | The state of the source API association.
sourceApiAssociation_sourceApiAssociationStatus :: Lens.Lens' SourceApiAssociation (Prelude.Maybe SourceApiAssociationStatus)
sourceApiAssociation_sourceApiAssociationStatus = Lens.lens (\SourceApiAssociation' {sourceApiAssociationStatus} -> sourceApiAssociationStatus) (\s@SourceApiAssociation' {} a -> s {sourceApiAssociationStatus = a} :: SourceApiAssociation)

-- | The detailed message related to the current state of the source API
-- association.
sourceApiAssociation_sourceApiAssociationStatusDetail :: Lens.Lens' SourceApiAssociation (Prelude.Maybe Prelude.Text)
sourceApiAssociation_sourceApiAssociationStatusDetail = Lens.lens (\SourceApiAssociation' {sourceApiAssociationStatusDetail} -> sourceApiAssociationStatusDetail) (\s@SourceApiAssociation' {} a -> s {sourceApiAssociationStatusDetail = a} :: SourceApiAssociation)

-- | The ID of the AppSync source API.
sourceApiAssociation_sourceApiId :: Lens.Lens' SourceApiAssociation (Prelude.Maybe Prelude.Text)
sourceApiAssociation_sourceApiId = Lens.lens (\SourceApiAssociation' {sourceApiId} -> sourceApiId) (\s@SourceApiAssociation' {} a -> s {sourceApiId = a} :: SourceApiAssociation)

instance Data.FromJSON SourceApiAssociation where
  parseJSON =
    Data.withObject
      "SourceApiAssociation"
      ( \x ->
          SourceApiAssociation'
            Prelude.<$> (x Data..:? "associationArn")
            Prelude.<*> (x Data..:? "associationId")
            Prelude.<*> (x Data..:? "description")
            Prelude.<*> (x Data..:? "lastSuccessfulMergeDate")
            Prelude.<*> (x Data..:? "mergedApiArn")
            Prelude.<*> (x Data..:? "mergedApiId")
            Prelude.<*> (x Data..:? "sourceApiArn")
            Prelude.<*> (x Data..:? "sourceApiAssociationConfig")
            Prelude.<*> (x Data..:? "sourceApiAssociationStatus")
            Prelude.<*> (x Data..:? "sourceApiAssociationStatusDetail")
            Prelude.<*> (x Data..:? "sourceApiId")
      )

instance Prelude.Hashable SourceApiAssociation where
  hashWithSalt _salt SourceApiAssociation' {..} =
    _salt
      `Prelude.hashWithSalt` associationArn
      `Prelude.hashWithSalt` associationId
      `Prelude.hashWithSalt` description
      `Prelude.hashWithSalt` lastSuccessfulMergeDate
      `Prelude.hashWithSalt` mergedApiArn
      `Prelude.hashWithSalt` mergedApiId
      `Prelude.hashWithSalt` sourceApiArn
      `Prelude.hashWithSalt` sourceApiAssociationConfig
      `Prelude.hashWithSalt` sourceApiAssociationStatus
      `Prelude.hashWithSalt` sourceApiAssociationStatusDetail
      `Prelude.hashWithSalt` sourceApiId

instance Prelude.NFData SourceApiAssociation where
  rnf SourceApiAssociation' {..} =
    Prelude.rnf associationArn
      `Prelude.seq` Prelude.rnf associationId
      `Prelude.seq` Prelude.rnf description
      `Prelude.seq` Prelude.rnf lastSuccessfulMergeDate
      `Prelude.seq` Prelude.rnf mergedApiArn
      `Prelude.seq` Prelude.rnf mergedApiId
      `Prelude.seq` Prelude.rnf sourceApiArn
      `Prelude.seq` Prelude.rnf sourceApiAssociationConfig
      `Prelude.seq` Prelude.rnf sourceApiAssociationStatus
      `Prelude.seq` Prelude.rnf sourceApiAssociationStatusDetail
      `Prelude.seq` Prelude.rnf sourceApiId
