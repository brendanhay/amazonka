{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.SWF.RespondActivityTaskCompleted
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Used by workers to tell the service that the ActivityTask identified by
-- the @taskToken@ completed successfully with a @result@ (if provided).
-- The @result@ appears in the @ActivityTaskCompleted@ event in the
-- workflow history.
--
-- If the requested task doesn\'t complete successfully, use
-- RespondActivityTaskFailed instead. If the worker finds that the task is
-- canceled through the @canceled@ flag returned by
-- RecordActivityTaskHeartbeat, it should cancel the task, clean up and
-- then call RespondActivityTaskCanceled.
--
-- A task is considered open from the time that it is scheduled until it is
-- closed. Therefore a task is reported as open while a worker is
-- processing it. A task is closed after it has been specified in a call to
-- RespondActivityTaskCompleted, RespondActivityTaskCanceled,
-- RespondActivityTaskFailed, or the task has
-- <https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-basic.html#swf-dev-timeout-types timed out>.
--
-- __Access Control__
--
-- You can use IAM policies to control this action\'s access to Amazon SWF
-- resources as follows:
--
-- -   Use a @Resource@ element with the domain name to limit the action to
--     only specified domains.
--
-- -   Use an @Action@ element to allow or deny permission to call this
--     action.
--
-- -   You cannot use an IAM policy to constrain this action\'s parameters.
--
-- If the caller doesn\'t have sufficient permissions to invoke the action,
-- or the parameter values fall outside the specified constraints, the
-- action fails. The associated event attribute\'s @cause@ parameter is set
-- to @OPERATION_NOT_PERMITTED@. For details and example IAM policies, see
-- <https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html Using IAM to Manage Access to Amazon SWF Workflows>
-- in the /Amazon SWF Developer Guide/.
module Amazonka.SWF.RespondActivityTaskCompleted
  ( -- * Creating a Request
    RespondActivityTaskCompleted (..),
    newRespondActivityTaskCompleted,

    -- * Request Lenses
    respondActivityTaskCompleted_result,
    respondActivityTaskCompleted_taskToken,

    -- * Destructuring the Response
    RespondActivityTaskCompletedResponse (..),
    newRespondActivityTaskCompletedResponse,
  )
where

import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import qualified Amazonka.Prelude as Prelude
import qualified Amazonka.Request as Request
import qualified Amazonka.Response as Response
import Amazonka.SWF.Types

-- | /See:/ 'newRespondActivityTaskCompleted' smart constructor.
data RespondActivityTaskCompleted = RespondActivityTaskCompleted'
  { -- | The result of the activity task. It is a free form string that is
    -- implementation specific.
    result :: Prelude.Maybe Prelude.Text,
    -- | The @taskToken@ of the ActivityTask.
    --
    -- @taskToken@ is generated by the service and should be treated as an
    -- opaque value. If the task is passed to another process, its @taskToken@
    -- must also be passed. This enables it to provide its progress and respond
    -- with results.
    taskToken :: Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'RespondActivityTaskCompleted' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'result', 'respondActivityTaskCompleted_result' - The result of the activity task. It is a free form string that is
-- implementation specific.
--
-- 'taskToken', 'respondActivityTaskCompleted_taskToken' - The @taskToken@ of the ActivityTask.
--
-- @taskToken@ is generated by the service and should be treated as an
-- opaque value. If the task is passed to another process, its @taskToken@
-- must also be passed. This enables it to provide its progress and respond
-- with results.
newRespondActivityTaskCompleted ::
  -- | 'taskToken'
  Prelude.Text ->
  RespondActivityTaskCompleted
newRespondActivityTaskCompleted pTaskToken_ =
  RespondActivityTaskCompleted'
    { result =
        Prelude.Nothing,
      taskToken = pTaskToken_
    }

-- | The result of the activity task. It is a free form string that is
-- implementation specific.
respondActivityTaskCompleted_result :: Lens.Lens' RespondActivityTaskCompleted (Prelude.Maybe Prelude.Text)
respondActivityTaskCompleted_result = Lens.lens (\RespondActivityTaskCompleted' {result} -> result) (\s@RespondActivityTaskCompleted' {} a -> s {result = a} :: RespondActivityTaskCompleted)

-- | The @taskToken@ of the ActivityTask.
--
-- @taskToken@ is generated by the service and should be treated as an
-- opaque value. If the task is passed to another process, its @taskToken@
-- must also be passed. This enables it to provide its progress and respond
-- with results.
respondActivityTaskCompleted_taskToken :: Lens.Lens' RespondActivityTaskCompleted Prelude.Text
respondActivityTaskCompleted_taskToken = Lens.lens (\RespondActivityTaskCompleted' {taskToken} -> taskToken) (\s@RespondActivityTaskCompleted' {} a -> s {taskToken = a} :: RespondActivityTaskCompleted)

instance Core.AWSRequest RespondActivityTaskCompleted where
  type
    AWSResponse RespondActivityTaskCompleted =
      RespondActivityTaskCompletedResponse
  request overrides =
    Request.postJSON (overrides defaultService)
  response =
    Response.receiveNull
      RespondActivityTaskCompletedResponse'

instance
  Prelude.Hashable
    RespondActivityTaskCompleted
  where
  hashWithSalt _salt RespondActivityTaskCompleted' {..} =
    _salt
      `Prelude.hashWithSalt` result
      `Prelude.hashWithSalt` taskToken

instance Prelude.NFData RespondActivityTaskCompleted where
  rnf RespondActivityTaskCompleted' {..} =
    Prelude.rnf result
      `Prelude.seq` Prelude.rnf taskToken

instance Data.ToHeaders RespondActivityTaskCompleted where
  toHeaders =
    Prelude.const
      ( Prelude.mconcat
          [ "X-Amz-Target"
              Data.=# ( "SimpleWorkflowService.RespondActivityTaskCompleted" ::
                          Prelude.ByteString
                      ),
            "Content-Type"
              Data.=# ( "application/x-amz-json-1.0" ::
                          Prelude.ByteString
                      )
          ]
      )

instance Data.ToJSON RespondActivityTaskCompleted where
  toJSON RespondActivityTaskCompleted' {..} =
    Data.object
      ( Prelude.catMaybes
          [ ("result" Data..=) Prelude.<$> result,
            Prelude.Just ("taskToken" Data..= taskToken)
          ]
      )

instance Data.ToPath RespondActivityTaskCompleted where
  toPath = Prelude.const "/"

instance Data.ToQuery RespondActivityTaskCompleted where
  toQuery = Prelude.const Prelude.mempty

-- | /See:/ 'newRespondActivityTaskCompletedResponse' smart constructor.
data RespondActivityTaskCompletedResponse = RespondActivityTaskCompletedResponse'
  {
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'RespondActivityTaskCompletedResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
newRespondActivityTaskCompletedResponse ::
  RespondActivityTaskCompletedResponse
newRespondActivityTaskCompletedResponse =
  RespondActivityTaskCompletedResponse'

instance
  Prelude.NFData
    RespondActivityTaskCompletedResponse
  where
  rnf _ = ()
