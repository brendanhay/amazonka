{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.Athena.ListCapacityReservations
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Lists the capacity reservations for the current account.
module Amazonka.Athena.ListCapacityReservations
  ( -- * Creating a Request
    ListCapacityReservations (..),
    newListCapacityReservations,

    -- * Request Lenses
    listCapacityReservations_maxResults,
    listCapacityReservations_nextToken,

    -- * Destructuring the Response
    ListCapacityReservationsResponse (..),
    newListCapacityReservationsResponse,

    -- * Response Lenses
    listCapacityReservationsResponse_nextToken,
    listCapacityReservationsResponse_httpStatus,
    listCapacityReservationsResponse_capacityReservations,
  )
where

import Amazonka.Athena.Types
import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import qualified Amazonka.Prelude as Prelude
import qualified Amazonka.Request as Request
import qualified Amazonka.Response as Response

-- | /See:/ 'newListCapacityReservations' smart constructor.
data ListCapacityReservations = ListCapacityReservations'
  { -- | Specifies the maximum number of results to return.
    maxResults :: Prelude.Maybe Prelude.Natural,
    -- | A token generated by the Athena service that specifies where to continue
    -- pagination if a previous request was truncated.
    nextToken :: Prelude.Maybe Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'ListCapacityReservations' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'maxResults', 'listCapacityReservations_maxResults' - Specifies the maximum number of results to return.
--
-- 'nextToken', 'listCapacityReservations_nextToken' - A token generated by the Athena service that specifies where to continue
-- pagination if a previous request was truncated.
newListCapacityReservations ::
  ListCapacityReservations
newListCapacityReservations =
  ListCapacityReservations'
    { maxResults =
        Prelude.Nothing,
      nextToken = Prelude.Nothing
    }

-- | Specifies the maximum number of results to return.
listCapacityReservations_maxResults :: Lens.Lens' ListCapacityReservations (Prelude.Maybe Prelude.Natural)
listCapacityReservations_maxResults = Lens.lens (\ListCapacityReservations' {maxResults} -> maxResults) (\s@ListCapacityReservations' {} a -> s {maxResults = a} :: ListCapacityReservations)

-- | A token generated by the Athena service that specifies where to continue
-- pagination if a previous request was truncated.
listCapacityReservations_nextToken :: Lens.Lens' ListCapacityReservations (Prelude.Maybe Prelude.Text)
listCapacityReservations_nextToken = Lens.lens (\ListCapacityReservations' {nextToken} -> nextToken) (\s@ListCapacityReservations' {} a -> s {nextToken = a} :: ListCapacityReservations)

instance Core.AWSRequest ListCapacityReservations where
  type
    AWSResponse ListCapacityReservations =
      ListCapacityReservationsResponse
  request overrides =
    Request.postJSON (overrides defaultService)
  response =
    Response.receiveJSON
      ( \s h x ->
          ListCapacityReservationsResponse'
            Prelude.<$> (x Data..?> "NextToken")
            Prelude.<*> (Prelude.pure (Prelude.fromEnum s))
            Prelude.<*> ( x
                            Data..?> "CapacityReservations"
                            Core..!@ Prelude.mempty
                        )
      )

instance Prelude.Hashable ListCapacityReservations where
  hashWithSalt _salt ListCapacityReservations' {..} =
    _salt
      `Prelude.hashWithSalt` maxResults
      `Prelude.hashWithSalt` nextToken

instance Prelude.NFData ListCapacityReservations where
  rnf ListCapacityReservations' {..} =
    Prelude.rnf maxResults
      `Prelude.seq` Prelude.rnf nextToken

instance Data.ToHeaders ListCapacityReservations where
  toHeaders =
    Prelude.const
      ( Prelude.mconcat
          [ "X-Amz-Target"
              Data.=# ( "AmazonAthena.ListCapacityReservations" ::
                          Prelude.ByteString
                      ),
            "Content-Type"
              Data.=# ( "application/x-amz-json-1.1" ::
                          Prelude.ByteString
                      )
          ]
      )

instance Data.ToJSON ListCapacityReservations where
  toJSON ListCapacityReservations' {..} =
    Data.object
      ( Prelude.catMaybes
          [ ("MaxResults" Data..=) Prelude.<$> maxResults,
            ("NextToken" Data..=) Prelude.<$> nextToken
          ]
      )

instance Data.ToPath ListCapacityReservations where
  toPath = Prelude.const "/"

instance Data.ToQuery ListCapacityReservations where
  toQuery = Prelude.const Prelude.mempty

-- | /See:/ 'newListCapacityReservationsResponse' smart constructor.
data ListCapacityReservationsResponse = ListCapacityReservationsResponse'
  { -- | A token generated by the Athena service that specifies where to continue
    -- pagination if a previous request was truncated. To obtain the next set
    -- of pages, pass in the NextToken from the response object of the previous
    -- page call.
    nextToken :: Prelude.Maybe Prelude.Text,
    -- | The response's http status code.
    httpStatus :: Prelude.Int,
    -- | The capacity reservations for the current account.
    capacityReservations :: [CapacityReservation]
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'ListCapacityReservationsResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'nextToken', 'listCapacityReservationsResponse_nextToken' - A token generated by the Athena service that specifies where to continue
-- pagination if a previous request was truncated. To obtain the next set
-- of pages, pass in the NextToken from the response object of the previous
-- page call.
--
-- 'httpStatus', 'listCapacityReservationsResponse_httpStatus' - The response's http status code.
--
-- 'capacityReservations', 'listCapacityReservationsResponse_capacityReservations' - The capacity reservations for the current account.
newListCapacityReservationsResponse ::
  -- | 'httpStatus'
  Prelude.Int ->
  ListCapacityReservationsResponse
newListCapacityReservationsResponse pHttpStatus_ =
  ListCapacityReservationsResponse'
    { nextToken =
        Prelude.Nothing,
      httpStatus = pHttpStatus_,
      capacityReservations = Prelude.mempty
    }

-- | A token generated by the Athena service that specifies where to continue
-- pagination if a previous request was truncated. To obtain the next set
-- of pages, pass in the NextToken from the response object of the previous
-- page call.
listCapacityReservationsResponse_nextToken :: Lens.Lens' ListCapacityReservationsResponse (Prelude.Maybe Prelude.Text)
listCapacityReservationsResponse_nextToken = Lens.lens (\ListCapacityReservationsResponse' {nextToken} -> nextToken) (\s@ListCapacityReservationsResponse' {} a -> s {nextToken = a} :: ListCapacityReservationsResponse)

-- | The response's http status code.
listCapacityReservationsResponse_httpStatus :: Lens.Lens' ListCapacityReservationsResponse Prelude.Int
listCapacityReservationsResponse_httpStatus = Lens.lens (\ListCapacityReservationsResponse' {httpStatus} -> httpStatus) (\s@ListCapacityReservationsResponse' {} a -> s {httpStatus = a} :: ListCapacityReservationsResponse)

-- | The capacity reservations for the current account.
listCapacityReservationsResponse_capacityReservations :: Lens.Lens' ListCapacityReservationsResponse [CapacityReservation]
listCapacityReservationsResponse_capacityReservations = Lens.lens (\ListCapacityReservationsResponse' {capacityReservations} -> capacityReservations) (\s@ListCapacityReservationsResponse' {} a -> s {capacityReservations = a} :: ListCapacityReservationsResponse) Prelude.. Lens.coerced

instance
  Prelude.NFData
    ListCapacityReservationsResponse
  where
  rnf ListCapacityReservationsResponse' {..} =
    Prelude.rnf nextToken
      `Prelude.seq` Prelude.rnf httpStatus
      `Prelude.seq` Prelude.rnf capacityReservations
