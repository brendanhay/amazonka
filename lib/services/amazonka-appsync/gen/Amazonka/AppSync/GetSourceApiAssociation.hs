{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.AppSync.GetSourceApiAssociation
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Retrieves a @SourceApiAssociation@ object.
module Amazonka.AppSync.GetSourceApiAssociation
  ( -- * Creating a Request
    GetSourceApiAssociation (..),
    newGetSourceApiAssociation,

    -- * Request Lenses
    getSourceApiAssociation_mergedApiIdentifier,
    getSourceApiAssociation_associationId,

    -- * Destructuring the Response
    GetSourceApiAssociationResponse (..),
    newGetSourceApiAssociationResponse,

    -- * Response Lenses
    getSourceApiAssociationResponse_sourceApiAssociation,
    getSourceApiAssociationResponse_httpStatus,
  )
where

import Amazonka.AppSync.Types
import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import qualified Amazonka.Prelude as Prelude
import qualified Amazonka.Request as Request
import qualified Amazonka.Response as Response

-- | /See:/ 'newGetSourceApiAssociation' smart constructor.
data GetSourceApiAssociation = GetSourceApiAssociation'
  { -- | The identifier of the AppSync Merged API. This is generated by the
    -- AppSync service. In most cases, Merged APIs (especially in your account)
    -- only require the API ID value or ARN of the merged API. However, Merged
    -- APIs in other accounts (cross-account use cases) strictly require the
    -- full resource ARN of the merged API.
    mergedApiIdentifier :: Prelude.Text,
    -- | The ID generated by the AppSync service for the source API association.
    associationId :: Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'GetSourceApiAssociation' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'mergedApiIdentifier', 'getSourceApiAssociation_mergedApiIdentifier' - The identifier of the AppSync Merged API. This is generated by the
-- AppSync service. In most cases, Merged APIs (especially in your account)
-- only require the API ID value or ARN of the merged API. However, Merged
-- APIs in other accounts (cross-account use cases) strictly require the
-- full resource ARN of the merged API.
--
-- 'associationId', 'getSourceApiAssociation_associationId' - The ID generated by the AppSync service for the source API association.
newGetSourceApiAssociation ::
  -- | 'mergedApiIdentifier'
  Prelude.Text ->
  -- | 'associationId'
  Prelude.Text ->
  GetSourceApiAssociation
newGetSourceApiAssociation
  pMergedApiIdentifier_
  pAssociationId_ =
    GetSourceApiAssociation'
      { mergedApiIdentifier =
          pMergedApiIdentifier_,
        associationId = pAssociationId_
      }

-- | The identifier of the AppSync Merged API. This is generated by the
-- AppSync service. In most cases, Merged APIs (especially in your account)
-- only require the API ID value or ARN of the merged API. However, Merged
-- APIs in other accounts (cross-account use cases) strictly require the
-- full resource ARN of the merged API.
getSourceApiAssociation_mergedApiIdentifier :: Lens.Lens' GetSourceApiAssociation Prelude.Text
getSourceApiAssociation_mergedApiIdentifier = Lens.lens (\GetSourceApiAssociation' {mergedApiIdentifier} -> mergedApiIdentifier) (\s@GetSourceApiAssociation' {} a -> s {mergedApiIdentifier = a} :: GetSourceApiAssociation)

-- | The ID generated by the AppSync service for the source API association.
getSourceApiAssociation_associationId :: Lens.Lens' GetSourceApiAssociation Prelude.Text
getSourceApiAssociation_associationId = Lens.lens (\GetSourceApiAssociation' {associationId} -> associationId) (\s@GetSourceApiAssociation' {} a -> s {associationId = a} :: GetSourceApiAssociation)

instance Core.AWSRequest GetSourceApiAssociation where
  type
    AWSResponse GetSourceApiAssociation =
      GetSourceApiAssociationResponse
  request overrides =
    Request.get (overrides defaultService)
  response =
    Response.receiveJSON
      ( \s h x ->
          GetSourceApiAssociationResponse'
            Prelude.<$> (x Data..?> "sourceApiAssociation")
            Prelude.<*> (Prelude.pure (Prelude.fromEnum s))
      )

instance Prelude.Hashable GetSourceApiAssociation where
  hashWithSalt _salt GetSourceApiAssociation' {..} =
    _salt
      `Prelude.hashWithSalt` mergedApiIdentifier
      `Prelude.hashWithSalt` associationId

instance Prelude.NFData GetSourceApiAssociation where
  rnf GetSourceApiAssociation' {..} =
    Prelude.rnf mergedApiIdentifier
      `Prelude.seq` Prelude.rnf associationId

instance Data.ToHeaders GetSourceApiAssociation where
  toHeaders =
    Prelude.const
      ( Prelude.mconcat
          [ "Content-Type"
              Data.=# ( "application/x-amz-json-1.1" ::
                          Prelude.ByteString
                      )
          ]
      )

instance Data.ToPath GetSourceApiAssociation where
  toPath GetSourceApiAssociation' {..} =
    Prelude.mconcat
      [ "/v1/mergedApis/",
        Data.toBS mergedApiIdentifier,
        "/sourceApiAssociations/",
        Data.toBS associationId
      ]

instance Data.ToQuery GetSourceApiAssociation where
  toQuery = Prelude.const Prelude.mempty

-- | /See:/ 'newGetSourceApiAssociationResponse' smart constructor.
data GetSourceApiAssociationResponse = GetSourceApiAssociationResponse'
  { -- | The @SourceApiAssociation@ object data.
    sourceApiAssociation :: Prelude.Maybe SourceApiAssociation,
    -- | The response's http status code.
    httpStatus :: Prelude.Int
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'GetSourceApiAssociationResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'sourceApiAssociation', 'getSourceApiAssociationResponse_sourceApiAssociation' - The @SourceApiAssociation@ object data.
--
-- 'httpStatus', 'getSourceApiAssociationResponse_httpStatus' - The response's http status code.
newGetSourceApiAssociationResponse ::
  -- | 'httpStatus'
  Prelude.Int ->
  GetSourceApiAssociationResponse
newGetSourceApiAssociationResponse pHttpStatus_ =
  GetSourceApiAssociationResponse'
    { sourceApiAssociation =
        Prelude.Nothing,
      httpStatus = pHttpStatus_
    }

-- | The @SourceApiAssociation@ object data.
getSourceApiAssociationResponse_sourceApiAssociation :: Lens.Lens' GetSourceApiAssociationResponse (Prelude.Maybe SourceApiAssociation)
getSourceApiAssociationResponse_sourceApiAssociation = Lens.lens (\GetSourceApiAssociationResponse' {sourceApiAssociation} -> sourceApiAssociation) (\s@GetSourceApiAssociationResponse' {} a -> s {sourceApiAssociation = a} :: GetSourceApiAssociationResponse)

-- | The response's http status code.
getSourceApiAssociationResponse_httpStatus :: Lens.Lens' GetSourceApiAssociationResponse Prelude.Int
getSourceApiAssociationResponse_httpStatus = Lens.lens (\GetSourceApiAssociationResponse' {httpStatus} -> httpStatus) (\s@GetSourceApiAssociationResponse' {} a -> s {httpStatus = a} :: GetSourceApiAssociationResponse)

instance
  Prelude.NFData
    GetSourceApiAssociationResponse
  where
  rnf GetSourceApiAssociationResponse' {..} =
    Prelude.rnf sourceApiAssociation
      `Prelude.seq` Prelude.rnf httpStatus
