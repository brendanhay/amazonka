{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.ImageBuilder.Types.VulnerabilityIdAggregation
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Amazonka.ImageBuilder.Types.VulnerabilityIdAggregation where

import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import Amazonka.ImageBuilder.Types.SeverityCounts
import qualified Amazonka.Prelude as Prelude

-- | Includes counts of image and pipeline resource findings by
-- vulnerability.
--
-- /See:/ 'newVulnerabilityIdAggregation' smart constructor.
data VulnerabilityIdAggregation = VulnerabilityIdAggregation'
  { -- | Counts by severity level for medium severity and higher level findings,
    -- plus a total for all of the findings for the specified vulnerability.
    severityCounts :: Prelude.Maybe SeverityCounts,
    -- | The vulnerability Id for this set of counts.
    vulnerabilityId :: Prelude.Maybe Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'VulnerabilityIdAggregation' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'severityCounts', 'vulnerabilityIdAggregation_severityCounts' - Counts by severity level for medium severity and higher level findings,
-- plus a total for all of the findings for the specified vulnerability.
--
-- 'vulnerabilityId', 'vulnerabilityIdAggregation_vulnerabilityId' - The vulnerability Id for this set of counts.
newVulnerabilityIdAggregation ::
  VulnerabilityIdAggregation
newVulnerabilityIdAggregation =
  VulnerabilityIdAggregation'
    { severityCounts =
        Prelude.Nothing,
      vulnerabilityId = Prelude.Nothing
    }

-- | Counts by severity level for medium severity and higher level findings,
-- plus a total for all of the findings for the specified vulnerability.
vulnerabilityIdAggregation_severityCounts :: Lens.Lens' VulnerabilityIdAggregation (Prelude.Maybe SeverityCounts)
vulnerabilityIdAggregation_severityCounts = Lens.lens (\VulnerabilityIdAggregation' {severityCounts} -> severityCounts) (\s@VulnerabilityIdAggregation' {} a -> s {severityCounts = a} :: VulnerabilityIdAggregation)

-- | The vulnerability Id for this set of counts.
vulnerabilityIdAggregation_vulnerabilityId :: Lens.Lens' VulnerabilityIdAggregation (Prelude.Maybe Prelude.Text)
vulnerabilityIdAggregation_vulnerabilityId = Lens.lens (\VulnerabilityIdAggregation' {vulnerabilityId} -> vulnerabilityId) (\s@VulnerabilityIdAggregation' {} a -> s {vulnerabilityId = a} :: VulnerabilityIdAggregation)

instance Data.FromJSON VulnerabilityIdAggregation where
  parseJSON =
    Data.withObject
      "VulnerabilityIdAggregation"
      ( \x ->
          VulnerabilityIdAggregation'
            Prelude.<$> (x Data..:? "severityCounts")
            Prelude.<*> (x Data..:? "vulnerabilityId")
      )

instance Prelude.Hashable VulnerabilityIdAggregation where
  hashWithSalt _salt VulnerabilityIdAggregation' {..} =
    _salt
      `Prelude.hashWithSalt` severityCounts
      `Prelude.hashWithSalt` vulnerabilityId

instance Prelude.NFData VulnerabilityIdAggregation where
  rnf VulnerabilityIdAggregation' {..} =
    Prelude.rnf severityCounts
      `Prelude.seq` Prelude.rnf vulnerabilityId
