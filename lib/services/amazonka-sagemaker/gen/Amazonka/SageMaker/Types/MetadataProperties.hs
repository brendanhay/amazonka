{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.SageMaker.Types.MetadataProperties
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Amazonka.SageMaker.Types.MetadataProperties where

import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import qualified Amazonka.Prelude as Prelude

-- | Metadata properties of the tracking entity, trial, or trial component.
--
-- /See:/ 'newMetadataProperties' smart constructor.
data MetadataProperties = MetadataProperties'
  { -- | The commit ID.
    commitId :: Prelude.Maybe Prelude.Text,
    -- | The entity this entity was generated by.
    generatedBy :: Prelude.Maybe Prelude.Text,
    -- | The project ID.
    projectId :: Prelude.Maybe Prelude.Text,
    -- | The repository.
    repository :: Prelude.Maybe Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'MetadataProperties' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'commitId', 'metadataProperties_commitId' - The commit ID.
--
-- 'generatedBy', 'metadataProperties_generatedBy' - The entity this entity was generated by.
--
-- 'projectId', 'metadataProperties_projectId' - The project ID.
--
-- 'repository', 'metadataProperties_repository' - The repository.
newMetadataProperties ::
  MetadataProperties
newMetadataProperties =
  MetadataProperties'
    { commitId = Prelude.Nothing,
      generatedBy = Prelude.Nothing,
      projectId = Prelude.Nothing,
      repository = Prelude.Nothing
    }

-- | The commit ID.
metadataProperties_commitId :: Lens.Lens' MetadataProperties (Prelude.Maybe Prelude.Text)
metadataProperties_commitId = Lens.lens (\MetadataProperties' {commitId} -> commitId) (\s@MetadataProperties' {} a -> s {commitId = a} :: MetadataProperties)

-- | The entity this entity was generated by.
metadataProperties_generatedBy :: Lens.Lens' MetadataProperties (Prelude.Maybe Prelude.Text)
metadataProperties_generatedBy = Lens.lens (\MetadataProperties' {generatedBy} -> generatedBy) (\s@MetadataProperties' {} a -> s {generatedBy = a} :: MetadataProperties)

-- | The project ID.
metadataProperties_projectId :: Lens.Lens' MetadataProperties (Prelude.Maybe Prelude.Text)
metadataProperties_projectId = Lens.lens (\MetadataProperties' {projectId} -> projectId) (\s@MetadataProperties' {} a -> s {projectId = a} :: MetadataProperties)

-- | The repository.
metadataProperties_repository :: Lens.Lens' MetadataProperties (Prelude.Maybe Prelude.Text)
metadataProperties_repository = Lens.lens (\MetadataProperties' {repository} -> repository) (\s@MetadataProperties' {} a -> s {repository = a} :: MetadataProperties)

instance Data.FromJSON MetadataProperties where
  parseJSON =
    Data.withObject
      "MetadataProperties"
      ( \x ->
          MetadataProperties'
            Prelude.<$> (x Data..:? "CommitId")
            Prelude.<*> (x Data..:? "GeneratedBy")
            Prelude.<*> (x Data..:? "ProjectId")
            Prelude.<*> (x Data..:? "Repository")
      )

instance Prelude.Hashable MetadataProperties where
  hashWithSalt _salt MetadataProperties' {..} =
    _salt
      `Prelude.hashWithSalt` commitId
      `Prelude.hashWithSalt` generatedBy
      `Prelude.hashWithSalt` projectId
      `Prelude.hashWithSalt` repository

instance Prelude.NFData MetadataProperties where
  rnf MetadataProperties' {..} =
    Prelude.rnf commitId
      `Prelude.seq` Prelude.rnf generatedBy
      `Prelude.seq` Prelude.rnf projectId
      `Prelude.seq` Prelude.rnf repository

instance Data.ToJSON MetadataProperties where
  toJSON MetadataProperties' {..} =
    Data.object
      ( Prelude.catMaybes
          [ ("CommitId" Data..=) Prelude.<$> commitId,
            ("GeneratedBy" Data..=) Prelude.<$> generatedBy,
            ("ProjectId" Data..=) Prelude.<$> projectId,
            ("Repository" Data..=) Prelude.<$> repository
          ]
      )
