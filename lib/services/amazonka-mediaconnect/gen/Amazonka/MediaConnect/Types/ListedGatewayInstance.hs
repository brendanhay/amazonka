{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.MediaConnect.Types.ListedGatewayInstance
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Amazonka.MediaConnect.Types.ListedGatewayInstance where

import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import Amazonka.MediaConnect.Types.InstanceState
import qualified Amazonka.Prelude as Prelude

-- | Provides a summary of an instance.
--
-- /See:/ 'newListedGatewayInstance' smart constructor.
data ListedGatewayInstance = ListedGatewayInstance'
  { -- | The status of the instance.
    instanceState :: Prelude.Maybe InstanceState,
    -- | The Amazon Resource Name (ARN) of the gateway.
    gatewayArn :: Prelude.Text,
    -- | The Amazon Resource Name (ARN) of the instance.
    gatewayInstanceArn :: Prelude.Text,
    -- | The managed instance ID generated by the SSM install. This will begin
    -- with \"mi-\".
    instanceId :: Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'ListedGatewayInstance' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'instanceState', 'listedGatewayInstance_instanceState' - The status of the instance.
--
-- 'gatewayArn', 'listedGatewayInstance_gatewayArn' - The Amazon Resource Name (ARN) of the gateway.
--
-- 'gatewayInstanceArn', 'listedGatewayInstance_gatewayInstanceArn' - The Amazon Resource Name (ARN) of the instance.
--
-- 'instanceId', 'listedGatewayInstance_instanceId' - The managed instance ID generated by the SSM install. This will begin
-- with \"mi-\".
newListedGatewayInstance ::
  -- | 'gatewayArn'
  Prelude.Text ->
  -- | 'gatewayInstanceArn'
  Prelude.Text ->
  -- | 'instanceId'
  Prelude.Text ->
  ListedGatewayInstance
newListedGatewayInstance
  pGatewayArn_
  pGatewayInstanceArn_
  pInstanceId_ =
    ListedGatewayInstance'
      { instanceState =
          Prelude.Nothing,
        gatewayArn = pGatewayArn_,
        gatewayInstanceArn = pGatewayInstanceArn_,
        instanceId = pInstanceId_
      }

-- | The status of the instance.
listedGatewayInstance_instanceState :: Lens.Lens' ListedGatewayInstance (Prelude.Maybe InstanceState)
listedGatewayInstance_instanceState = Lens.lens (\ListedGatewayInstance' {instanceState} -> instanceState) (\s@ListedGatewayInstance' {} a -> s {instanceState = a} :: ListedGatewayInstance)

-- | The Amazon Resource Name (ARN) of the gateway.
listedGatewayInstance_gatewayArn :: Lens.Lens' ListedGatewayInstance Prelude.Text
listedGatewayInstance_gatewayArn = Lens.lens (\ListedGatewayInstance' {gatewayArn} -> gatewayArn) (\s@ListedGatewayInstance' {} a -> s {gatewayArn = a} :: ListedGatewayInstance)

-- | The Amazon Resource Name (ARN) of the instance.
listedGatewayInstance_gatewayInstanceArn :: Lens.Lens' ListedGatewayInstance Prelude.Text
listedGatewayInstance_gatewayInstanceArn = Lens.lens (\ListedGatewayInstance' {gatewayInstanceArn} -> gatewayInstanceArn) (\s@ListedGatewayInstance' {} a -> s {gatewayInstanceArn = a} :: ListedGatewayInstance)

-- | The managed instance ID generated by the SSM install. This will begin
-- with \"mi-\".
listedGatewayInstance_instanceId :: Lens.Lens' ListedGatewayInstance Prelude.Text
listedGatewayInstance_instanceId = Lens.lens (\ListedGatewayInstance' {instanceId} -> instanceId) (\s@ListedGatewayInstance' {} a -> s {instanceId = a} :: ListedGatewayInstance)

instance Data.FromJSON ListedGatewayInstance where
  parseJSON =
    Data.withObject
      "ListedGatewayInstance"
      ( \x ->
          ListedGatewayInstance'
            Prelude.<$> (x Data..:? "instanceState")
            Prelude.<*> (x Data..: "gatewayArn")
            Prelude.<*> (x Data..: "gatewayInstanceArn")
            Prelude.<*> (x Data..: "instanceId")
      )

instance Prelude.Hashable ListedGatewayInstance where
  hashWithSalt _salt ListedGatewayInstance' {..} =
    _salt
      `Prelude.hashWithSalt` instanceState
      `Prelude.hashWithSalt` gatewayArn
      `Prelude.hashWithSalt` gatewayInstanceArn
      `Prelude.hashWithSalt` instanceId

instance Prelude.NFData ListedGatewayInstance where
  rnf ListedGatewayInstance' {..} =
    Prelude.rnf instanceState
      `Prelude.seq` Prelude.rnf gatewayArn
      `Prelude.seq` Prelude.rnf gatewayInstanceArn
      `Prelude.seq` Prelude.rnf instanceId
