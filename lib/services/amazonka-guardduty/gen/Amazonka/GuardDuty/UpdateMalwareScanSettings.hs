{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.GuardDuty.UpdateMalwareScanSettings
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Updates the malware scan settings.
--
-- There might be regional differences because some data sources might not
-- be available in all the Amazon Web Services Regions where GuardDuty is
-- presently supported. For more information, see
-- <https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html Regions and endpoints>.
module Amazonka.GuardDuty.UpdateMalwareScanSettings
  ( -- * Creating a Request
    UpdateMalwareScanSettings (..),
    newUpdateMalwareScanSettings,

    -- * Request Lenses
    updateMalwareScanSettings_ebsSnapshotPreservation,
    updateMalwareScanSettings_scanResourceCriteria,
    updateMalwareScanSettings_detectorId,

    -- * Destructuring the Response
    UpdateMalwareScanSettingsResponse (..),
    newUpdateMalwareScanSettingsResponse,

    -- * Response Lenses
    updateMalwareScanSettingsResponse_httpStatus,
  )
where

import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import Amazonka.GuardDuty.Types
import qualified Amazonka.Prelude as Prelude
import qualified Amazonka.Request as Request
import qualified Amazonka.Response as Response

-- | /See:/ 'newUpdateMalwareScanSettings' smart constructor.
data UpdateMalwareScanSettings = UpdateMalwareScanSettings'
  { -- | An enum value representing possible snapshot preservation settings.
    ebsSnapshotPreservation :: Prelude.Maybe EbsSnapshotPreservation,
    -- | Represents the criteria to be used in the filter for selecting resources
    -- to scan.
    scanResourceCriteria :: Prelude.Maybe ScanResourceCriteria,
    -- | The unique ID of the detector that specifies the GuardDuty service where
    -- you want to update scan settings.
    detectorId :: Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'UpdateMalwareScanSettings' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'ebsSnapshotPreservation', 'updateMalwareScanSettings_ebsSnapshotPreservation' - An enum value representing possible snapshot preservation settings.
--
-- 'scanResourceCriteria', 'updateMalwareScanSettings_scanResourceCriteria' - Represents the criteria to be used in the filter for selecting resources
-- to scan.
--
-- 'detectorId', 'updateMalwareScanSettings_detectorId' - The unique ID of the detector that specifies the GuardDuty service where
-- you want to update scan settings.
newUpdateMalwareScanSettings ::
  -- | 'detectorId'
  Prelude.Text ->
  UpdateMalwareScanSettings
newUpdateMalwareScanSettings pDetectorId_ =
  UpdateMalwareScanSettings'
    { ebsSnapshotPreservation =
        Prelude.Nothing,
      scanResourceCriteria = Prelude.Nothing,
      detectorId = pDetectorId_
    }

-- | An enum value representing possible snapshot preservation settings.
updateMalwareScanSettings_ebsSnapshotPreservation :: Lens.Lens' UpdateMalwareScanSettings (Prelude.Maybe EbsSnapshotPreservation)
updateMalwareScanSettings_ebsSnapshotPreservation = Lens.lens (\UpdateMalwareScanSettings' {ebsSnapshotPreservation} -> ebsSnapshotPreservation) (\s@UpdateMalwareScanSettings' {} a -> s {ebsSnapshotPreservation = a} :: UpdateMalwareScanSettings)

-- | Represents the criteria to be used in the filter for selecting resources
-- to scan.
updateMalwareScanSettings_scanResourceCriteria :: Lens.Lens' UpdateMalwareScanSettings (Prelude.Maybe ScanResourceCriteria)
updateMalwareScanSettings_scanResourceCriteria = Lens.lens (\UpdateMalwareScanSettings' {scanResourceCriteria} -> scanResourceCriteria) (\s@UpdateMalwareScanSettings' {} a -> s {scanResourceCriteria = a} :: UpdateMalwareScanSettings)

-- | The unique ID of the detector that specifies the GuardDuty service where
-- you want to update scan settings.
updateMalwareScanSettings_detectorId :: Lens.Lens' UpdateMalwareScanSettings Prelude.Text
updateMalwareScanSettings_detectorId = Lens.lens (\UpdateMalwareScanSettings' {detectorId} -> detectorId) (\s@UpdateMalwareScanSettings' {} a -> s {detectorId = a} :: UpdateMalwareScanSettings)

instance Core.AWSRequest UpdateMalwareScanSettings where
  type
    AWSResponse UpdateMalwareScanSettings =
      UpdateMalwareScanSettingsResponse
  request overrides =
    Request.postJSON (overrides defaultService)
  response =
    Response.receiveEmpty
      ( \s h x ->
          UpdateMalwareScanSettingsResponse'
            Prelude.<$> (Prelude.pure (Prelude.fromEnum s))
      )

instance Prelude.Hashable UpdateMalwareScanSettings where
  hashWithSalt _salt UpdateMalwareScanSettings' {..} =
    _salt
      `Prelude.hashWithSalt` ebsSnapshotPreservation
      `Prelude.hashWithSalt` scanResourceCriteria
      `Prelude.hashWithSalt` detectorId

instance Prelude.NFData UpdateMalwareScanSettings where
  rnf UpdateMalwareScanSettings' {..} =
    Prelude.rnf ebsSnapshotPreservation
      `Prelude.seq` Prelude.rnf scanResourceCriteria
      `Prelude.seq` Prelude.rnf detectorId

instance Data.ToHeaders UpdateMalwareScanSettings where
  toHeaders =
    Prelude.const
      ( Prelude.mconcat
          [ "Content-Type"
              Data.=# ( "application/x-amz-json-1.1" ::
                          Prelude.ByteString
                      )
          ]
      )

instance Data.ToJSON UpdateMalwareScanSettings where
  toJSON UpdateMalwareScanSettings' {..} =
    Data.object
      ( Prelude.catMaybes
          [ ("ebsSnapshotPreservation" Data..=)
              Prelude.<$> ebsSnapshotPreservation,
            ("scanResourceCriteria" Data..=)
              Prelude.<$> scanResourceCriteria
          ]
      )

instance Data.ToPath UpdateMalwareScanSettings where
  toPath UpdateMalwareScanSettings' {..} =
    Prelude.mconcat
      [ "/detector/",
        Data.toBS detectorId,
        "/malware-scan-settings"
      ]

instance Data.ToQuery UpdateMalwareScanSettings where
  toQuery = Prelude.const Prelude.mempty

-- | /See:/ 'newUpdateMalwareScanSettingsResponse' smart constructor.
data UpdateMalwareScanSettingsResponse = UpdateMalwareScanSettingsResponse'
  { -- | The response's http status code.
    httpStatus :: Prelude.Int
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'UpdateMalwareScanSettingsResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'httpStatus', 'updateMalwareScanSettingsResponse_httpStatus' - The response's http status code.
newUpdateMalwareScanSettingsResponse ::
  -- | 'httpStatus'
  Prelude.Int ->
  UpdateMalwareScanSettingsResponse
newUpdateMalwareScanSettingsResponse pHttpStatus_ =
  UpdateMalwareScanSettingsResponse'
    { httpStatus =
        pHttpStatus_
    }

-- | The response's http status code.
updateMalwareScanSettingsResponse_httpStatus :: Lens.Lens' UpdateMalwareScanSettingsResponse Prelude.Int
updateMalwareScanSettingsResponse_httpStatus = Lens.lens (\UpdateMalwareScanSettingsResponse' {httpStatus} -> httpStatus) (\s@UpdateMalwareScanSettingsResponse' {} a -> s {httpStatus = a} :: UpdateMalwareScanSettingsResponse)

instance
  Prelude.NFData
    UpdateMalwareScanSettingsResponse
  where
  rnf UpdateMalwareScanSettingsResponse' {..} =
    Prelude.rnf httpStatus
