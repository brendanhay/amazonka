{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.WorkSpacesWeb.UpdateUserAccessLoggingSettings
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Updates the user access logging settings.
module Amazonka.WorkSpacesWeb.UpdateUserAccessLoggingSettings
  ( -- * Creating a Request
    UpdateUserAccessLoggingSettings (..),
    newUpdateUserAccessLoggingSettings,

    -- * Request Lenses
    updateUserAccessLoggingSettings_clientToken,
    updateUserAccessLoggingSettings_kinesisStreamArn,
    updateUserAccessLoggingSettings_userAccessLoggingSettingsArn,

    -- * Destructuring the Response
    UpdateUserAccessLoggingSettingsResponse (..),
    newUpdateUserAccessLoggingSettingsResponse,

    -- * Response Lenses
    updateUserAccessLoggingSettingsResponse_httpStatus,
    updateUserAccessLoggingSettingsResponse_userAccessLoggingSettings,
  )
where

import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import qualified Amazonka.Prelude as Prelude
import qualified Amazonka.Request as Request
import qualified Amazonka.Response as Response
import Amazonka.WorkSpacesWeb.Types

-- | /See:/ 'newUpdateUserAccessLoggingSettings' smart constructor.
data UpdateUserAccessLoggingSettings = UpdateUserAccessLoggingSettings'
  { -- | A unique, case-sensitive identifier that you provide to ensure the
    -- idempotency of the request. Idempotency ensures that an API request
    -- completes only once. With an idempotent request, if the original request
    -- completes successfully, subsequent retries with the same client token
    -- return the result from the original successful request.
    --
    -- If you do not specify a client token, one is automatically generated by
    -- the AWS SDK.
    clientToken :: Prelude.Maybe Prelude.Text,
    -- | The ARN of the Kinesis stream.
    kinesisStreamArn :: Prelude.Maybe Prelude.Text,
    -- | The ARN of the user access logging settings.
    userAccessLoggingSettingsArn :: Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'UpdateUserAccessLoggingSettings' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'clientToken', 'updateUserAccessLoggingSettings_clientToken' - A unique, case-sensitive identifier that you provide to ensure the
-- idempotency of the request. Idempotency ensures that an API request
-- completes only once. With an idempotent request, if the original request
-- completes successfully, subsequent retries with the same client token
-- return the result from the original successful request.
--
-- If you do not specify a client token, one is automatically generated by
-- the AWS SDK.
--
-- 'kinesisStreamArn', 'updateUserAccessLoggingSettings_kinesisStreamArn' - The ARN of the Kinesis stream.
--
-- 'userAccessLoggingSettingsArn', 'updateUserAccessLoggingSettings_userAccessLoggingSettingsArn' - The ARN of the user access logging settings.
newUpdateUserAccessLoggingSettings ::
  -- | 'userAccessLoggingSettingsArn'
  Prelude.Text ->
  UpdateUserAccessLoggingSettings
newUpdateUserAccessLoggingSettings
  pUserAccessLoggingSettingsArn_ =
    UpdateUserAccessLoggingSettings'
      { clientToken =
          Prelude.Nothing,
        kinesisStreamArn = Prelude.Nothing,
        userAccessLoggingSettingsArn =
          pUserAccessLoggingSettingsArn_
      }

-- | A unique, case-sensitive identifier that you provide to ensure the
-- idempotency of the request. Idempotency ensures that an API request
-- completes only once. With an idempotent request, if the original request
-- completes successfully, subsequent retries with the same client token
-- return the result from the original successful request.
--
-- If you do not specify a client token, one is automatically generated by
-- the AWS SDK.
updateUserAccessLoggingSettings_clientToken :: Lens.Lens' UpdateUserAccessLoggingSettings (Prelude.Maybe Prelude.Text)
updateUserAccessLoggingSettings_clientToken = Lens.lens (\UpdateUserAccessLoggingSettings' {clientToken} -> clientToken) (\s@UpdateUserAccessLoggingSettings' {} a -> s {clientToken = a} :: UpdateUserAccessLoggingSettings)

-- | The ARN of the Kinesis stream.
updateUserAccessLoggingSettings_kinesisStreamArn :: Lens.Lens' UpdateUserAccessLoggingSettings (Prelude.Maybe Prelude.Text)
updateUserAccessLoggingSettings_kinesisStreamArn = Lens.lens (\UpdateUserAccessLoggingSettings' {kinesisStreamArn} -> kinesisStreamArn) (\s@UpdateUserAccessLoggingSettings' {} a -> s {kinesisStreamArn = a} :: UpdateUserAccessLoggingSettings)

-- | The ARN of the user access logging settings.
updateUserAccessLoggingSettings_userAccessLoggingSettingsArn :: Lens.Lens' UpdateUserAccessLoggingSettings Prelude.Text
updateUserAccessLoggingSettings_userAccessLoggingSettingsArn = Lens.lens (\UpdateUserAccessLoggingSettings' {userAccessLoggingSettingsArn} -> userAccessLoggingSettingsArn) (\s@UpdateUserAccessLoggingSettings' {} a -> s {userAccessLoggingSettingsArn = a} :: UpdateUserAccessLoggingSettings)

instance
  Core.AWSRequest
    UpdateUserAccessLoggingSettings
  where
  type
    AWSResponse UpdateUserAccessLoggingSettings =
      UpdateUserAccessLoggingSettingsResponse
  request overrides =
    Request.patchJSON (overrides defaultService)
  response =
    Response.receiveJSON
      ( \s h x ->
          UpdateUserAccessLoggingSettingsResponse'
            Prelude.<$> (Prelude.pure (Prelude.fromEnum s))
            Prelude.<*> (x Data..:> "userAccessLoggingSettings")
      )

instance
  Prelude.Hashable
    UpdateUserAccessLoggingSettings
  where
  hashWithSalt
    _salt
    UpdateUserAccessLoggingSettings' {..} =
      _salt
        `Prelude.hashWithSalt` clientToken
        `Prelude.hashWithSalt` kinesisStreamArn
        `Prelude.hashWithSalt` userAccessLoggingSettingsArn

instance
  Prelude.NFData
    UpdateUserAccessLoggingSettings
  where
  rnf UpdateUserAccessLoggingSettings' {..} =
    Prelude.rnf clientToken
      `Prelude.seq` Prelude.rnf kinesisStreamArn
      `Prelude.seq` Prelude.rnf userAccessLoggingSettingsArn

instance
  Data.ToHeaders
    UpdateUserAccessLoggingSettings
  where
  toHeaders =
    Prelude.const
      ( Prelude.mconcat
          [ "Content-Type"
              Data.=# ( "application/x-amz-json-1.1" ::
                          Prelude.ByteString
                      )
          ]
      )

instance Data.ToJSON UpdateUserAccessLoggingSettings where
  toJSON UpdateUserAccessLoggingSettings' {..} =
    Data.object
      ( Prelude.catMaybes
          [ ("clientToken" Data..=) Prelude.<$> clientToken,
            ("kinesisStreamArn" Data..=)
              Prelude.<$> kinesisStreamArn
          ]
      )

instance Data.ToPath UpdateUserAccessLoggingSettings where
  toPath UpdateUserAccessLoggingSettings' {..} =
    Prelude.mconcat
      [ "/userAccessLoggingSettings/",
        Data.toBS userAccessLoggingSettingsArn
      ]

instance Data.ToQuery UpdateUserAccessLoggingSettings where
  toQuery = Prelude.const Prelude.mempty

-- | /See:/ 'newUpdateUserAccessLoggingSettingsResponse' smart constructor.
data UpdateUserAccessLoggingSettingsResponse = UpdateUserAccessLoggingSettingsResponse'
  { -- | The response's http status code.
    httpStatus :: Prelude.Int,
    -- | The user access logging settings.
    userAccessLoggingSettings :: UserAccessLoggingSettings
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'UpdateUserAccessLoggingSettingsResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'httpStatus', 'updateUserAccessLoggingSettingsResponse_httpStatus' - The response's http status code.
--
-- 'userAccessLoggingSettings', 'updateUserAccessLoggingSettingsResponse_userAccessLoggingSettings' - The user access logging settings.
newUpdateUserAccessLoggingSettingsResponse ::
  -- | 'httpStatus'
  Prelude.Int ->
  -- | 'userAccessLoggingSettings'
  UserAccessLoggingSettings ->
  UpdateUserAccessLoggingSettingsResponse
newUpdateUserAccessLoggingSettingsResponse
  pHttpStatus_
  pUserAccessLoggingSettings_ =
    UpdateUserAccessLoggingSettingsResponse'
      { httpStatus =
          pHttpStatus_,
        userAccessLoggingSettings =
          pUserAccessLoggingSettings_
      }

-- | The response's http status code.
updateUserAccessLoggingSettingsResponse_httpStatus :: Lens.Lens' UpdateUserAccessLoggingSettingsResponse Prelude.Int
updateUserAccessLoggingSettingsResponse_httpStatus = Lens.lens (\UpdateUserAccessLoggingSettingsResponse' {httpStatus} -> httpStatus) (\s@UpdateUserAccessLoggingSettingsResponse' {} a -> s {httpStatus = a} :: UpdateUserAccessLoggingSettingsResponse)

-- | The user access logging settings.
updateUserAccessLoggingSettingsResponse_userAccessLoggingSettings :: Lens.Lens' UpdateUserAccessLoggingSettingsResponse UserAccessLoggingSettings
updateUserAccessLoggingSettingsResponse_userAccessLoggingSettings = Lens.lens (\UpdateUserAccessLoggingSettingsResponse' {userAccessLoggingSettings} -> userAccessLoggingSettings) (\s@UpdateUserAccessLoggingSettingsResponse' {} a -> s {userAccessLoggingSettings = a} :: UpdateUserAccessLoggingSettingsResponse)

instance
  Prelude.NFData
    UpdateUserAccessLoggingSettingsResponse
  where
  rnf UpdateUserAccessLoggingSettingsResponse' {..} =
    Prelude.rnf httpStatus
      `Prelude.seq` Prelude.rnf userAccessLoggingSettings
