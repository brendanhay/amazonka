{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.MediaConnect.Types.GatewayInstance
-- Copyright   : (c) 2013-2023 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Amazonka.MediaConnect.Types.GatewayInstance where

import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import Amazonka.MediaConnect.Types.BridgePlacement
import Amazonka.MediaConnect.Types.ConnectionStatus
import Amazonka.MediaConnect.Types.InstanceState
import Amazonka.MediaConnect.Types.MessageDetail
import qualified Amazonka.Prelude as Prelude

-- | The settings for an instance in a gateway.
--
-- /See:/ 'newGatewayInstance' smart constructor.
data GatewayInstance = GatewayInstance'
  { instanceMessages :: Prelude.Maybe [MessageDetail],
    -- | The Amazon Resource Name (ARN) of the instance.
    gatewayArn :: Prelude.Text,
    -- | The status of the instance.
    instanceState :: InstanceState,
    -- | The Amazon Resource Name (ARN) of the gateway.
    gatewayInstanceArn :: Prelude.Text,
    -- | The managed instance ID generated by the SSM install. This will begin
    -- with \"mi-\".
    instanceId :: Prelude.Text,
    -- | The running bridge count.
    runningBridgeCount :: Prelude.Int,
    -- | The availability of the instance to host new bridges. The
    -- bridgePlacement property can be LOCKED or AVAILABLE. If it is LOCKED, no
    -- new bridges can be deployed to this instance. If it is AVAILABLE, new
    -- bridges can be added to this instance.
    bridgePlacement :: BridgePlacement,
    -- | The connection state of the instance.
    connectionStatus :: ConnectionStatus
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'GatewayInstance' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'instanceMessages', 'gatewayInstance_instanceMessages' - Undocumented member.
--
-- 'gatewayArn', 'gatewayInstance_gatewayArn' - The Amazon Resource Name (ARN) of the instance.
--
-- 'instanceState', 'gatewayInstance_instanceState' - The status of the instance.
--
-- 'gatewayInstanceArn', 'gatewayInstance_gatewayInstanceArn' - The Amazon Resource Name (ARN) of the gateway.
--
-- 'instanceId', 'gatewayInstance_instanceId' - The managed instance ID generated by the SSM install. This will begin
-- with \"mi-\".
--
-- 'runningBridgeCount', 'gatewayInstance_runningBridgeCount' - The running bridge count.
--
-- 'bridgePlacement', 'gatewayInstance_bridgePlacement' - The availability of the instance to host new bridges. The
-- bridgePlacement property can be LOCKED or AVAILABLE. If it is LOCKED, no
-- new bridges can be deployed to this instance. If it is AVAILABLE, new
-- bridges can be added to this instance.
--
-- 'connectionStatus', 'gatewayInstance_connectionStatus' - The connection state of the instance.
newGatewayInstance ::
  -- | 'gatewayArn'
  Prelude.Text ->
  -- | 'instanceState'
  InstanceState ->
  -- | 'gatewayInstanceArn'
  Prelude.Text ->
  -- | 'instanceId'
  Prelude.Text ->
  -- | 'runningBridgeCount'
  Prelude.Int ->
  -- | 'bridgePlacement'
  BridgePlacement ->
  -- | 'connectionStatus'
  ConnectionStatus ->
  GatewayInstance
newGatewayInstance
  pGatewayArn_
  pInstanceState_
  pGatewayInstanceArn_
  pInstanceId_
  pRunningBridgeCount_
  pBridgePlacement_
  pConnectionStatus_ =
    GatewayInstance'
      { instanceMessages =
          Prelude.Nothing,
        gatewayArn = pGatewayArn_,
        instanceState = pInstanceState_,
        gatewayInstanceArn = pGatewayInstanceArn_,
        instanceId = pInstanceId_,
        runningBridgeCount = pRunningBridgeCount_,
        bridgePlacement = pBridgePlacement_,
        connectionStatus = pConnectionStatus_
      }

-- | Undocumented member.
gatewayInstance_instanceMessages :: Lens.Lens' GatewayInstance (Prelude.Maybe [MessageDetail])
gatewayInstance_instanceMessages = Lens.lens (\GatewayInstance' {instanceMessages} -> instanceMessages) (\s@GatewayInstance' {} a -> s {instanceMessages = a} :: GatewayInstance) Prelude.. Lens.mapping Lens.coerced

-- | The Amazon Resource Name (ARN) of the instance.
gatewayInstance_gatewayArn :: Lens.Lens' GatewayInstance Prelude.Text
gatewayInstance_gatewayArn = Lens.lens (\GatewayInstance' {gatewayArn} -> gatewayArn) (\s@GatewayInstance' {} a -> s {gatewayArn = a} :: GatewayInstance)

-- | The status of the instance.
gatewayInstance_instanceState :: Lens.Lens' GatewayInstance InstanceState
gatewayInstance_instanceState = Lens.lens (\GatewayInstance' {instanceState} -> instanceState) (\s@GatewayInstance' {} a -> s {instanceState = a} :: GatewayInstance)

-- | The Amazon Resource Name (ARN) of the gateway.
gatewayInstance_gatewayInstanceArn :: Lens.Lens' GatewayInstance Prelude.Text
gatewayInstance_gatewayInstanceArn = Lens.lens (\GatewayInstance' {gatewayInstanceArn} -> gatewayInstanceArn) (\s@GatewayInstance' {} a -> s {gatewayInstanceArn = a} :: GatewayInstance)

-- | The managed instance ID generated by the SSM install. This will begin
-- with \"mi-\".
gatewayInstance_instanceId :: Lens.Lens' GatewayInstance Prelude.Text
gatewayInstance_instanceId = Lens.lens (\GatewayInstance' {instanceId} -> instanceId) (\s@GatewayInstance' {} a -> s {instanceId = a} :: GatewayInstance)

-- | The running bridge count.
gatewayInstance_runningBridgeCount :: Lens.Lens' GatewayInstance Prelude.Int
gatewayInstance_runningBridgeCount = Lens.lens (\GatewayInstance' {runningBridgeCount} -> runningBridgeCount) (\s@GatewayInstance' {} a -> s {runningBridgeCount = a} :: GatewayInstance)

-- | The availability of the instance to host new bridges. The
-- bridgePlacement property can be LOCKED or AVAILABLE. If it is LOCKED, no
-- new bridges can be deployed to this instance. If it is AVAILABLE, new
-- bridges can be added to this instance.
gatewayInstance_bridgePlacement :: Lens.Lens' GatewayInstance BridgePlacement
gatewayInstance_bridgePlacement = Lens.lens (\GatewayInstance' {bridgePlacement} -> bridgePlacement) (\s@GatewayInstance' {} a -> s {bridgePlacement = a} :: GatewayInstance)

-- | The connection state of the instance.
gatewayInstance_connectionStatus :: Lens.Lens' GatewayInstance ConnectionStatus
gatewayInstance_connectionStatus = Lens.lens (\GatewayInstance' {connectionStatus} -> connectionStatus) (\s@GatewayInstance' {} a -> s {connectionStatus = a} :: GatewayInstance)

instance Data.FromJSON GatewayInstance where
  parseJSON =
    Data.withObject
      "GatewayInstance"
      ( \x ->
          GatewayInstance'
            Prelude.<$> ( x
                            Data..:? "instanceMessages"
                            Data..!= Prelude.mempty
                        )
            Prelude.<*> (x Data..: "gatewayArn")
            Prelude.<*> (x Data..: "instanceState")
            Prelude.<*> (x Data..: "gatewayInstanceArn")
            Prelude.<*> (x Data..: "instanceId")
            Prelude.<*> (x Data..: "runningBridgeCount")
            Prelude.<*> (x Data..: "bridgePlacement")
            Prelude.<*> (x Data..: "connectionStatus")
      )

instance Prelude.Hashable GatewayInstance where
  hashWithSalt _salt GatewayInstance' {..} =
    _salt
      `Prelude.hashWithSalt` instanceMessages
      `Prelude.hashWithSalt` gatewayArn
      `Prelude.hashWithSalt` instanceState
      `Prelude.hashWithSalt` gatewayInstanceArn
      `Prelude.hashWithSalt` instanceId
      `Prelude.hashWithSalt` runningBridgeCount
      `Prelude.hashWithSalt` bridgePlacement
      `Prelude.hashWithSalt` connectionStatus

instance Prelude.NFData GatewayInstance where
  rnf GatewayInstance' {..} =
    Prelude.rnf instanceMessages
      `Prelude.seq` Prelude.rnf gatewayArn
      `Prelude.seq` Prelude.rnf instanceState
      `Prelude.seq` Prelude.rnf gatewayInstanceArn
      `Prelude.seq` Prelude.rnf instanceId
      `Prelude.seq` Prelude.rnf runningBridgeCount
      `Prelude.seq` Prelude.rnf bridgePlacement
      `Prelude.seq` Prelude.rnf connectionStatus
